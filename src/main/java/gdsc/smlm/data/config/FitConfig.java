// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fit_config.proto

package gdsc.smlm.data.config;

@SuppressWarnings({"unchecked", "unused"})
public final class FitConfig {
  private FitConfig() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Define the fitting solver.
   * </pre>
   *
   * Protobuf enum {@code gdsc.smlm.data.config.FitSolver}
   */
  public enum FitSolver
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Custom Levenberg-Marquardt least-squares estimation.
     * Uses the Hessian matrix with a Newton optimisation method that requires inversion of the Hessian.
     * </pre>
     *
     * <code>LVM_LSE = 0;</code>
     */
    LVM_LSE(0),
    /**
     * <pre>
     * Custom Levenberg-Marquardt maximum-likelihood estimation for Poisson data using the method of Laurence &amp; Chromy (2010) Nature Methods 7, 338-339.
     * Uses the Hessian matrix with a Newton optimisation method that requires inversion of the Hessian.
     * Parameters are bounded using a hard-stop limit to prevent negative function values being produced.
     * </pre>
     *
     * <code>LVM_MLE = 1;</code>
     */
    LVM_MLE(1),
    /**
     * <pre>
     * Custom Levenberg-Marquardt weighted least-squares estimation for Poisson data using the method of Ruisheng, et al (2017) Optical Express 25, Issue 10, pp 11701-11716.
     * Uses the Hessian matrix with a Newton optimisation method that requires inversion of the Hessian.
     * </pre>
     *
     * <code>LVM_WLSE = 2;</code>
     */
    LVM_WLSE(2),
    /**
     * <pre>
     * Maximum Likelihood Estimator.
     * Uses a configurable noise model for the probability density function of the data.
     * </pre>
     *
     * <code>MLE = 3;</code>
     */
    MLE(3),
    /**
     * <pre>
     * Maximum Likelihood Estimator for Poisson data using the method of Smith et al, (2010) Nature Methods 7, 373-375.
     * Uses a Newton-Raphson update step for fast convergence close to the optimum. The algorithm is unstable when the initial parameter estimate is poor. 
     * </pre>
     *
     * <code>FAST_MLE = 4;</code>
     */
    FAST_MLE(4),
    /**
     * <pre>
     * Maximum Likelihood Estimator for Poisson data using the method of Smith et al, (2010) Nature Methods 7, 373-375.
     * Uses a Newton-Raphson (NR) update step for fast convergence close to the optimum. The algorithm uses a backtracking algorithm to choose an appropriate step in the search direction when the NR step results in a worse estimation. 
     * </pre>
     *
     * <code>BACKTRACKING_FAST_MLE = 5;</code>
     */
    BACKTRACKING_FAST_MLE(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Custom Levenberg-Marquardt least-squares estimation.
     * Uses the Hessian matrix with a Newton optimisation method that requires inversion of the Hessian.
     * </pre>
     *
     * <code>LVM_LSE = 0;</code>
     */
    public static final int LVM_LSE_VALUE = 0;
    /**
     * <pre>
     * Custom Levenberg-Marquardt maximum-likelihood estimation for Poisson data using the method of Laurence &amp; Chromy (2010) Nature Methods 7, 338-339.
     * Uses the Hessian matrix with a Newton optimisation method that requires inversion of the Hessian.
     * Parameters are bounded using a hard-stop limit to prevent negative function values being produced.
     * </pre>
     *
     * <code>LVM_MLE = 1;</code>
     */
    public static final int LVM_MLE_VALUE = 1;
    /**
     * <pre>
     * Custom Levenberg-Marquardt weighted least-squares estimation for Poisson data using the method of Ruisheng, et al (2017) Optical Express 25, Issue 10, pp 11701-11716.
     * Uses the Hessian matrix with a Newton optimisation method that requires inversion of the Hessian.
     * </pre>
     *
     * <code>LVM_WLSE = 2;</code>
     */
    public static final int LVM_WLSE_VALUE = 2;
    /**
     * <pre>
     * Maximum Likelihood Estimator.
     * Uses a configurable noise model for the probability density function of the data.
     * </pre>
     *
     * <code>MLE = 3;</code>
     */
    public static final int MLE_VALUE = 3;
    /**
     * <pre>
     * Maximum Likelihood Estimator for Poisson data using the method of Smith et al, (2010) Nature Methods 7, 373-375.
     * Uses a Newton-Raphson update step for fast convergence close to the optimum. The algorithm is unstable when the initial parameter estimate is poor. 
     * </pre>
     *
     * <code>FAST_MLE = 4;</code>
     */
    public static final int FAST_MLE_VALUE = 4;
    /**
     * <pre>
     * Maximum Likelihood Estimator for Poisson data using the method of Smith et al, (2010) Nature Methods 7, 373-375.
     * Uses a Newton-Raphson (NR) update step for fast convergence close to the optimum. The algorithm uses a backtracking algorithm to choose an appropriate step in the search direction when the NR step results in a worse estimation. 
     * </pre>
     *
     * <code>BACKTRACKING_FAST_MLE = 5;</code>
     */
    public static final int BACKTRACKING_FAST_MLE_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static FitSolver valueOf(int value) {
      return forNumber(value);
    }

    public static FitSolver forNumber(int value) {
      switch (value) {
        case 0: return LVM_LSE;
        case 1: return LVM_MLE;
        case 2: return LVM_WLSE;
        case 3: return MLE;
        case 4: return FAST_MLE;
        case 5: return BACKTRACKING_FAST_MLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FitSolver>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        FitSolver> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FitSolver>() {
            public FitSolver findValueByNumber(int number) {
              return FitSolver.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.FitConfig.getDescriptor().getEnumTypes().get(0);
    }

    private static final FitSolver[] VALUES = values();

    public static FitSolver valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private FitSolver(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gdsc.smlm.data.config.FitSolver)
  }

  /**
   * <pre>
   * Define the search method for the configurable maximum likelihood estimator.
   * </pre>
   *
   * Protobuf enum {@code gdsc.smlm.data.config.SearchMethod}
   */
  public enum SearchMethod
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Search using Powell's conjugate direction method using hard limits to ensure a bounded search
     * </pre>
     *
     * <code>POWELL_BOUNDED = 0;</code>
     */
    POWELL_BOUNDED(0),
    /**
     * <pre>
     * Search using Powell's conjugate direction method
     * </pre>
     *
     * <code>POWELL = 1;</code>
     */
    POWELL(1),
    /**
     * <pre>
     * Search using Powell's conjugate direction method using a mapping adapter to ensure a bounded search
     * </pre>
     *
     * <code>POWELL_ADAPTER = 2;</code>
     */
    POWELL_ADAPTER(2),
    /**
     * <pre>
     * Search using Powell's Bound Optimization BY Quadratic Approximation (BOBYQA) algorithm.
     * BOBYQA could also be considered as a replacement of any derivative-based optimizer when the derivatives are
     * approximated by finite differences. This is a bounded search.
     * </pre>
     *
     * <code>BOBYQA = 3;</code>
     */
    BOBYQA(3),
    /**
     * <pre>
     * Search using active Covariance Matrix Adaptation Evolution Strategy (CMA-ES).
     * The CMA-ES is a reliable stochastic optimization method which should be applied if derivative-based methods,
     * e.g. conjugate gradient, fail due to a rugged search landscape. This is a bounded search.
     * </pre>
     *
     * <code>CMAES = 4;</code>
     */
    CMAES(4),
    /**
     * <pre>
     * Search using a non-linear conjugate gradient optimiser. Use the Fletcher-Reeves update formulas for the
     * conjugate search directions.
     * This is a bounded search using simple truncation of coordinates at the bounds of the search space.
     * </pre>
     *
     * <code>CONJUGATE_GRADIENT_FR = 5;</code>
     */
    CONJUGATE_GRADIENT_FR(5),
    /**
     * <pre>
     * Search using a non-linear conjugate gradient optimiser. Use the Polak-Ribière update formulas for the
     * conjugate search directions.
     * This is a bounded search using simple truncation of coordinates at the bounds of the search space.
     * </pre>
     *
     * <code>CONJUGATE_GRADIENT_PR = 6;</code>
     */
    CONJUGATE_GRADIENT_PR(6),
    /**
     * <pre>
     * Search using a Broyden-Fletcher-Goldfarb-Shanno (BFGS) gradient optimiser.
     * </pre>
     *
     * <code>BFGS = 7;</code>
     */
    BFGS(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Search using Powell's conjugate direction method using hard limits to ensure a bounded search
     * </pre>
     *
     * <code>POWELL_BOUNDED = 0;</code>
     */
    public static final int POWELL_BOUNDED_VALUE = 0;
    /**
     * <pre>
     * Search using Powell's conjugate direction method
     * </pre>
     *
     * <code>POWELL = 1;</code>
     */
    public static final int POWELL_VALUE = 1;
    /**
     * <pre>
     * Search using Powell's conjugate direction method using a mapping adapter to ensure a bounded search
     * </pre>
     *
     * <code>POWELL_ADAPTER = 2;</code>
     */
    public static final int POWELL_ADAPTER_VALUE = 2;
    /**
     * <pre>
     * Search using Powell's Bound Optimization BY Quadratic Approximation (BOBYQA) algorithm.
     * BOBYQA could also be considered as a replacement of any derivative-based optimizer when the derivatives are
     * approximated by finite differences. This is a bounded search.
     * </pre>
     *
     * <code>BOBYQA = 3;</code>
     */
    public static final int BOBYQA_VALUE = 3;
    /**
     * <pre>
     * Search using active Covariance Matrix Adaptation Evolution Strategy (CMA-ES).
     * The CMA-ES is a reliable stochastic optimization method which should be applied if derivative-based methods,
     * e.g. conjugate gradient, fail due to a rugged search landscape. This is a bounded search.
     * </pre>
     *
     * <code>CMAES = 4;</code>
     */
    public static final int CMAES_VALUE = 4;
    /**
     * <pre>
     * Search using a non-linear conjugate gradient optimiser. Use the Fletcher-Reeves update formulas for the
     * conjugate search directions.
     * This is a bounded search using simple truncation of coordinates at the bounds of the search space.
     * </pre>
     *
     * <code>CONJUGATE_GRADIENT_FR = 5;</code>
     */
    public static final int CONJUGATE_GRADIENT_FR_VALUE = 5;
    /**
     * <pre>
     * Search using a non-linear conjugate gradient optimiser. Use the Polak-Ribière update formulas for the
     * conjugate search directions.
     * This is a bounded search using simple truncation of coordinates at the bounds of the search space.
     * </pre>
     *
     * <code>CONJUGATE_GRADIENT_PR = 6;</code>
     */
    public static final int CONJUGATE_GRADIENT_PR_VALUE = 6;
    /**
     * <pre>
     * Search using a Broyden-Fletcher-Goldfarb-Shanno (BFGS) gradient optimiser.
     * </pre>
     *
     * <code>BFGS = 7;</code>
     */
    public static final int BFGS_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SearchMethod valueOf(int value) {
      return forNumber(value);
    }

    public static SearchMethod forNumber(int value) {
      switch (value) {
        case 0: return POWELL_BOUNDED;
        case 1: return POWELL;
        case 2: return POWELL_ADAPTER;
        case 3: return BOBYQA;
        case 4: return CMAES;
        case 5: return CONJUGATE_GRADIENT_FR;
        case 6: return CONJUGATE_GRADIENT_PR;
        case 7: return BFGS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SearchMethod>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SearchMethod> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SearchMethod>() {
            public SearchMethod findValueByNumber(int number) {
              return SearchMethod.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.FitConfig.getDescriptor().getEnumTypes().get(1);
    }

    private static final SearchMethod[] VALUES = values();

    public static SearchMethod valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SearchMethod(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gdsc.smlm.data.config.SearchMethod)
  }

  /**
   * <pre>
   * Define the type of filter used for identifying candidate peaks.
   * </pre>
   *
   * Protobuf enum {@code gdsc.smlm.data.config.DataFilterType}
   */
  public enum DataFilterType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Use a single filter
     * </pre>
     *
     * <code>SINGLE = 0;</code>
     */
    SINGLE(0),
    /**
     * <pre>
     * Use a difference filter (the second subtracted from the first)
     * </pre>
     *
     * <code>DIFFERENCE = 1;</code>
     */
    DIFFERENCE(1),
    /**
     * <pre>
     * Use a jury of multiple filters
     * </pre>
     *
     * <code>JURY = 2;</code>
     */
    JURY(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Use a single filter
     * </pre>
     *
     * <code>SINGLE = 0;</code>
     */
    public static final int SINGLE_VALUE = 0;
    /**
     * <pre>
     * Use a difference filter (the second subtracted from the first)
     * </pre>
     *
     * <code>DIFFERENCE = 1;</code>
     */
    public static final int DIFFERENCE_VALUE = 1;
    /**
     * <pre>
     * Use a jury of multiple filters
     * </pre>
     *
     * <code>JURY = 2;</code>
     */
    public static final int JURY_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DataFilterType valueOf(int value) {
      return forNumber(value);
    }

    public static DataFilterType forNumber(int value) {
      switch (value) {
        case 0: return SINGLE;
        case 1: return DIFFERENCE;
        case 2: return JURY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DataFilterType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DataFilterType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DataFilterType>() {
            public DataFilterType findValueByNumber(int number) {
              return DataFilterType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.FitConfig.getDescriptor().getEnumTypes().get(2);
    }

    private static final DataFilterType[] VALUES = values();

    public static DataFilterType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DataFilterType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gdsc.smlm.data.config.DataFilterType)
  }

  /**
   * <pre>
   * Define the method used to filter the input data before identifying candidate peaks
   * </pre>
   *
   * Protobuf enum {@code gdsc.smlm.data.config.DataFilterMethod}
   */
  public enum DataFilterMethod
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Use a mean within a specified area
     * </pre>
     *
     * <code>MEAN = 0;</code>
     */
    MEAN(0),
    /**
     * <pre>
     * Use a mean within a specified box area. The box has integer size.
     * </pre>
     *
     * <code>BLOCK_MEAN = 1;</code>
     */
    BLOCK_MEAN(1),
    /**
     * <pre>
     * Use a mean within a specified circle area
     * </pre>
     *
     * <code>CIRCULAR_MEAN = 2;</code>
     */
    CIRCULAR_MEAN(2),
    /**
     * <pre>
     * Use a Gaussian with a specified radius
     * </pre>
     *
     * <code>GAUSSIAN = 3;</code>
     */
    GAUSSIAN(3),
    /**
     * <pre>
     * Use a median within a specified box area. The box has integer size.
     * </pre>
     *
     * <code>MEDIAN = 4;</code>
     */
    MEDIAN(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Use a mean within a specified area
     * </pre>
     *
     * <code>MEAN = 0;</code>
     */
    public static final int MEAN_VALUE = 0;
    /**
     * <pre>
     * Use a mean within a specified box area. The box has integer size.
     * </pre>
     *
     * <code>BLOCK_MEAN = 1;</code>
     */
    public static final int BLOCK_MEAN_VALUE = 1;
    /**
     * <pre>
     * Use a mean within a specified circle area
     * </pre>
     *
     * <code>CIRCULAR_MEAN = 2;</code>
     */
    public static final int CIRCULAR_MEAN_VALUE = 2;
    /**
     * <pre>
     * Use a Gaussian with a specified radius
     * </pre>
     *
     * <code>GAUSSIAN = 3;</code>
     */
    public static final int GAUSSIAN_VALUE = 3;
    /**
     * <pre>
     * Use a median within a specified box area. The box has integer size.
     * </pre>
     *
     * <code>MEDIAN = 4;</code>
     */
    public static final int MEDIAN_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DataFilterMethod valueOf(int value) {
      return forNumber(value);
    }

    public static DataFilterMethod forNumber(int value) {
      switch (value) {
        case 0: return MEAN;
        case 1: return BLOCK_MEAN;
        case 2: return CIRCULAR_MEAN;
        case 3: return GAUSSIAN;
        case 4: return MEDIAN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DataFilterMethod>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DataFilterMethod> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DataFilterMethod>() {
            public DataFilterMethod findValueByNumber(int number) {
              return DataFilterMethod.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.FitConfig.getDescriptor().getEnumTypes().get(3);
    }

    private static final DataFilterMethod[] VALUES = values();

    public static DataFilterMethod valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DataFilterMethod(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gdsc.smlm.data.config.DataFilterMethod)
  }

  /**
   * <pre>
   * Define the methods for noise estimation.
   * </pre>
   *
   * Protobuf enum {@code gdsc.smlm.data.config.NoiseEstimatorMethod}
   */
  public enum NoiseEstimatorMethod
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Use all pixels
     * </pre>
     *
     * <code>ALL_PIXELS = 0;</code>
     */
    ALL_PIXELS(0),
    /**
     * <pre>
     * Use a range around the lowest pixel in the image
     * </pre>
     *
     * <code>LOWEST_PIXELS = 1;</code>
     */
    LOWEST_PIXELS(1),
    /**
     * <pre>
     * Use the psuedo-residuals and calculate the least median of squares
     * </pre>
     *
     * <code>RESIDUALS_LEAST_MEDIAN_OF_SQUARES = 2;</code>
     */
    RESIDUALS_LEAST_MEDIAN_OF_SQUARES(2),
    /**
     * <pre>
     * Use the psuedo-residuals and calculate the least trimmed of squares
     * </pre>
     *
     * <code>RESIDUALS_LEAST_TRIMMED_OF_SQUARES = 3;</code>
     */
    RESIDUALS_LEAST_TRIMMED_OF_SQUARES(3),
    /**
     * <pre>
     * Use the psuedo-residuals and calculate the least mean of squares
     * </pre>
     *
     * <code>RESIDUALS_LEAST_MEAN_OF_SQUARES = 4;</code>
     */
    RESIDUALS_LEAST_MEAN_OF_SQUARES(4),
    /**
     * <pre>
     * Use the psuedo-residuals ignoring image border and calculate the least median of squares
     * </pre>
     *
     * <code>QUICK_RESIDUALS_LEAST_MEDIAN_OF_SQUARES = 5;</code>
     */
    QUICK_RESIDUALS_LEAST_MEDIAN_OF_SQUARES(5),
    /**
     * <pre>
     * Use the psuedo-residuals ignoring image border and calculate the least trimmed of squares
     * </pre>
     *
     * <code>QUICK_RESIDUALS_LEAST_TRIMMED_OF_SQUARES = 6;</code>
     */
    QUICK_RESIDUALS_LEAST_TRIMMED_OF_SQUARES(6),
    /**
     * <pre>
     * Use the psuedo-residuals ignoring image border and calculate the least mean of squares
     * </pre>
     *
     * <code>QUICK_RESIDUALS_LEAST_MEAN_OF_SQUARES = 7;</code>
     */
    QUICK_RESIDUALS_LEAST_MEAN_OF_SQUARES(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Use all pixels
     * </pre>
     *
     * <code>ALL_PIXELS = 0;</code>
     */
    public static final int ALL_PIXELS_VALUE = 0;
    /**
     * <pre>
     * Use a range around the lowest pixel in the image
     * </pre>
     *
     * <code>LOWEST_PIXELS = 1;</code>
     */
    public static final int LOWEST_PIXELS_VALUE = 1;
    /**
     * <pre>
     * Use the psuedo-residuals and calculate the least median of squares
     * </pre>
     *
     * <code>RESIDUALS_LEAST_MEDIAN_OF_SQUARES = 2;</code>
     */
    public static final int RESIDUALS_LEAST_MEDIAN_OF_SQUARES_VALUE = 2;
    /**
     * <pre>
     * Use the psuedo-residuals and calculate the least trimmed of squares
     * </pre>
     *
     * <code>RESIDUALS_LEAST_TRIMMED_OF_SQUARES = 3;</code>
     */
    public static final int RESIDUALS_LEAST_TRIMMED_OF_SQUARES_VALUE = 3;
    /**
     * <pre>
     * Use the psuedo-residuals and calculate the least mean of squares
     * </pre>
     *
     * <code>RESIDUALS_LEAST_MEAN_OF_SQUARES = 4;</code>
     */
    public static final int RESIDUALS_LEAST_MEAN_OF_SQUARES_VALUE = 4;
    /**
     * <pre>
     * Use the psuedo-residuals ignoring image border and calculate the least median of squares
     * </pre>
     *
     * <code>QUICK_RESIDUALS_LEAST_MEDIAN_OF_SQUARES = 5;</code>
     */
    public static final int QUICK_RESIDUALS_LEAST_MEDIAN_OF_SQUARES_VALUE = 5;
    /**
     * <pre>
     * Use the psuedo-residuals ignoring image border and calculate the least trimmed of squares
     * </pre>
     *
     * <code>QUICK_RESIDUALS_LEAST_TRIMMED_OF_SQUARES = 6;</code>
     */
    public static final int QUICK_RESIDUALS_LEAST_TRIMMED_OF_SQUARES_VALUE = 6;
    /**
     * <pre>
     * Use the psuedo-residuals ignoring image border and calculate the least mean of squares
     * </pre>
     *
     * <code>QUICK_RESIDUALS_LEAST_MEAN_OF_SQUARES = 7;</code>
     */
    public static final int QUICK_RESIDUALS_LEAST_MEAN_OF_SQUARES_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static NoiseEstimatorMethod valueOf(int value) {
      return forNumber(value);
    }

    public static NoiseEstimatorMethod forNumber(int value) {
      switch (value) {
        case 0: return ALL_PIXELS;
        case 1: return LOWEST_PIXELS;
        case 2: return RESIDUALS_LEAST_MEDIAN_OF_SQUARES;
        case 3: return RESIDUALS_LEAST_TRIMMED_OF_SQUARES;
        case 4: return RESIDUALS_LEAST_MEAN_OF_SQUARES;
        case 5: return QUICK_RESIDUALS_LEAST_MEDIAN_OF_SQUARES;
        case 6: return QUICK_RESIDUALS_LEAST_TRIMMED_OF_SQUARES;
        case 7: return QUICK_RESIDUALS_LEAST_MEAN_OF_SQUARES;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<NoiseEstimatorMethod>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        NoiseEstimatorMethod> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NoiseEstimatorMethod>() {
            public NoiseEstimatorMethod findValueByNumber(int number) {
              return NoiseEstimatorMethod.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.FitConfig.getDescriptor().getEnumTypes().get(4);
    }

    private static final NoiseEstimatorMethod[] VALUES = values();

    public static NoiseEstimatorMethod valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private NoiseEstimatorMethod(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gdsc.smlm.data.config.NoiseEstimatorMethod)
  }

  public interface FitSolverSettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gdsc.smlm.data.config.FitSolverSettings)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Set to true to fix the PSF using the initial parameters
     * </pre>
     *
     * <code>bool fixed_psf = 1;</code>
     */
    boolean getFixedPsf();

    /**
     * <pre>
     * Set to true to disable background fitting
     * </pre>
     *
     * <code>bool disable_background_fitting = 2;</code>
     */
    boolean getDisableBackgroundFitting();

    /**
     * <pre>
     * Set to true to disable signal intensity fitting
     * </pre>
     *
     * <code>bool disable_signal_fitting = 3;</code>
     */
    boolean getDisableSignalFitting();

    /**
     * <pre>
     * The type of fit solver
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSolver fit_solver = 4;</code>
     */
    int getFitSolverValue();
    /**
     * <pre>
     * The type of fit solver
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSolver fit_solver = 4;</code>
     */
    gdsc.smlm.data.config.FitConfig.FitSolver getFitSolver();

    /**
     * <pre>
     * Set to true to use a fixed number of iterations during fitting
     * </pre>
     *
     * <code>bool fixed_iterations = 5;</code>
     */
    boolean getFixedIterations();

    /**
     * <pre>
     * The maximum/fixed iterations to use during fitting. 
     * If not using fixed iterations then fitting will fail if this limit is reached. 
     * </pre>
     *
     * <code>int32 max_iterations = 6;</code>
     */
    int getMaxIterations();

    /**
     * <pre>
     * The relative threshold for convergence on the function score. Set to negative to disable.
     * </pre>
     *
     * <code>double relative_threshold = 7;</code>
     */
    double getRelativeThreshold();

    /**
     * <pre>
     * The absolute threshold for convergence on the function score. Set to negative to disable.
     * </pre>
     *
     * <code>double absolute_threshold = 8;</code>
     */
    double getAbsoluteThreshold();

    /**
     * <pre>
     * The relative threshold for convergence on the function parameters. Set to negative to disable.
     * </pre>
     *
     * <code>double parameter_relative_threshold = 9;</code>
     */
    double getParameterRelativeThreshold();

    /**
     * <pre>
     * The absolute threshold for convergence on the function parameters. Set to negative to disable.
     * </pre>
     *
     * <code>double parameter_absolute_threshold = 10;</code>
     */
    double getParameterAbsoluteThreshold();

    /**
     * <pre>
     * The initial lambda parameter for the Levenberg-Marquardt algorithm
     * </pre>
     *
     * <code>double lambda = 11;</code>
     */
    double getLambda();

    /**
     * <pre>
     * The search method to use for the configurable maximum likelihood estimator
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.SearchMethod search_method = 12;</code>
     */
    int getSearchMethodValue();
    /**
     * <pre>
     * The search method to use for the configurable maximum likelihood estimator
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.SearchMethod search_method = 12;</code>
     */
    gdsc.smlm.data.config.FitConfig.SearchMethod getSearchMethod();

    /**
     * <pre>
     * Set to true to use the function gradient during line minimisation, i.e. find the 
     * parameters where the gradient is zero. The default is the to minimise the function value.
     * </pre>
     *
     * <code>bool gradient_line_minimisation = 13;</code>
     */
    boolean getGradientLineMinimisation();

    /**
     * <pre>
     * Set to true to model the camera noise in the configurable maximum likelihood estimator. 
     * </pre>
     *
     * <code>bool model_camera = 14;</code>
     */
    boolean getModelCamera();

    /**
     * <pre>
     * The maximum number of function evaluations in the configurable maximum likelihood estimator.
     * </pre>
     *
     * <code>int32 max_function_evaluations = 15;</code>
     */
    int getMaxFunctionEvaluations();

    /**
     * <pre>
     * Set to true to use parameter clamping
     * </pre>
     *
     * <code>bool use_clamping = 16;</code>
     */
    boolean getUseClamping();

    /**
     * <pre>
     * Set to true to use dynamic parameter clamping, i.e. update the clamp values when the step direction changes
     * </pre>
     *
     * <code>bool use_dynamic_clamping = 17;</code>
     */
    boolean getUseDynamicClamping();

    /**
     * <pre>
     * The initial clamp values for each of the PSF parameters.
     * </pre>
     *
     * <code>repeated double clamp_value = 18;</code>
     */
    java.util.List<java.lang.Double> getClampValueList();
    /**
     * <pre>
     * The initial clamp values for each of the PSF parameters.
     * </pre>
     *
     * <code>repeated double clamp_value = 18;</code>
     */
    int getClampValueCount();
    /**
     * <pre>
     * The initial clamp values for each of the PSF parameters.
     * </pre>
     *
     * <code>repeated double clamp_value = 18;</code>
     */
    double getClampValue(int index);
  }
  /**
   * <pre>
   * Define settings for the fit solver.
   * </pre>
   *
   * Protobuf type {@code gdsc.smlm.data.config.FitSolverSettings}
   */
  public  static final class FitSolverSettings extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gdsc.smlm.data.config.FitSolverSettings)
      FitSolverSettingsOrBuilder {
    // Use FitSolverSettings.newBuilder() to construct.
    private FitSolverSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FitSolverSettings() {
      fixedPsf_ = false;
      disableBackgroundFitting_ = false;
      disableSignalFitting_ = false;
      fitSolver_ = 0;
      fixedIterations_ = false;
      maxIterations_ = 0;
      relativeThreshold_ = 0D;
      absoluteThreshold_ = 0D;
      parameterRelativeThreshold_ = 0D;
      parameterAbsoluteThreshold_ = 0D;
      lambda_ = 0D;
      searchMethod_ = 0;
      gradientLineMinimisation_ = false;
      modelCamera_ = false;
      maxFunctionEvaluations_ = 0;
      useClamping_ = false;
      useDynamicClamping_ = false;
      clampValue_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private FitSolverSettings(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              fixedPsf_ = input.readBool();
              break;
            }
            case 16: {

              disableBackgroundFitting_ = input.readBool();
              break;
            }
            case 24: {

              disableSignalFitting_ = input.readBool();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();

              fitSolver_ = rawValue;
              break;
            }
            case 40: {

              fixedIterations_ = input.readBool();
              break;
            }
            case 48: {

              maxIterations_ = input.readInt32();
              break;
            }
            case 57: {

              relativeThreshold_ = input.readDouble();
              break;
            }
            case 65: {

              absoluteThreshold_ = input.readDouble();
              break;
            }
            case 73: {

              parameterRelativeThreshold_ = input.readDouble();
              break;
            }
            case 81: {

              parameterAbsoluteThreshold_ = input.readDouble();
              break;
            }
            case 89: {

              lambda_ = input.readDouble();
              break;
            }
            case 96: {
              int rawValue = input.readEnum();

              searchMethod_ = rawValue;
              break;
            }
            case 104: {

              gradientLineMinimisation_ = input.readBool();
              break;
            }
            case 112: {

              modelCamera_ = input.readBool();
              break;
            }
            case 120: {

              maxFunctionEvaluations_ = input.readInt32();
              break;
            }
            case 128: {

              useClamping_ = input.readBool();
              break;
            }
            case 136: {

              useDynamicClamping_ = input.readBool();
              break;
            }
            case 145: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                clampValue_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00020000;
              }
              clampValue_.add(input.readDouble());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                clampValue_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                clampValue_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          clampValue_ = java.util.Collections.unmodifiableList(clampValue_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitSolverSettings_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitSolverSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.FitConfig.FitSolverSettings.class, gdsc.smlm.data.config.FitConfig.FitSolverSettings.Builder.class);
    }

    private int bitField0_;
    public static final int FIXED_PSF_FIELD_NUMBER = 1;
    private boolean fixedPsf_;
    /**
     * <pre>
     * Set to true to fix the PSF using the initial parameters
     * </pre>
     *
     * <code>bool fixed_psf = 1;</code>
     */
    public boolean getFixedPsf() {
      return fixedPsf_;
    }

    public static final int DISABLE_BACKGROUND_FITTING_FIELD_NUMBER = 2;
    private boolean disableBackgroundFitting_;
    /**
     * <pre>
     * Set to true to disable background fitting
     * </pre>
     *
     * <code>bool disable_background_fitting = 2;</code>
     */
    public boolean getDisableBackgroundFitting() {
      return disableBackgroundFitting_;
    }

    public static final int DISABLE_SIGNAL_FITTING_FIELD_NUMBER = 3;
    private boolean disableSignalFitting_;
    /**
     * <pre>
     * Set to true to disable signal intensity fitting
     * </pre>
     *
     * <code>bool disable_signal_fitting = 3;</code>
     */
    public boolean getDisableSignalFitting() {
      return disableSignalFitting_;
    }

    public static final int FIT_SOLVER_FIELD_NUMBER = 4;
    private int fitSolver_;
    /**
     * <pre>
     * The type of fit solver
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSolver fit_solver = 4;</code>
     */
    public int getFitSolverValue() {
      return fitSolver_;
    }
    /**
     * <pre>
     * The type of fit solver
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSolver fit_solver = 4;</code>
     */
    public gdsc.smlm.data.config.FitConfig.FitSolver getFitSolver() {
      gdsc.smlm.data.config.FitConfig.FitSolver result = gdsc.smlm.data.config.FitConfig.FitSolver.valueOf(fitSolver_);
      return result == null ? gdsc.smlm.data.config.FitConfig.FitSolver.UNRECOGNIZED : result;
    }

    public static final int FIXED_ITERATIONS_FIELD_NUMBER = 5;
    private boolean fixedIterations_;
    /**
     * <pre>
     * Set to true to use a fixed number of iterations during fitting
     * </pre>
     *
     * <code>bool fixed_iterations = 5;</code>
     */
    public boolean getFixedIterations() {
      return fixedIterations_;
    }

    public static final int MAX_ITERATIONS_FIELD_NUMBER = 6;
    private int maxIterations_;
    /**
     * <pre>
     * The maximum/fixed iterations to use during fitting. 
     * If not using fixed iterations then fitting will fail if this limit is reached. 
     * </pre>
     *
     * <code>int32 max_iterations = 6;</code>
     */
    public int getMaxIterations() {
      return maxIterations_;
    }

    public static final int RELATIVE_THRESHOLD_FIELD_NUMBER = 7;
    private double relativeThreshold_;
    /**
     * <pre>
     * The relative threshold for convergence on the function score. Set to negative to disable.
     * </pre>
     *
     * <code>double relative_threshold = 7;</code>
     */
    public double getRelativeThreshold() {
      return relativeThreshold_;
    }

    public static final int ABSOLUTE_THRESHOLD_FIELD_NUMBER = 8;
    private double absoluteThreshold_;
    /**
     * <pre>
     * The absolute threshold for convergence on the function score. Set to negative to disable.
     * </pre>
     *
     * <code>double absolute_threshold = 8;</code>
     */
    public double getAbsoluteThreshold() {
      return absoluteThreshold_;
    }

    public static final int PARAMETER_RELATIVE_THRESHOLD_FIELD_NUMBER = 9;
    private double parameterRelativeThreshold_;
    /**
     * <pre>
     * The relative threshold for convergence on the function parameters. Set to negative to disable.
     * </pre>
     *
     * <code>double parameter_relative_threshold = 9;</code>
     */
    public double getParameterRelativeThreshold() {
      return parameterRelativeThreshold_;
    }

    public static final int PARAMETER_ABSOLUTE_THRESHOLD_FIELD_NUMBER = 10;
    private double parameterAbsoluteThreshold_;
    /**
     * <pre>
     * The absolute threshold for convergence on the function parameters. Set to negative to disable.
     * </pre>
     *
     * <code>double parameter_absolute_threshold = 10;</code>
     */
    public double getParameterAbsoluteThreshold() {
      return parameterAbsoluteThreshold_;
    }

    public static final int LAMBDA_FIELD_NUMBER = 11;
    private double lambda_;
    /**
     * <pre>
     * The initial lambda parameter for the Levenberg-Marquardt algorithm
     * </pre>
     *
     * <code>double lambda = 11;</code>
     */
    public double getLambda() {
      return lambda_;
    }

    public static final int SEARCH_METHOD_FIELD_NUMBER = 12;
    private int searchMethod_;
    /**
     * <pre>
     * The search method to use for the configurable maximum likelihood estimator
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.SearchMethod search_method = 12;</code>
     */
    public int getSearchMethodValue() {
      return searchMethod_;
    }
    /**
     * <pre>
     * The search method to use for the configurable maximum likelihood estimator
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.SearchMethod search_method = 12;</code>
     */
    public gdsc.smlm.data.config.FitConfig.SearchMethod getSearchMethod() {
      gdsc.smlm.data.config.FitConfig.SearchMethod result = gdsc.smlm.data.config.FitConfig.SearchMethod.valueOf(searchMethod_);
      return result == null ? gdsc.smlm.data.config.FitConfig.SearchMethod.UNRECOGNIZED : result;
    }

    public static final int GRADIENT_LINE_MINIMISATION_FIELD_NUMBER = 13;
    private boolean gradientLineMinimisation_;
    /**
     * <pre>
     * Set to true to use the function gradient during line minimisation, i.e. find the 
     * parameters where the gradient is zero. The default is the to minimise the function value.
     * </pre>
     *
     * <code>bool gradient_line_minimisation = 13;</code>
     */
    public boolean getGradientLineMinimisation() {
      return gradientLineMinimisation_;
    }

    public static final int MODEL_CAMERA_FIELD_NUMBER = 14;
    private boolean modelCamera_;
    /**
     * <pre>
     * Set to true to model the camera noise in the configurable maximum likelihood estimator. 
     * </pre>
     *
     * <code>bool model_camera = 14;</code>
     */
    public boolean getModelCamera() {
      return modelCamera_;
    }

    public static final int MAX_FUNCTION_EVALUATIONS_FIELD_NUMBER = 15;
    private int maxFunctionEvaluations_;
    /**
     * <pre>
     * The maximum number of function evaluations in the configurable maximum likelihood estimator.
     * </pre>
     *
     * <code>int32 max_function_evaluations = 15;</code>
     */
    public int getMaxFunctionEvaluations() {
      return maxFunctionEvaluations_;
    }

    public static final int USE_CLAMPING_FIELD_NUMBER = 16;
    private boolean useClamping_;
    /**
     * <pre>
     * Set to true to use parameter clamping
     * </pre>
     *
     * <code>bool use_clamping = 16;</code>
     */
    public boolean getUseClamping() {
      return useClamping_;
    }

    public static final int USE_DYNAMIC_CLAMPING_FIELD_NUMBER = 17;
    private boolean useDynamicClamping_;
    /**
     * <pre>
     * Set to true to use dynamic parameter clamping, i.e. update the clamp values when the step direction changes
     * </pre>
     *
     * <code>bool use_dynamic_clamping = 17;</code>
     */
    public boolean getUseDynamicClamping() {
      return useDynamicClamping_;
    }

    public static final int CLAMP_VALUE_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Double> clampValue_;
    /**
     * <pre>
     * The initial clamp values for each of the PSF parameters.
     * </pre>
     *
     * <code>repeated double clamp_value = 18;</code>
     */
    public java.util.List<java.lang.Double>
        getClampValueList() {
      return clampValue_;
    }
    /**
     * <pre>
     * The initial clamp values for each of the PSF parameters.
     * </pre>
     *
     * <code>repeated double clamp_value = 18;</code>
     */
    public int getClampValueCount() {
      return clampValue_.size();
    }
    /**
     * <pre>
     * The initial clamp values for each of the PSF parameters.
     * </pre>
     *
     * <code>repeated double clamp_value = 18;</code>
     */
    public double getClampValue(int index) {
      return clampValue_.get(index);
    }
    private int clampValueMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (fixedPsf_ != false) {
        output.writeBool(1, fixedPsf_);
      }
      if (disableBackgroundFitting_ != false) {
        output.writeBool(2, disableBackgroundFitting_);
      }
      if (disableSignalFitting_ != false) {
        output.writeBool(3, disableSignalFitting_);
      }
      if (fitSolver_ != gdsc.smlm.data.config.FitConfig.FitSolver.LVM_LSE.getNumber()) {
        output.writeEnum(4, fitSolver_);
      }
      if (fixedIterations_ != false) {
        output.writeBool(5, fixedIterations_);
      }
      if (maxIterations_ != 0) {
        output.writeInt32(6, maxIterations_);
      }
      if (relativeThreshold_ != 0D) {
        output.writeDouble(7, relativeThreshold_);
      }
      if (absoluteThreshold_ != 0D) {
        output.writeDouble(8, absoluteThreshold_);
      }
      if (parameterRelativeThreshold_ != 0D) {
        output.writeDouble(9, parameterRelativeThreshold_);
      }
      if (parameterAbsoluteThreshold_ != 0D) {
        output.writeDouble(10, parameterAbsoluteThreshold_);
      }
      if (lambda_ != 0D) {
        output.writeDouble(11, lambda_);
      }
      if (searchMethod_ != gdsc.smlm.data.config.FitConfig.SearchMethod.POWELL_BOUNDED.getNumber()) {
        output.writeEnum(12, searchMethod_);
      }
      if (gradientLineMinimisation_ != false) {
        output.writeBool(13, gradientLineMinimisation_);
      }
      if (modelCamera_ != false) {
        output.writeBool(14, modelCamera_);
      }
      if (maxFunctionEvaluations_ != 0) {
        output.writeInt32(15, maxFunctionEvaluations_);
      }
      if (useClamping_ != false) {
        output.writeBool(16, useClamping_);
      }
      if (useDynamicClamping_ != false) {
        output.writeBool(17, useDynamicClamping_);
      }
      if (getClampValueList().size() > 0) {
        output.writeUInt32NoTag(146);
        output.writeUInt32NoTag(clampValueMemoizedSerializedSize);
      }
      for (int i = 0; i < clampValue_.size(); i++) {
        output.writeDoubleNoTag(clampValue_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (fixedPsf_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, fixedPsf_);
      }
      if (disableBackgroundFitting_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, disableBackgroundFitting_);
      }
      if (disableSignalFitting_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, disableSignalFitting_);
      }
      if (fitSolver_ != gdsc.smlm.data.config.FitConfig.FitSolver.LVM_LSE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, fitSolver_);
      }
      if (fixedIterations_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, fixedIterations_);
      }
      if (maxIterations_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, maxIterations_);
      }
      if (relativeThreshold_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, relativeThreshold_);
      }
      if (absoluteThreshold_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, absoluteThreshold_);
      }
      if (parameterRelativeThreshold_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, parameterRelativeThreshold_);
      }
      if (parameterAbsoluteThreshold_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, parameterAbsoluteThreshold_);
      }
      if (lambda_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, lambda_);
      }
      if (searchMethod_ != gdsc.smlm.data.config.FitConfig.SearchMethod.POWELL_BOUNDED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, searchMethod_);
      }
      if (gradientLineMinimisation_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, gradientLineMinimisation_);
      }
      if (modelCamera_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, modelCamera_);
      }
      if (maxFunctionEvaluations_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, maxFunctionEvaluations_);
      }
      if (useClamping_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, useClamping_);
      }
      if (useDynamicClamping_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, useDynamicClamping_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getClampValueList().size();
        size += dataSize;
        if (!getClampValueList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        clampValueMemoizedSerializedSize = dataSize;
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.FitConfig.FitSolverSettings)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.FitConfig.FitSolverSettings other = (gdsc.smlm.data.config.FitConfig.FitSolverSettings) obj;

      boolean result = true;
      result = result && (getFixedPsf()
          == other.getFixedPsf());
      result = result && (getDisableBackgroundFitting()
          == other.getDisableBackgroundFitting());
      result = result && (getDisableSignalFitting()
          == other.getDisableSignalFitting());
      result = result && fitSolver_ == other.fitSolver_;
      result = result && (getFixedIterations()
          == other.getFixedIterations());
      result = result && (getMaxIterations()
          == other.getMaxIterations());
      result = result && (
          java.lang.Double.doubleToLongBits(getRelativeThreshold())
          == java.lang.Double.doubleToLongBits(
              other.getRelativeThreshold()));
      result = result && (
          java.lang.Double.doubleToLongBits(getAbsoluteThreshold())
          == java.lang.Double.doubleToLongBits(
              other.getAbsoluteThreshold()));
      result = result && (
          java.lang.Double.doubleToLongBits(getParameterRelativeThreshold())
          == java.lang.Double.doubleToLongBits(
              other.getParameterRelativeThreshold()));
      result = result && (
          java.lang.Double.doubleToLongBits(getParameterAbsoluteThreshold())
          == java.lang.Double.doubleToLongBits(
              other.getParameterAbsoluteThreshold()));
      result = result && (
          java.lang.Double.doubleToLongBits(getLambda())
          == java.lang.Double.doubleToLongBits(
              other.getLambda()));
      result = result && searchMethod_ == other.searchMethod_;
      result = result && (getGradientLineMinimisation()
          == other.getGradientLineMinimisation());
      result = result && (getModelCamera()
          == other.getModelCamera());
      result = result && (getMaxFunctionEvaluations()
          == other.getMaxFunctionEvaluations());
      result = result && (getUseClamping()
          == other.getUseClamping());
      result = result && (getUseDynamicClamping()
          == other.getUseDynamicClamping());
      result = result && getClampValueList()
          .equals(other.getClampValueList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + FIXED_PSF_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getFixedPsf());
      hash = (37 * hash) + DISABLE_BACKGROUND_FITTING_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDisableBackgroundFitting());
      hash = (37 * hash) + DISABLE_SIGNAL_FITTING_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDisableSignalFitting());
      hash = (37 * hash) + FIT_SOLVER_FIELD_NUMBER;
      hash = (53 * hash) + fitSolver_;
      hash = (37 * hash) + FIXED_ITERATIONS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getFixedIterations());
      hash = (37 * hash) + MAX_ITERATIONS_FIELD_NUMBER;
      hash = (53 * hash) + getMaxIterations();
      hash = (37 * hash) + RELATIVE_THRESHOLD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRelativeThreshold()));
      hash = (37 * hash) + ABSOLUTE_THRESHOLD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getAbsoluteThreshold()));
      hash = (37 * hash) + PARAMETER_RELATIVE_THRESHOLD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getParameterRelativeThreshold()));
      hash = (37 * hash) + PARAMETER_ABSOLUTE_THRESHOLD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getParameterAbsoluteThreshold()));
      hash = (37 * hash) + LAMBDA_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getLambda()));
      hash = (37 * hash) + SEARCH_METHOD_FIELD_NUMBER;
      hash = (53 * hash) + searchMethod_;
      hash = (37 * hash) + GRADIENT_LINE_MINIMISATION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getGradientLineMinimisation());
      hash = (37 * hash) + MODEL_CAMERA_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getModelCamera());
      hash = (37 * hash) + MAX_FUNCTION_EVALUATIONS_FIELD_NUMBER;
      hash = (53 * hash) + getMaxFunctionEvaluations();
      hash = (37 * hash) + USE_CLAMPING_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUseClamping());
      hash = (37 * hash) + USE_DYNAMIC_CLAMPING_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUseDynamicClamping());
      if (getClampValueCount() > 0) {
        hash = (37 * hash) + CLAMP_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getClampValueList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.FitConfig.FitSolverSettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSolverSettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSolverSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSolverSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSolverSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSolverSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSolverSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSolverSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSolverSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSolverSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSolverSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSolverSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.FitConfig.FitSolverSettings prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define settings for the fit solver.
     * </pre>
     *
     * Protobuf type {@code gdsc.smlm.data.config.FitSolverSettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gdsc.smlm.data.config.FitSolverSettings)
        gdsc.smlm.data.config.FitConfig.FitSolverSettingsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitSolverSettings_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitSolverSettings_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.FitConfig.FitSolverSettings.class, gdsc.smlm.data.config.FitConfig.FitSolverSettings.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.FitConfig.FitSolverSettings.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        fixedPsf_ = false;

        disableBackgroundFitting_ = false;

        disableSignalFitting_ = false;

        fitSolver_ = 0;

        fixedIterations_ = false;

        maxIterations_ = 0;

        relativeThreshold_ = 0D;

        absoluteThreshold_ = 0D;

        parameterRelativeThreshold_ = 0D;

        parameterAbsoluteThreshold_ = 0D;

        lambda_ = 0D;

        searchMethod_ = 0;

        gradientLineMinimisation_ = false;

        modelCamera_ = false;

        maxFunctionEvaluations_ = 0;

        useClamping_ = false;

        useDynamicClamping_ = false;

        clampValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitSolverSettings_descriptor;
      }

      public gdsc.smlm.data.config.FitConfig.FitSolverSettings getDefaultInstanceForType() {
        return gdsc.smlm.data.config.FitConfig.FitSolverSettings.getDefaultInstance();
      }

      public gdsc.smlm.data.config.FitConfig.FitSolverSettings build() {
        gdsc.smlm.data.config.FitConfig.FitSolverSettings result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.FitConfig.FitSolverSettings buildPartial() {
        gdsc.smlm.data.config.FitConfig.FitSolverSettings result = new gdsc.smlm.data.config.FitConfig.FitSolverSettings(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.fixedPsf_ = fixedPsf_;
        result.disableBackgroundFitting_ = disableBackgroundFitting_;
        result.disableSignalFitting_ = disableSignalFitting_;
        result.fitSolver_ = fitSolver_;
        result.fixedIterations_ = fixedIterations_;
        result.maxIterations_ = maxIterations_;
        result.relativeThreshold_ = relativeThreshold_;
        result.absoluteThreshold_ = absoluteThreshold_;
        result.parameterRelativeThreshold_ = parameterRelativeThreshold_;
        result.parameterAbsoluteThreshold_ = parameterAbsoluteThreshold_;
        result.lambda_ = lambda_;
        result.searchMethod_ = searchMethod_;
        result.gradientLineMinimisation_ = gradientLineMinimisation_;
        result.modelCamera_ = modelCamera_;
        result.maxFunctionEvaluations_ = maxFunctionEvaluations_;
        result.useClamping_ = useClamping_;
        result.useDynamicClamping_ = useDynamicClamping_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          clampValue_ = java.util.Collections.unmodifiableList(clampValue_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.clampValue_ = clampValue_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.FitConfig.FitSolverSettings) {
          return mergeFrom((gdsc.smlm.data.config.FitConfig.FitSolverSettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.FitConfig.FitSolverSettings other) {
        if (other == gdsc.smlm.data.config.FitConfig.FitSolverSettings.getDefaultInstance()) return this;
        if (other.getFixedPsf() != false) {
          setFixedPsf(other.getFixedPsf());
        }
        if (other.getDisableBackgroundFitting() != false) {
          setDisableBackgroundFitting(other.getDisableBackgroundFitting());
        }
        if (other.getDisableSignalFitting() != false) {
          setDisableSignalFitting(other.getDisableSignalFitting());
        }
        if (other.fitSolver_ != 0) {
          setFitSolverValue(other.getFitSolverValue());
        }
        if (other.getFixedIterations() != false) {
          setFixedIterations(other.getFixedIterations());
        }
        if (other.getMaxIterations() != 0) {
          setMaxIterations(other.getMaxIterations());
        }
        if (other.getRelativeThreshold() != 0D) {
          setRelativeThreshold(other.getRelativeThreshold());
        }
        if (other.getAbsoluteThreshold() != 0D) {
          setAbsoluteThreshold(other.getAbsoluteThreshold());
        }
        if (other.getParameterRelativeThreshold() != 0D) {
          setParameterRelativeThreshold(other.getParameterRelativeThreshold());
        }
        if (other.getParameterAbsoluteThreshold() != 0D) {
          setParameterAbsoluteThreshold(other.getParameterAbsoluteThreshold());
        }
        if (other.getLambda() != 0D) {
          setLambda(other.getLambda());
        }
        if (other.searchMethod_ != 0) {
          setSearchMethodValue(other.getSearchMethodValue());
        }
        if (other.getGradientLineMinimisation() != false) {
          setGradientLineMinimisation(other.getGradientLineMinimisation());
        }
        if (other.getModelCamera() != false) {
          setModelCamera(other.getModelCamera());
        }
        if (other.getMaxFunctionEvaluations() != 0) {
          setMaxFunctionEvaluations(other.getMaxFunctionEvaluations());
        }
        if (other.getUseClamping() != false) {
          setUseClamping(other.getUseClamping());
        }
        if (other.getUseDynamicClamping() != false) {
          setUseDynamicClamping(other.getUseDynamicClamping());
        }
        if (!other.clampValue_.isEmpty()) {
          if (clampValue_.isEmpty()) {
            clampValue_ = other.clampValue_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureClampValueIsMutable();
            clampValue_.addAll(other.clampValue_);
          }
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.FitConfig.FitSolverSettings parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.FitConfig.FitSolverSettings) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean fixedPsf_ ;
      /**
       * <pre>
       * Set to true to fix the PSF using the initial parameters
       * </pre>
       *
       * <code>bool fixed_psf = 1;</code>
       */
      public boolean getFixedPsf() {
        return fixedPsf_;
      }
      /**
       * <pre>
       * Set to true to fix the PSF using the initial parameters
       * </pre>
       *
       * <code>bool fixed_psf = 1;</code>
       */
      public Builder setFixedPsf(boolean value) {
        
        fixedPsf_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true to fix the PSF using the initial parameters
       * </pre>
       *
       * <code>bool fixed_psf = 1;</code>
       */
      public Builder clearFixedPsf() {
        
        fixedPsf_ = false;
        onChanged();
        return this;
      }

      private boolean disableBackgroundFitting_ ;
      /**
       * <pre>
       * Set to true to disable background fitting
       * </pre>
       *
       * <code>bool disable_background_fitting = 2;</code>
       */
      public boolean getDisableBackgroundFitting() {
        return disableBackgroundFitting_;
      }
      /**
       * <pre>
       * Set to true to disable background fitting
       * </pre>
       *
       * <code>bool disable_background_fitting = 2;</code>
       */
      public Builder setDisableBackgroundFitting(boolean value) {
        
        disableBackgroundFitting_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true to disable background fitting
       * </pre>
       *
       * <code>bool disable_background_fitting = 2;</code>
       */
      public Builder clearDisableBackgroundFitting() {
        
        disableBackgroundFitting_ = false;
        onChanged();
        return this;
      }

      private boolean disableSignalFitting_ ;
      /**
       * <pre>
       * Set to true to disable signal intensity fitting
       * </pre>
       *
       * <code>bool disable_signal_fitting = 3;</code>
       */
      public boolean getDisableSignalFitting() {
        return disableSignalFitting_;
      }
      /**
       * <pre>
       * Set to true to disable signal intensity fitting
       * </pre>
       *
       * <code>bool disable_signal_fitting = 3;</code>
       */
      public Builder setDisableSignalFitting(boolean value) {
        
        disableSignalFitting_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true to disable signal intensity fitting
       * </pre>
       *
       * <code>bool disable_signal_fitting = 3;</code>
       */
      public Builder clearDisableSignalFitting() {
        
        disableSignalFitting_ = false;
        onChanged();
        return this;
      }

      private int fitSolver_ = 0;
      /**
       * <pre>
       * The type of fit solver
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolver fit_solver = 4;</code>
       */
      public int getFitSolverValue() {
        return fitSolver_;
      }
      /**
       * <pre>
       * The type of fit solver
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolver fit_solver = 4;</code>
       */
      public Builder setFitSolverValue(int value) {
        fitSolver_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type of fit solver
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolver fit_solver = 4;</code>
       */
      public gdsc.smlm.data.config.FitConfig.FitSolver getFitSolver() {
        gdsc.smlm.data.config.FitConfig.FitSolver result = gdsc.smlm.data.config.FitConfig.FitSolver.valueOf(fitSolver_);
        return result == null ? gdsc.smlm.data.config.FitConfig.FitSolver.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The type of fit solver
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolver fit_solver = 4;</code>
       */
      public Builder setFitSolver(gdsc.smlm.data.config.FitConfig.FitSolver value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        fitSolver_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type of fit solver
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolver fit_solver = 4;</code>
       */
      public Builder clearFitSolver() {
        
        fitSolver_ = 0;
        onChanged();
        return this;
      }

      private boolean fixedIterations_ ;
      /**
       * <pre>
       * Set to true to use a fixed number of iterations during fitting
       * </pre>
       *
       * <code>bool fixed_iterations = 5;</code>
       */
      public boolean getFixedIterations() {
        return fixedIterations_;
      }
      /**
       * <pre>
       * Set to true to use a fixed number of iterations during fitting
       * </pre>
       *
       * <code>bool fixed_iterations = 5;</code>
       */
      public Builder setFixedIterations(boolean value) {
        
        fixedIterations_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true to use a fixed number of iterations during fitting
       * </pre>
       *
       * <code>bool fixed_iterations = 5;</code>
       */
      public Builder clearFixedIterations() {
        
        fixedIterations_ = false;
        onChanged();
        return this;
      }

      private int maxIterations_ ;
      /**
       * <pre>
       * The maximum/fixed iterations to use during fitting. 
       * If not using fixed iterations then fitting will fail if this limit is reached. 
       * </pre>
       *
       * <code>int32 max_iterations = 6;</code>
       */
      public int getMaxIterations() {
        return maxIterations_;
      }
      /**
       * <pre>
       * The maximum/fixed iterations to use during fitting. 
       * If not using fixed iterations then fitting will fail if this limit is reached. 
       * </pre>
       *
       * <code>int32 max_iterations = 6;</code>
       */
      public Builder setMaxIterations(int value) {
        
        maxIterations_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The maximum/fixed iterations to use during fitting. 
       * If not using fixed iterations then fitting will fail if this limit is reached. 
       * </pre>
       *
       * <code>int32 max_iterations = 6;</code>
       */
      public Builder clearMaxIterations() {
        
        maxIterations_ = 0;
        onChanged();
        return this;
      }

      private double relativeThreshold_ ;
      /**
       * <pre>
       * The relative threshold for convergence on the function score. Set to negative to disable.
       * </pre>
       *
       * <code>double relative_threshold = 7;</code>
       */
      public double getRelativeThreshold() {
        return relativeThreshold_;
      }
      /**
       * <pre>
       * The relative threshold for convergence on the function score. Set to negative to disable.
       * </pre>
       *
       * <code>double relative_threshold = 7;</code>
       */
      public Builder setRelativeThreshold(double value) {
        
        relativeThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The relative threshold for convergence on the function score. Set to negative to disable.
       * </pre>
       *
       * <code>double relative_threshold = 7;</code>
       */
      public Builder clearRelativeThreshold() {
        
        relativeThreshold_ = 0D;
        onChanged();
        return this;
      }

      private double absoluteThreshold_ ;
      /**
       * <pre>
       * The absolute threshold for convergence on the function score. Set to negative to disable.
       * </pre>
       *
       * <code>double absolute_threshold = 8;</code>
       */
      public double getAbsoluteThreshold() {
        return absoluteThreshold_;
      }
      /**
       * <pre>
       * The absolute threshold for convergence on the function score. Set to negative to disable.
       * </pre>
       *
       * <code>double absolute_threshold = 8;</code>
       */
      public Builder setAbsoluteThreshold(double value) {
        
        absoluteThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The absolute threshold for convergence on the function score. Set to negative to disable.
       * </pre>
       *
       * <code>double absolute_threshold = 8;</code>
       */
      public Builder clearAbsoluteThreshold() {
        
        absoluteThreshold_ = 0D;
        onChanged();
        return this;
      }

      private double parameterRelativeThreshold_ ;
      /**
       * <pre>
       * The relative threshold for convergence on the function parameters. Set to negative to disable.
       * </pre>
       *
       * <code>double parameter_relative_threshold = 9;</code>
       */
      public double getParameterRelativeThreshold() {
        return parameterRelativeThreshold_;
      }
      /**
       * <pre>
       * The relative threshold for convergence on the function parameters. Set to negative to disable.
       * </pre>
       *
       * <code>double parameter_relative_threshold = 9;</code>
       */
      public Builder setParameterRelativeThreshold(double value) {
        
        parameterRelativeThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The relative threshold for convergence on the function parameters. Set to negative to disable.
       * </pre>
       *
       * <code>double parameter_relative_threshold = 9;</code>
       */
      public Builder clearParameterRelativeThreshold() {
        
        parameterRelativeThreshold_ = 0D;
        onChanged();
        return this;
      }

      private double parameterAbsoluteThreshold_ ;
      /**
       * <pre>
       * The absolute threshold for convergence on the function parameters. Set to negative to disable.
       * </pre>
       *
       * <code>double parameter_absolute_threshold = 10;</code>
       */
      public double getParameterAbsoluteThreshold() {
        return parameterAbsoluteThreshold_;
      }
      /**
       * <pre>
       * The absolute threshold for convergence on the function parameters. Set to negative to disable.
       * </pre>
       *
       * <code>double parameter_absolute_threshold = 10;</code>
       */
      public Builder setParameterAbsoluteThreshold(double value) {
        
        parameterAbsoluteThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The absolute threshold for convergence on the function parameters. Set to negative to disable.
       * </pre>
       *
       * <code>double parameter_absolute_threshold = 10;</code>
       */
      public Builder clearParameterAbsoluteThreshold() {
        
        parameterAbsoluteThreshold_ = 0D;
        onChanged();
        return this;
      }

      private double lambda_ ;
      /**
       * <pre>
       * The initial lambda parameter for the Levenberg-Marquardt algorithm
       * </pre>
       *
       * <code>double lambda = 11;</code>
       */
      public double getLambda() {
        return lambda_;
      }
      /**
       * <pre>
       * The initial lambda parameter for the Levenberg-Marquardt algorithm
       * </pre>
       *
       * <code>double lambda = 11;</code>
       */
      public Builder setLambda(double value) {
        
        lambda_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The initial lambda parameter for the Levenberg-Marquardt algorithm
       * </pre>
       *
       * <code>double lambda = 11;</code>
       */
      public Builder clearLambda() {
        
        lambda_ = 0D;
        onChanged();
        return this;
      }

      private int searchMethod_ = 0;
      /**
       * <pre>
       * The search method to use for the configurable maximum likelihood estimator
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.SearchMethod search_method = 12;</code>
       */
      public int getSearchMethodValue() {
        return searchMethod_;
      }
      /**
       * <pre>
       * The search method to use for the configurable maximum likelihood estimator
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.SearchMethod search_method = 12;</code>
       */
      public Builder setSearchMethodValue(int value) {
        searchMethod_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The search method to use for the configurable maximum likelihood estimator
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.SearchMethod search_method = 12;</code>
       */
      public gdsc.smlm.data.config.FitConfig.SearchMethod getSearchMethod() {
        gdsc.smlm.data.config.FitConfig.SearchMethod result = gdsc.smlm.data.config.FitConfig.SearchMethod.valueOf(searchMethod_);
        return result == null ? gdsc.smlm.data.config.FitConfig.SearchMethod.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The search method to use for the configurable maximum likelihood estimator
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.SearchMethod search_method = 12;</code>
       */
      public Builder setSearchMethod(gdsc.smlm.data.config.FitConfig.SearchMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        searchMethod_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The search method to use for the configurable maximum likelihood estimator
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.SearchMethod search_method = 12;</code>
       */
      public Builder clearSearchMethod() {
        
        searchMethod_ = 0;
        onChanged();
        return this;
      }

      private boolean gradientLineMinimisation_ ;
      /**
       * <pre>
       * Set to true to use the function gradient during line minimisation, i.e. find the 
       * parameters where the gradient is zero. The default is the to minimise the function value.
       * </pre>
       *
       * <code>bool gradient_line_minimisation = 13;</code>
       */
      public boolean getGradientLineMinimisation() {
        return gradientLineMinimisation_;
      }
      /**
       * <pre>
       * Set to true to use the function gradient during line minimisation, i.e. find the 
       * parameters where the gradient is zero. The default is the to minimise the function value.
       * </pre>
       *
       * <code>bool gradient_line_minimisation = 13;</code>
       */
      public Builder setGradientLineMinimisation(boolean value) {
        
        gradientLineMinimisation_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true to use the function gradient during line minimisation, i.e. find the 
       * parameters where the gradient is zero. The default is the to minimise the function value.
       * </pre>
       *
       * <code>bool gradient_line_minimisation = 13;</code>
       */
      public Builder clearGradientLineMinimisation() {
        
        gradientLineMinimisation_ = false;
        onChanged();
        return this;
      }

      private boolean modelCamera_ ;
      /**
       * <pre>
       * Set to true to model the camera noise in the configurable maximum likelihood estimator. 
       * </pre>
       *
       * <code>bool model_camera = 14;</code>
       */
      public boolean getModelCamera() {
        return modelCamera_;
      }
      /**
       * <pre>
       * Set to true to model the camera noise in the configurable maximum likelihood estimator. 
       * </pre>
       *
       * <code>bool model_camera = 14;</code>
       */
      public Builder setModelCamera(boolean value) {
        
        modelCamera_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true to model the camera noise in the configurable maximum likelihood estimator. 
       * </pre>
       *
       * <code>bool model_camera = 14;</code>
       */
      public Builder clearModelCamera() {
        
        modelCamera_ = false;
        onChanged();
        return this;
      }

      private int maxFunctionEvaluations_ ;
      /**
       * <pre>
       * The maximum number of function evaluations in the configurable maximum likelihood estimator.
       * </pre>
       *
       * <code>int32 max_function_evaluations = 15;</code>
       */
      public int getMaxFunctionEvaluations() {
        return maxFunctionEvaluations_;
      }
      /**
       * <pre>
       * The maximum number of function evaluations in the configurable maximum likelihood estimator.
       * </pre>
       *
       * <code>int32 max_function_evaluations = 15;</code>
       */
      public Builder setMaxFunctionEvaluations(int value) {
        
        maxFunctionEvaluations_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The maximum number of function evaluations in the configurable maximum likelihood estimator.
       * </pre>
       *
       * <code>int32 max_function_evaluations = 15;</code>
       */
      public Builder clearMaxFunctionEvaluations() {
        
        maxFunctionEvaluations_ = 0;
        onChanged();
        return this;
      }

      private boolean useClamping_ ;
      /**
       * <pre>
       * Set to true to use parameter clamping
       * </pre>
       *
       * <code>bool use_clamping = 16;</code>
       */
      public boolean getUseClamping() {
        return useClamping_;
      }
      /**
       * <pre>
       * Set to true to use parameter clamping
       * </pre>
       *
       * <code>bool use_clamping = 16;</code>
       */
      public Builder setUseClamping(boolean value) {
        
        useClamping_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true to use parameter clamping
       * </pre>
       *
       * <code>bool use_clamping = 16;</code>
       */
      public Builder clearUseClamping() {
        
        useClamping_ = false;
        onChanged();
        return this;
      }

      private boolean useDynamicClamping_ ;
      /**
       * <pre>
       * Set to true to use dynamic parameter clamping, i.e. update the clamp values when the step direction changes
       * </pre>
       *
       * <code>bool use_dynamic_clamping = 17;</code>
       */
      public boolean getUseDynamicClamping() {
        return useDynamicClamping_;
      }
      /**
       * <pre>
       * Set to true to use dynamic parameter clamping, i.e. update the clamp values when the step direction changes
       * </pre>
       *
       * <code>bool use_dynamic_clamping = 17;</code>
       */
      public Builder setUseDynamicClamping(boolean value) {
        
        useDynamicClamping_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true to use dynamic parameter clamping, i.e. update the clamp values when the step direction changes
       * </pre>
       *
       * <code>bool use_dynamic_clamping = 17;</code>
       */
      public Builder clearUseDynamicClamping() {
        
        useDynamicClamping_ = false;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Double> clampValue_ = java.util.Collections.emptyList();
      private void ensureClampValueIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          clampValue_ = new java.util.ArrayList<java.lang.Double>(clampValue_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <pre>
       * The initial clamp values for each of the PSF parameters.
       * </pre>
       *
       * <code>repeated double clamp_value = 18;</code>
       */
      public java.util.List<java.lang.Double>
          getClampValueList() {
        return java.util.Collections.unmodifiableList(clampValue_);
      }
      /**
       * <pre>
       * The initial clamp values for each of the PSF parameters.
       * </pre>
       *
       * <code>repeated double clamp_value = 18;</code>
       */
      public int getClampValueCount() {
        return clampValue_.size();
      }
      /**
       * <pre>
       * The initial clamp values for each of the PSF parameters.
       * </pre>
       *
       * <code>repeated double clamp_value = 18;</code>
       */
      public double getClampValue(int index) {
        return clampValue_.get(index);
      }
      /**
       * <pre>
       * The initial clamp values for each of the PSF parameters.
       * </pre>
       *
       * <code>repeated double clamp_value = 18;</code>
       */
      public Builder setClampValue(
          int index, double value) {
        ensureClampValueIsMutable();
        clampValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The initial clamp values for each of the PSF parameters.
       * </pre>
       *
       * <code>repeated double clamp_value = 18;</code>
       */
      public Builder addClampValue(double value) {
        ensureClampValueIsMutable();
        clampValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The initial clamp values for each of the PSF parameters.
       * </pre>
       *
       * <code>repeated double clamp_value = 18;</code>
       */
      public Builder addAllClampValue(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureClampValueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, clampValue_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The initial clamp values for each of the PSF parameters.
       * </pre>
       *
       * <code>repeated double clamp_value = 18;</code>
       */
      public Builder clearClampValue() {
        clampValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:gdsc.smlm.data.config.FitSolverSettings)
    }

    // @@protoc_insertion_point(class_scope:gdsc.smlm.data.config.FitSolverSettings)
    private static final gdsc.smlm.data.config.FitConfig.FitSolverSettings DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.FitConfig.FitSolverSettings();
    }

    public static gdsc.smlm.data.config.FitConfig.FitSolverSettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FitSolverSettings>
        PARSER = new com.google.protobuf.AbstractParser<FitSolverSettings>() {
      public FitSolverSettings parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FitSolverSettings(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FitSolverSettings> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FitSolverSettings> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.FitConfig.FitSolverSettings getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FilterSettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gdsc.smlm.data.config.FilterSettings)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The maximum amount a localisation can move from the initial estimate relative to the PSF width
     * </pre>
     *
     * <code>double shift_factor = 1;</code>
     */
    double getShiftFactor();

    /**
     * <pre>
     * The minimum Signal-to-Noise (SNR) threshold
     * </pre>
     *
     * <code>double signal_strength = 2;</code>
     */
    double getSignalStrength();

    /**
     * <pre>
     * The minimum number of photons threshold
     * </pre>
     *
     * <code>double min_photons = 3;</code>
     */
    double getMinPhotons();

    /**
     * <pre>
     * The maximum allowed localisation precision (expressed as the localisation standard deviation)
     * </pre>
     *
     * <code>double precision_threshold = 4;</code>
     */
    double getPrecisionThreshold();

    /**
     * <pre>
     * Set to true to compute the precision using the local background. The default uses a noise estimate for the entire frame.
     * </pre>
     *
     * <code>bool precision_using_background = 5;</code>
     */
    boolean getPrecisionUsingBackground();

    /**
     * <pre>
     * The minimum allowed width relative to the initial width estimate
     * </pre>
     *
     * <code>double min_width_factor = 6;</code>
     */
    double getMinWidthFactor();

    /**
     * <pre>
     * The maximum allowed width relative to the initial width estimate
     * </pre>
     *
     * <code>double max_width_factor = 7;</code>
     */
    double getMaxWidthFactor();

    /**
     * <pre>
     * Set to true to disable the use of simple filters
     * </pre>
     *
     * <code>bool disable_simple_filter = 8;</code>
     */
    boolean getDisableSimpleFilter();

    /**
     * <pre>
     * Set to true to use a smart filter
     * </pre>
     *
     * <code>bool smart_filter = 9;</code>
     */
    boolean getSmartFilter();

    /**
     * <pre>
     * The smart filter expressed as a serialised string
     * </pre>
     *
     * <code>string smart_filter_string = 10;</code>
     */
    java.lang.String getSmartFilterString();
    /**
     * <pre>
     * The smart filter expressed as a serialised string
     * </pre>
     *
     * <code>string smart_filter_string = 10;</code>
     */
    com.google.protobuf.ByteString
        getSmartFilterStringBytes();
  }
  /**
   * <pre>
   * Define the settings for filtering fit results.
   * </pre>
   *
   * Protobuf type {@code gdsc.smlm.data.config.FilterSettings}
   */
  public  static final class FilterSettings extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gdsc.smlm.data.config.FilterSettings)
      FilterSettingsOrBuilder {
    // Use FilterSettings.newBuilder() to construct.
    private FilterSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FilterSettings() {
      shiftFactor_ = 0D;
      signalStrength_ = 0D;
      minPhotons_ = 0D;
      precisionThreshold_ = 0D;
      precisionUsingBackground_ = false;
      minWidthFactor_ = 0D;
      maxWidthFactor_ = 0D;
      disableSimpleFilter_ = false;
      smartFilter_ = false;
      smartFilterString_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private FilterSettings(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 9: {

              shiftFactor_ = input.readDouble();
              break;
            }
            case 17: {

              signalStrength_ = input.readDouble();
              break;
            }
            case 25: {

              minPhotons_ = input.readDouble();
              break;
            }
            case 33: {

              precisionThreshold_ = input.readDouble();
              break;
            }
            case 40: {

              precisionUsingBackground_ = input.readBool();
              break;
            }
            case 49: {

              minWidthFactor_ = input.readDouble();
              break;
            }
            case 57: {

              maxWidthFactor_ = input.readDouble();
              break;
            }
            case 64: {

              disableSimpleFilter_ = input.readBool();
              break;
            }
            case 72: {

              smartFilter_ = input.readBool();
              break;
            }
            case 82: {
              java.lang.String s = input.readStringRequireUtf8();

              smartFilterString_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FilterSettings_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FilterSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.FitConfig.FilterSettings.class, gdsc.smlm.data.config.FitConfig.FilterSettings.Builder.class);
    }

    public static final int SHIFT_FACTOR_FIELD_NUMBER = 1;
    private double shiftFactor_;
    /**
     * <pre>
     * The maximum amount a localisation can move from the initial estimate relative to the PSF width
     * </pre>
     *
     * <code>double shift_factor = 1;</code>
     */
    public double getShiftFactor() {
      return shiftFactor_;
    }

    public static final int SIGNAL_STRENGTH_FIELD_NUMBER = 2;
    private double signalStrength_;
    /**
     * <pre>
     * The minimum Signal-to-Noise (SNR) threshold
     * </pre>
     *
     * <code>double signal_strength = 2;</code>
     */
    public double getSignalStrength() {
      return signalStrength_;
    }

    public static final int MIN_PHOTONS_FIELD_NUMBER = 3;
    private double minPhotons_;
    /**
     * <pre>
     * The minimum number of photons threshold
     * </pre>
     *
     * <code>double min_photons = 3;</code>
     */
    public double getMinPhotons() {
      return minPhotons_;
    }

    public static final int PRECISION_THRESHOLD_FIELD_NUMBER = 4;
    private double precisionThreshold_;
    /**
     * <pre>
     * The maximum allowed localisation precision (expressed as the localisation standard deviation)
     * </pre>
     *
     * <code>double precision_threshold = 4;</code>
     */
    public double getPrecisionThreshold() {
      return precisionThreshold_;
    }

    public static final int PRECISION_USING_BACKGROUND_FIELD_NUMBER = 5;
    private boolean precisionUsingBackground_;
    /**
     * <pre>
     * Set to true to compute the precision using the local background. The default uses a noise estimate for the entire frame.
     * </pre>
     *
     * <code>bool precision_using_background = 5;</code>
     */
    public boolean getPrecisionUsingBackground() {
      return precisionUsingBackground_;
    }

    public static final int MIN_WIDTH_FACTOR_FIELD_NUMBER = 6;
    private double minWidthFactor_;
    /**
     * <pre>
     * The minimum allowed width relative to the initial width estimate
     * </pre>
     *
     * <code>double min_width_factor = 6;</code>
     */
    public double getMinWidthFactor() {
      return minWidthFactor_;
    }

    public static final int MAX_WIDTH_FACTOR_FIELD_NUMBER = 7;
    private double maxWidthFactor_;
    /**
     * <pre>
     * The maximum allowed width relative to the initial width estimate
     * </pre>
     *
     * <code>double max_width_factor = 7;</code>
     */
    public double getMaxWidthFactor() {
      return maxWidthFactor_;
    }

    public static final int DISABLE_SIMPLE_FILTER_FIELD_NUMBER = 8;
    private boolean disableSimpleFilter_;
    /**
     * <pre>
     * Set to true to disable the use of simple filters
     * </pre>
     *
     * <code>bool disable_simple_filter = 8;</code>
     */
    public boolean getDisableSimpleFilter() {
      return disableSimpleFilter_;
    }

    public static final int SMART_FILTER_FIELD_NUMBER = 9;
    private boolean smartFilter_;
    /**
     * <pre>
     * Set to true to use a smart filter
     * </pre>
     *
     * <code>bool smart_filter = 9;</code>
     */
    public boolean getSmartFilter() {
      return smartFilter_;
    }

    public static final int SMART_FILTER_STRING_FIELD_NUMBER = 10;
    private volatile java.lang.Object smartFilterString_;
    /**
     * <pre>
     * The smart filter expressed as a serialised string
     * </pre>
     *
     * <code>string smart_filter_string = 10;</code>
     */
    public java.lang.String getSmartFilterString() {
      java.lang.Object ref = smartFilterString_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        smartFilterString_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The smart filter expressed as a serialised string
     * </pre>
     *
     * <code>string smart_filter_string = 10;</code>
     */
    public com.google.protobuf.ByteString
        getSmartFilterStringBytes() {
      java.lang.Object ref = smartFilterString_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        smartFilterString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (shiftFactor_ != 0D) {
        output.writeDouble(1, shiftFactor_);
      }
      if (signalStrength_ != 0D) {
        output.writeDouble(2, signalStrength_);
      }
      if (minPhotons_ != 0D) {
        output.writeDouble(3, minPhotons_);
      }
      if (precisionThreshold_ != 0D) {
        output.writeDouble(4, precisionThreshold_);
      }
      if (precisionUsingBackground_ != false) {
        output.writeBool(5, precisionUsingBackground_);
      }
      if (minWidthFactor_ != 0D) {
        output.writeDouble(6, minWidthFactor_);
      }
      if (maxWidthFactor_ != 0D) {
        output.writeDouble(7, maxWidthFactor_);
      }
      if (disableSimpleFilter_ != false) {
        output.writeBool(8, disableSimpleFilter_);
      }
      if (smartFilter_ != false) {
        output.writeBool(9, smartFilter_);
      }
      if (!getSmartFilterStringBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 10, smartFilterString_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (shiftFactor_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, shiftFactor_);
      }
      if (signalStrength_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, signalStrength_);
      }
      if (minPhotons_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, minPhotons_);
      }
      if (precisionThreshold_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, precisionThreshold_);
      }
      if (precisionUsingBackground_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, precisionUsingBackground_);
      }
      if (minWidthFactor_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, minWidthFactor_);
      }
      if (maxWidthFactor_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, maxWidthFactor_);
      }
      if (disableSimpleFilter_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, disableSimpleFilter_);
      }
      if (smartFilter_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, smartFilter_);
      }
      if (!getSmartFilterStringBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, smartFilterString_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.FitConfig.FilterSettings)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.FitConfig.FilterSettings other = (gdsc.smlm.data.config.FitConfig.FilterSettings) obj;

      boolean result = true;
      result = result && (
          java.lang.Double.doubleToLongBits(getShiftFactor())
          == java.lang.Double.doubleToLongBits(
              other.getShiftFactor()));
      result = result && (
          java.lang.Double.doubleToLongBits(getSignalStrength())
          == java.lang.Double.doubleToLongBits(
              other.getSignalStrength()));
      result = result && (
          java.lang.Double.doubleToLongBits(getMinPhotons())
          == java.lang.Double.doubleToLongBits(
              other.getMinPhotons()));
      result = result && (
          java.lang.Double.doubleToLongBits(getPrecisionThreshold())
          == java.lang.Double.doubleToLongBits(
              other.getPrecisionThreshold()));
      result = result && (getPrecisionUsingBackground()
          == other.getPrecisionUsingBackground());
      result = result && (
          java.lang.Double.doubleToLongBits(getMinWidthFactor())
          == java.lang.Double.doubleToLongBits(
              other.getMinWidthFactor()));
      result = result && (
          java.lang.Double.doubleToLongBits(getMaxWidthFactor())
          == java.lang.Double.doubleToLongBits(
              other.getMaxWidthFactor()));
      result = result && (getDisableSimpleFilter()
          == other.getDisableSimpleFilter());
      result = result && (getSmartFilter()
          == other.getSmartFilter());
      result = result && getSmartFilterString()
          .equals(other.getSmartFilterString());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SHIFT_FACTOR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getShiftFactor()));
      hash = (37 * hash) + SIGNAL_STRENGTH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getSignalStrength()));
      hash = (37 * hash) + MIN_PHOTONS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMinPhotons()));
      hash = (37 * hash) + PRECISION_THRESHOLD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPrecisionThreshold()));
      hash = (37 * hash) + PRECISION_USING_BACKGROUND_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getPrecisionUsingBackground());
      hash = (37 * hash) + MIN_WIDTH_FACTOR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMinWidthFactor()));
      hash = (37 * hash) + MAX_WIDTH_FACTOR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMaxWidthFactor()));
      hash = (37 * hash) + DISABLE_SIMPLE_FILTER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDisableSimpleFilter());
      hash = (37 * hash) + SMART_FILTER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getSmartFilter());
      hash = (37 * hash) + SMART_FILTER_STRING_FIELD_NUMBER;
      hash = (53 * hash) + getSmartFilterString().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.FitConfig.FilterSettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.FilterSettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FilterSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.FilterSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FilterSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.FilterSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FilterSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.FilterSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FilterSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.FilterSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FilterSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.FilterSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.FitConfig.FilterSettings prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the settings for filtering fit results.
     * </pre>
     *
     * Protobuf type {@code gdsc.smlm.data.config.FilterSettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gdsc.smlm.data.config.FilterSettings)
        gdsc.smlm.data.config.FitConfig.FilterSettingsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FilterSettings_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FilterSettings_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.FitConfig.FilterSettings.class, gdsc.smlm.data.config.FitConfig.FilterSettings.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.FitConfig.FilterSettings.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        shiftFactor_ = 0D;

        signalStrength_ = 0D;

        minPhotons_ = 0D;

        precisionThreshold_ = 0D;

        precisionUsingBackground_ = false;

        minWidthFactor_ = 0D;

        maxWidthFactor_ = 0D;

        disableSimpleFilter_ = false;

        smartFilter_ = false;

        smartFilterString_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FilterSettings_descriptor;
      }

      public gdsc.smlm.data.config.FitConfig.FilterSettings getDefaultInstanceForType() {
        return gdsc.smlm.data.config.FitConfig.FilterSettings.getDefaultInstance();
      }

      public gdsc.smlm.data.config.FitConfig.FilterSettings build() {
        gdsc.smlm.data.config.FitConfig.FilterSettings result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.FitConfig.FilterSettings buildPartial() {
        gdsc.smlm.data.config.FitConfig.FilterSettings result = new gdsc.smlm.data.config.FitConfig.FilterSettings(this);
        result.shiftFactor_ = shiftFactor_;
        result.signalStrength_ = signalStrength_;
        result.minPhotons_ = minPhotons_;
        result.precisionThreshold_ = precisionThreshold_;
        result.precisionUsingBackground_ = precisionUsingBackground_;
        result.minWidthFactor_ = minWidthFactor_;
        result.maxWidthFactor_ = maxWidthFactor_;
        result.disableSimpleFilter_ = disableSimpleFilter_;
        result.smartFilter_ = smartFilter_;
        result.smartFilterString_ = smartFilterString_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.FitConfig.FilterSettings) {
          return mergeFrom((gdsc.smlm.data.config.FitConfig.FilterSettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.FitConfig.FilterSettings other) {
        if (other == gdsc.smlm.data.config.FitConfig.FilterSettings.getDefaultInstance()) return this;
        if (other.getShiftFactor() != 0D) {
          setShiftFactor(other.getShiftFactor());
        }
        if (other.getSignalStrength() != 0D) {
          setSignalStrength(other.getSignalStrength());
        }
        if (other.getMinPhotons() != 0D) {
          setMinPhotons(other.getMinPhotons());
        }
        if (other.getPrecisionThreshold() != 0D) {
          setPrecisionThreshold(other.getPrecisionThreshold());
        }
        if (other.getPrecisionUsingBackground() != false) {
          setPrecisionUsingBackground(other.getPrecisionUsingBackground());
        }
        if (other.getMinWidthFactor() != 0D) {
          setMinWidthFactor(other.getMinWidthFactor());
        }
        if (other.getMaxWidthFactor() != 0D) {
          setMaxWidthFactor(other.getMaxWidthFactor());
        }
        if (other.getDisableSimpleFilter() != false) {
          setDisableSimpleFilter(other.getDisableSimpleFilter());
        }
        if (other.getSmartFilter() != false) {
          setSmartFilter(other.getSmartFilter());
        }
        if (!other.getSmartFilterString().isEmpty()) {
          smartFilterString_ = other.smartFilterString_;
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.FitConfig.FilterSettings parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.FitConfig.FilterSettings) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double shiftFactor_ ;
      /**
       * <pre>
       * The maximum amount a localisation can move from the initial estimate relative to the PSF width
       * </pre>
       *
       * <code>double shift_factor = 1;</code>
       */
      public double getShiftFactor() {
        return shiftFactor_;
      }
      /**
       * <pre>
       * The maximum amount a localisation can move from the initial estimate relative to the PSF width
       * </pre>
       *
       * <code>double shift_factor = 1;</code>
       */
      public Builder setShiftFactor(double value) {
        
        shiftFactor_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The maximum amount a localisation can move from the initial estimate relative to the PSF width
       * </pre>
       *
       * <code>double shift_factor = 1;</code>
       */
      public Builder clearShiftFactor() {
        
        shiftFactor_ = 0D;
        onChanged();
        return this;
      }

      private double signalStrength_ ;
      /**
       * <pre>
       * The minimum Signal-to-Noise (SNR) threshold
       * </pre>
       *
       * <code>double signal_strength = 2;</code>
       */
      public double getSignalStrength() {
        return signalStrength_;
      }
      /**
       * <pre>
       * The minimum Signal-to-Noise (SNR) threshold
       * </pre>
       *
       * <code>double signal_strength = 2;</code>
       */
      public Builder setSignalStrength(double value) {
        
        signalStrength_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The minimum Signal-to-Noise (SNR) threshold
       * </pre>
       *
       * <code>double signal_strength = 2;</code>
       */
      public Builder clearSignalStrength() {
        
        signalStrength_ = 0D;
        onChanged();
        return this;
      }

      private double minPhotons_ ;
      /**
       * <pre>
       * The minimum number of photons threshold
       * </pre>
       *
       * <code>double min_photons = 3;</code>
       */
      public double getMinPhotons() {
        return minPhotons_;
      }
      /**
       * <pre>
       * The minimum number of photons threshold
       * </pre>
       *
       * <code>double min_photons = 3;</code>
       */
      public Builder setMinPhotons(double value) {
        
        minPhotons_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The minimum number of photons threshold
       * </pre>
       *
       * <code>double min_photons = 3;</code>
       */
      public Builder clearMinPhotons() {
        
        minPhotons_ = 0D;
        onChanged();
        return this;
      }

      private double precisionThreshold_ ;
      /**
       * <pre>
       * The maximum allowed localisation precision (expressed as the localisation standard deviation)
       * </pre>
       *
       * <code>double precision_threshold = 4;</code>
       */
      public double getPrecisionThreshold() {
        return precisionThreshold_;
      }
      /**
       * <pre>
       * The maximum allowed localisation precision (expressed as the localisation standard deviation)
       * </pre>
       *
       * <code>double precision_threshold = 4;</code>
       */
      public Builder setPrecisionThreshold(double value) {
        
        precisionThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The maximum allowed localisation precision (expressed as the localisation standard deviation)
       * </pre>
       *
       * <code>double precision_threshold = 4;</code>
       */
      public Builder clearPrecisionThreshold() {
        
        precisionThreshold_ = 0D;
        onChanged();
        return this;
      }

      private boolean precisionUsingBackground_ ;
      /**
       * <pre>
       * Set to true to compute the precision using the local background. The default uses a noise estimate for the entire frame.
       * </pre>
       *
       * <code>bool precision_using_background = 5;</code>
       */
      public boolean getPrecisionUsingBackground() {
        return precisionUsingBackground_;
      }
      /**
       * <pre>
       * Set to true to compute the precision using the local background. The default uses a noise estimate for the entire frame.
       * </pre>
       *
       * <code>bool precision_using_background = 5;</code>
       */
      public Builder setPrecisionUsingBackground(boolean value) {
        
        precisionUsingBackground_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true to compute the precision using the local background. The default uses a noise estimate for the entire frame.
       * </pre>
       *
       * <code>bool precision_using_background = 5;</code>
       */
      public Builder clearPrecisionUsingBackground() {
        
        precisionUsingBackground_ = false;
        onChanged();
        return this;
      }

      private double minWidthFactor_ ;
      /**
       * <pre>
       * The minimum allowed width relative to the initial width estimate
       * </pre>
       *
       * <code>double min_width_factor = 6;</code>
       */
      public double getMinWidthFactor() {
        return minWidthFactor_;
      }
      /**
       * <pre>
       * The minimum allowed width relative to the initial width estimate
       * </pre>
       *
       * <code>double min_width_factor = 6;</code>
       */
      public Builder setMinWidthFactor(double value) {
        
        minWidthFactor_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The minimum allowed width relative to the initial width estimate
       * </pre>
       *
       * <code>double min_width_factor = 6;</code>
       */
      public Builder clearMinWidthFactor() {
        
        minWidthFactor_ = 0D;
        onChanged();
        return this;
      }

      private double maxWidthFactor_ ;
      /**
       * <pre>
       * The maximum allowed width relative to the initial width estimate
       * </pre>
       *
       * <code>double max_width_factor = 7;</code>
       */
      public double getMaxWidthFactor() {
        return maxWidthFactor_;
      }
      /**
       * <pre>
       * The maximum allowed width relative to the initial width estimate
       * </pre>
       *
       * <code>double max_width_factor = 7;</code>
       */
      public Builder setMaxWidthFactor(double value) {
        
        maxWidthFactor_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The maximum allowed width relative to the initial width estimate
       * </pre>
       *
       * <code>double max_width_factor = 7;</code>
       */
      public Builder clearMaxWidthFactor() {
        
        maxWidthFactor_ = 0D;
        onChanged();
        return this;
      }

      private boolean disableSimpleFilter_ ;
      /**
       * <pre>
       * Set to true to disable the use of simple filters
       * </pre>
       *
       * <code>bool disable_simple_filter = 8;</code>
       */
      public boolean getDisableSimpleFilter() {
        return disableSimpleFilter_;
      }
      /**
       * <pre>
       * Set to true to disable the use of simple filters
       * </pre>
       *
       * <code>bool disable_simple_filter = 8;</code>
       */
      public Builder setDisableSimpleFilter(boolean value) {
        
        disableSimpleFilter_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true to disable the use of simple filters
       * </pre>
       *
       * <code>bool disable_simple_filter = 8;</code>
       */
      public Builder clearDisableSimpleFilter() {
        
        disableSimpleFilter_ = false;
        onChanged();
        return this;
      }

      private boolean smartFilter_ ;
      /**
       * <pre>
       * Set to true to use a smart filter
       * </pre>
       *
       * <code>bool smart_filter = 9;</code>
       */
      public boolean getSmartFilter() {
        return smartFilter_;
      }
      /**
       * <pre>
       * Set to true to use a smart filter
       * </pre>
       *
       * <code>bool smart_filter = 9;</code>
       */
      public Builder setSmartFilter(boolean value) {
        
        smartFilter_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true to use a smart filter
       * </pre>
       *
       * <code>bool smart_filter = 9;</code>
       */
      public Builder clearSmartFilter() {
        
        smartFilter_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object smartFilterString_ = "";
      /**
       * <pre>
       * The smart filter expressed as a serialised string
       * </pre>
       *
       * <code>string smart_filter_string = 10;</code>
       */
      public java.lang.String getSmartFilterString() {
        java.lang.Object ref = smartFilterString_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          smartFilterString_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The smart filter expressed as a serialised string
       * </pre>
       *
       * <code>string smart_filter_string = 10;</code>
       */
      public com.google.protobuf.ByteString
          getSmartFilterStringBytes() {
        java.lang.Object ref = smartFilterString_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          smartFilterString_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The smart filter expressed as a serialised string
       * </pre>
       *
       * <code>string smart_filter_string = 10;</code>
       */
      public Builder setSmartFilterString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        smartFilterString_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The smart filter expressed as a serialised string
       * </pre>
       *
       * <code>string smart_filter_string = 10;</code>
       */
      public Builder clearSmartFilterString() {
        
        smartFilterString_ = getDefaultInstance().getSmartFilterString();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The smart filter expressed as a serialised string
       * </pre>
       *
       * <code>string smart_filter_string = 10;</code>
       */
      public Builder setSmartFilterStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        smartFilterString_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:gdsc.smlm.data.config.FilterSettings)
    }

    // @@protoc_insertion_point(class_scope:gdsc.smlm.data.config.FilterSettings)
    private static final gdsc.smlm.data.config.FitConfig.FilterSettings DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.FitConfig.FilterSettings();
    }

    public static gdsc.smlm.data.config.FitConfig.FilterSettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FilterSettings>
        PARSER = new com.google.protobuf.AbstractParser<FilterSettings>() {
      public FilterSettings parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FilterSettings(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FilterSettings> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FilterSettings> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.FitConfig.FilterSettings getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FitSettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gdsc.smlm.data.config.FitSettings)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The calibration of the input data
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
     */
    boolean hasCalibration();
    /**
     * <pre>
     * The calibration of the input data
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
     */
    gdsc.smlm.data.config.CalibrationConfig.Calibration getCalibration();
    /**
     * <pre>
     * The calibration of the input data
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
     */
    gdsc.smlm.data.config.CalibrationConfig.CalibrationOrBuilder getCalibrationOrBuilder();

    /**
     * <pre>
     * The point spread function (PSF)
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
     */
    boolean hasPsf();
    /**
     * <pre>
     * The point spread function (PSF)
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
     */
    gdsc.smlm.data.config.PSFConfig.PSF getPsf();
    /**
     * <pre>
     * The point spread function (PSF)
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
     */
    gdsc.smlm.data.config.PSFConfig.PSFOrBuilder getPsfOrBuilder();

    /**
     * <pre>
     * The fit solver settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
     */
    boolean hasFitSolverSettings();
    /**
     * <pre>
     * The fit solver settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
     */
    gdsc.smlm.data.config.FitConfig.FitSolverSettings getFitSolverSettings();
    /**
     * <pre>
     * The fit solver settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
     */
    gdsc.smlm.data.config.FitConfig.FitSolverSettingsOrBuilder getFitSolverSettingsOrBuilder();

    /**
     * <pre>
     * The filter settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
     */
    boolean hasFilterSettings();
    /**
     * <pre>
     * The filter settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
     */
    gdsc.smlm.data.config.FitConfig.FilterSettings getFilterSettings();
    /**
     * <pre>
     * The filter settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
     */
    gdsc.smlm.data.config.FitConfig.FilterSettingsOrBuilder getFilterSettingsOrBuilder();
  }
  /**
   * <pre>
   * Define the settings for fitting. These settings are used to fit a PSF to an 
   * extracted region from the input data and validate the fit.
   * </pre>
   *
   * Protobuf type {@code gdsc.smlm.data.config.FitSettings}
   */
  public  static final class FitSettings extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gdsc.smlm.data.config.FitSettings)
      FitSettingsOrBuilder {
    // Use FitSettings.newBuilder() to construct.
    private FitSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FitSettings() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private FitSettings(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              gdsc.smlm.data.config.CalibrationConfig.Calibration.Builder subBuilder = null;
              if (calibration_ != null) {
                subBuilder = calibration_.toBuilder();
              }
              calibration_ = input.readMessage(gdsc.smlm.data.config.CalibrationConfig.Calibration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(calibration_);
                calibration_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              gdsc.smlm.data.config.PSFConfig.PSF.Builder subBuilder = null;
              if (psf_ != null) {
                subBuilder = psf_.toBuilder();
              }
              psf_ = input.readMessage(gdsc.smlm.data.config.PSFConfig.PSF.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(psf_);
                psf_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              gdsc.smlm.data.config.FitConfig.FitSolverSettings.Builder subBuilder = null;
              if (fitSolverSettings_ != null) {
                subBuilder = fitSolverSettings_.toBuilder();
              }
              fitSolverSettings_ = input.readMessage(gdsc.smlm.data.config.FitConfig.FitSolverSettings.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fitSolverSettings_);
                fitSolverSettings_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              gdsc.smlm.data.config.FitConfig.FilterSettings.Builder subBuilder = null;
              if (filterSettings_ != null) {
                subBuilder = filterSettings_.toBuilder();
              }
              filterSettings_ = input.readMessage(gdsc.smlm.data.config.FitConfig.FilterSettings.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filterSettings_);
                filterSettings_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitSettings_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.FitConfig.FitSettings.class, gdsc.smlm.data.config.FitConfig.FitSettings.Builder.class);
    }

    public static final int CALIBRATION_FIELD_NUMBER = 1;
    private gdsc.smlm.data.config.CalibrationConfig.Calibration calibration_;
    /**
     * <pre>
     * The calibration of the input data
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
     */
    public boolean hasCalibration() {
      return calibration_ != null;
    }
    /**
     * <pre>
     * The calibration of the input data
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
     */
    public gdsc.smlm.data.config.CalibrationConfig.Calibration getCalibration() {
      return calibration_ == null ? gdsc.smlm.data.config.CalibrationConfig.Calibration.getDefaultInstance() : calibration_;
    }
    /**
     * <pre>
     * The calibration of the input data
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
     */
    public gdsc.smlm.data.config.CalibrationConfig.CalibrationOrBuilder getCalibrationOrBuilder() {
      return getCalibration();
    }

    public static final int PSF_FIELD_NUMBER = 2;
    private gdsc.smlm.data.config.PSFConfig.PSF psf_;
    /**
     * <pre>
     * The point spread function (PSF)
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
     */
    public boolean hasPsf() {
      return psf_ != null;
    }
    /**
     * <pre>
     * The point spread function (PSF)
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
     */
    public gdsc.smlm.data.config.PSFConfig.PSF getPsf() {
      return psf_ == null ? gdsc.smlm.data.config.PSFConfig.PSF.getDefaultInstance() : psf_;
    }
    /**
     * <pre>
     * The point spread function (PSF)
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
     */
    public gdsc.smlm.data.config.PSFConfig.PSFOrBuilder getPsfOrBuilder() {
      return getPsf();
    }

    public static final int FIT_SOLVER_SETTINGS_FIELD_NUMBER = 3;
    private gdsc.smlm.data.config.FitConfig.FitSolverSettings fitSolverSettings_;
    /**
     * <pre>
     * The fit solver settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
     */
    public boolean hasFitSolverSettings() {
      return fitSolverSettings_ != null;
    }
    /**
     * <pre>
     * The fit solver settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
     */
    public gdsc.smlm.data.config.FitConfig.FitSolverSettings getFitSolverSettings() {
      return fitSolverSettings_ == null ? gdsc.smlm.data.config.FitConfig.FitSolverSettings.getDefaultInstance() : fitSolverSettings_;
    }
    /**
     * <pre>
     * The fit solver settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
     */
    public gdsc.smlm.data.config.FitConfig.FitSolverSettingsOrBuilder getFitSolverSettingsOrBuilder() {
      return getFitSolverSettings();
    }

    public static final int FILTER_SETTINGS_FIELD_NUMBER = 4;
    private gdsc.smlm.data.config.FitConfig.FilterSettings filterSettings_;
    /**
     * <pre>
     * The filter settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
     */
    public boolean hasFilterSettings() {
      return filterSettings_ != null;
    }
    /**
     * <pre>
     * The filter settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
     */
    public gdsc.smlm.data.config.FitConfig.FilterSettings getFilterSettings() {
      return filterSettings_ == null ? gdsc.smlm.data.config.FitConfig.FilterSettings.getDefaultInstance() : filterSettings_;
    }
    /**
     * <pre>
     * The filter settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
     */
    public gdsc.smlm.data.config.FitConfig.FilterSettingsOrBuilder getFilterSettingsOrBuilder() {
      return getFilterSettings();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (calibration_ != null) {
        output.writeMessage(1, getCalibration());
      }
      if (psf_ != null) {
        output.writeMessage(2, getPsf());
      }
      if (fitSolverSettings_ != null) {
        output.writeMessage(3, getFitSolverSettings());
      }
      if (filterSettings_ != null) {
        output.writeMessage(4, getFilterSettings());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (calibration_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCalibration());
      }
      if (psf_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getPsf());
      }
      if (fitSolverSettings_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getFitSolverSettings());
      }
      if (filterSettings_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getFilterSettings());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.FitConfig.FitSettings)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.FitConfig.FitSettings other = (gdsc.smlm.data.config.FitConfig.FitSettings) obj;

      boolean result = true;
      result = result && (hasCalibration() == other.hasCalibration());
      if (hasCalibration()) {
        result = result && getCalibration()
            .equals(other.getCalibration());
      }
      result = result && (hasPsf() == other.hasPsf());
      if (hasPsf()) {
        result = result && getPsf()
            .equals(other.getPsf());
      }
      result = result && (hasFitSolverSettings() == other.hasFitSolverSettings());
      if (hasFitSolverSettings()) {
        result = result && getFitSolverSettings()
            .equals(other.getFitSolverSettings());
      }
      result = result && (hasFilterSettings() == other.hasFilterSettings());
      if (hasFilterSettings()) {
        result = result && getFilterSettings()
            .equals(other.getFilterSettings());
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCalibration()) {
        hash = (37 * hash) + CALIBRATION_FIELD_NUMBER;
        hash = (53 * hash) + getCalibration().hashCode();
      }
      if (hasPsf()) {
        hash = (37 * hash) + PSF_FIELD_NUMBER;
        hash = (53 * hash) + getPsf().hashCode();
      }
      if (hasFitSolverSettings()) {
        hash = (37 * hash) + FIT_SOLVER_SETTINGS_FIELD_NUMBER;
        hash = (53 * hash) + getFitSolverSettings().hashCode();
      }
      if (hasFilterSettings()) {
        hash = (37 * hash) + FILTER_SETTINGS_FIELD_NUMBER;
        hash = (53 * hash) + getFilterSettings().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.FitConfig.FitSettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.FitSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.FitConfig.FitSettings prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the settings for fitting. These settings are used to fit a PSF to an 
     * extracted region from the input data and validate the fit.
     * </pre>
     *
     * Protobuf type {@code gdsc.smlm.data.config.FitSettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gdsc.smlm.data.config.FitSettings)
        gdsc.smlm.data.config.FitConfig.FitSettingsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitSettings_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitSettings_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.FitConfig.FitSettings.class, gdsc.smlm.data.config.FitConfig.FitSettings.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.FitConfig.FitSettings.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (calibrationBuilder_ == null) {
          calibration_ = null;
        } else {
          calibration_ = null;
          calibrationBuilder_ = null;
        }
        if (psfBuilder_ == null) {
          psf_ = null;
        } else {
          psf_ = null;
          psfBuilder_ = null;
        }
        if (fitSolverSettingsBuilder_ == null) {
          fitSolverSettings_ = null;
        } else {
          fitSolverSettings_ = null;
          fitSolverSettingsBuilder_ = null;
        }
        if (filterSettingsBuilder_ == null) {
          filterSettings_ = null;
        } else {
          filterSettings_ = null;
          filterSettingsBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitSettings_descriptor;
      }

      public gdsc.smlm.data.config.FitConfig.FitSettings getDefaultInstanceForType() {
        return gdsc.smlm.data.config.FitConfig.FitSettings.getDefaultInstance();
      }

      public gdsc.smlm.data.config.FitConfig.FitSettings build() {
        gdsc.smlm.data.config.FitConfig.FitSettings result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.FitConfig.FitSettings buildPartial() {
        gdsc.smlm.data.config.FitConfig.FitSettings result = new gdsc.smlm.data.config.FitConfig.FitSettings(this);
        if (calibrationBuilder_ == null) {
          result.calibration_ = calibration_;
        } else {
          result.calibration_ = calibrationBuilder_.build();
        }
        if (psfBuilder_ == null) {
          result.psf_ = psf_;
        } else {
          result.psf_ = psfBuilder_.build();
        }
        if (fitSolverSettingsBuilder_ == null) {
          result.fitSolverSettings_ = fitSolverSettings_;
        } else {
          result.fitSolverSettings_ = fitSolverSettingsBuilder_.build();
        }
        if (filterSettingsBuilder_ == null) {
          result.filterSettings_ = filterSettings_;
        } else {
          result.filterSettings_ = filterSettingsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.FitConfig.FitSettings) {
          return mergeFrom((gdsc.smlm.data.config.FitConfig.FitSettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.FitConfig.FitSettings other) {
        if (other == gdsc.smlm.data.config.FitConfig.FitSettings.getDefaultInstance()) return this;
        if (other.hasCalibration()) {
          mergeCalibration(other.getCalibration());
        }
        if (other.hasPsf()) {
          mergePsf(other.getPsf());
        }
        if (other.hasFitSolverSettings()) {
          mergeFitSolverSettings(other.getFitSolverSettings());
        }
        if (other.hasFilterSettings()) {
          mergeFilterSettings(other.getFilterSettings());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.FitConfig.FitSettings parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.FitConfig.FitSettings) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private gdsc.smlm.data.config.CalibrationConfig.Calibration calibration_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.CalibrationConfig.Calibration, gdsc.smlm.data.config.CalibrationConfig.Calibration.Builder, gdsc.smlm.data.config.CalibrationConfig.CalibrationOrBuilder> calibrationBuilder_;
      /**
       * <pre>
       * The calibration of the input data
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
       */
      public boolean hasCalibration() {
        return calibrationBuilder_ != null || calibration_ != null;
      }
      /**
       * <pre>
       * The calibration of the input data
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
       */
      public gdsc.smlm.data.config.CalibrationConfig.Calibration getCalibration() {
        if (calibrationBuilder_ == null) {
          return calibration_ == null ? gdsc.smlm.data.config.CalibrationConfig.Calibration.getDefaultInstance() : calibration_;
        } else {
          return calibrationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The calibration of the input data
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
       */
      public Builder setCalibration(gdsc.smlm.data.config.CalibrationConfig.Calibration value) {
        if (calibrationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          calibration_ = value;
          onChanged();
        } else {
          calibrationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The calibration of the input data
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
       */
      public Builder setCalibration(
          gdsc.smlm.data.config.CalibrationConfig.Calibration.Builder builderForValue) {
        if (calibrationBuilder_ == null) {
          calibration_ = builderForValue.build();
          onChanged();
        } else {
          calibrationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The calibration of the input data
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
       */
      public Builder mergeCalibration(gdsc.smlm.data.config.CalibrationConfig.Calibration value) {
        if (calibrationBuilder_ == null) {
          if (calibration_ != null) {
            calibration_ =
              gdsc.smlm.data.config.CalibrationConfig.Calibration.newBuilder(calibration_).mergeFrom(value).buildPartial();
          } else {
            calibration_ = value;
          }
          onChanged();
        } else {
          calibrationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The calibration of the input data
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
       */
      public Builder clearCalibration() {
        if (calibrationBuilder_ == null) {
          calibration_ = null;
          onChanged();
        } else {
          calibration_ = null;
          calibrationBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The calibration of the input data
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
       */
      public gdsc.smlm.data.config.CalibrationConfig.Calibration.Builder getCalibrationBuilder() {
        
        onChanged();
        return getCalibrationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The calibration of the input data
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
       */
      public gdsc.smlm.data.config.CalibrationConfig.CalibrationOrBuilder getCalibrationOrBuilder() {
        if (calibrationBuilder_ != null) {
          return calibrationBuilder_.getMessageOrBuilder();
        } else {
          return calibration_ == null ?
              gdsc.smlm.data.config.CalibrationConfig.Calibration.getDefaultInstance() : calibration_;
        }
      }
      /**
       * <pre>
       * The calibration of the input data
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.Calibration calibration = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.CalibrationConfig.Calibration, gdsc.smlm.data.config.CalibrationConfig.Calibration.Builder, gdsc.smlm.data.config.CalibrationConfig.CalibrationOrBuilder> 
          getCalibrationFieldBuilder() {
        if (calibrationBuilder_ == null) {
          calibrationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.CalibrationConfig.Calibration, gdsc.smlm.data.config.CalibrationConfig.Calibration.Builder, gdsc.smlm.data.config.CalibrationConfig.CalibrationOrBuilder>(
                  getCalibration(),
                  getParentForChildren(),
                  isClean());
          calibration_ = null;
        }
        return calibrationBuilder_;
      }

      private gdsc.smlm.data.config.PSFConfig.PSF psf_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.PSFConfig.PSF, gdsc.smlm.data.config.PSFConfig.PSF.Builder, gdsc.smlm.data.config.PSFConfig.PSFOrBuilder> psfBuilder_;
      /**
       * <pre>
       * The point spread function (PSF)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
       */
      public boolean hasPsf() {
        return psfBuilder_ != null || psf_ != null;
      }
      /**
       * <pre>
       * The point spread function (PSF)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
       */
      public gdsc.smlm.data.config.PSFConfig.PSF getPsf() {
        if (psfBuilder_ == null) {
          return psf_ == null ? gdsc.smlm.data.config.PSFConfig.PSF.getDefaultInstance() : psf_;
        } else {
          return psfBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The point spread function (PSF)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
       */
      public Builder setPsf(gdsc.smlm.data.config.PSFConfig.PSF value) {
        if (psfBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          psf_ = value;
          onChanged();
        } else {
          psfBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The point spread function (PSF)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
       */
      public Builder setPsf(
          gdsc.smlm.data.config.PSFConfig.PSF.Builder builderForValue) {
        if (psfBuilder_ == null) {
          psf_ = builderForValue.build();
          onChanged();
        } else {
          psfBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The point spread function (PSF)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
       */
      public Builder mergePsf(gdsc.smlm.data.config.PSFConfig.PSF value) {
        if (psfBuilder_ == null) {
          if (psf_ != null) {
            psf_ =
              gdsc.smlm.data.config.PSFConfig.PSF.newBuilder(psf_).mergeFrom(value).buildPartial();
          } else {
            psf_ = value;
          }
          onChanged();
        } else {
          psfBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The point spread function (PSF)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
       */
      public Builder clearPsf() {
        if (psfBuilder_ == null) {
          psf_ = null;
          onChanged();
        } else {
          psf_ = null;
          psfBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The point spread function (PSF)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
       */
      public gdsc.smlm.data.config.PSFConfig.PSF.Builder getPsfBuilder() {
        
        onChanged();
        return getPsfFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The point spread function (PSF)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
       */
      public gdsc.smlm.data.config.PSFConfig.PSFOrBuilder getPsfOrBuilder() {
        if (psfBuilder_ != null) {
          return psfBuilder_.getMessageOrBuilder();
        } else {
          return psf_ == null ?
              gdsc.smlm.data.config.PSFConfig.PSF.getDefaultInstance() : psf_;
        }
      }
      /**
       * <pre>
       * The point spread function (PSF)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSF psf = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.PSFConfig.PSF, gdsc.smlm.data.config.PSFConfig.PSF.Builder, gdsc.smlm.data.config.PSFConfig.PSFOrBuilder> 
          getPsfFieldBuilder() {
        if (psfBuilder_ == null) {
          psfBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.PSFConfig.PSF, gdsc.smlm.data.config.PSFConfig.PSF.Builder, gdsc.smlm.data.config.PSFConfig.PSFOrBuilder>(
                  getPsf(),
                  getParentForChildren(),
                  isClean());
          psf_ = null;
        }
        return psfBuilder_;
      }

      private gdsc.smlm.data.config.FitConfig.FitSolverSettings fitSolverSettings_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.FitSolverSettings, gdsc.smlm.data.config.FitConfig.FitSolverSettings.Builder, gdsc.smlm.data.config.FitConfig.FitSolverSettingsOrBuilder> fitSolverSettingsBuilder_;
      /**
       * <pre>
       * The fit solver settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
       */
      public boolean hasFitSolverSettings() {
        return fitSolverSettingsBuilder_ != null || fitSolverSettings_ != null;
      }
      /**
       * <pre>
       * The fit solver settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
       */
      public gdsc.smlm.data.config.FitConfig.FitSolverSettings getFitSolverSettings() {
        if (fitSolverSettingsBuilder_ == null) {
          return fitSolverSettings_ == null ? gdsc.smlm.data.config.FitConfig.FitSolverSettings.getDefaultInstance() : fitSolverSettings_;
        } else {
          return fitSolverSettingsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The fit solver settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
       */
      public Builder setFitSolverSettings(gdsc.smlm.data.config.FitConfig.FitSolverSettings value) {
        if (fitSolverSettingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fitSolverSettings_ = value;
          onChanged();
        } else {
          fitSolverSettingsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The fit solver settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
       */
      public Builder setFitSolverSettings(
          gdsc.smlm.data.config.FitConfig.FitSolverSettings.Builder builderForValue) {
        if (fitSolverSettingsBuilder_ == null) {
          fitSolverSettings_ = builderForValue.build();
          onChanged();
        } else {
          fitSolverSettingsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The fit solver settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
       */
      public Builder mergeFitSolverSettings(gdsc.smlm.data.config.FitConfig.FitSolverSettings value) {
        if (fitSolverSettingsBuilder_ == null) {
          if (fitSolverSettings_ != null) {
            fitSolverSettings_ =
              gdsc.smlm.data.config.FitConfig.FitSolverSettings.newBuilder(fitSolverSettings_).mergeFrom(value).buildPartial();
          } else {
            fitSolverSettings_ = value;
          }
          onChanged();
        } else {
          fitSolverSettingsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The fit solver settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
       */
      public Builder clearFitSolverSettings() {
        if (fitSolverSettingsBuilder_ == null) {
          fitSolverSettings_ = null;
          onChanged();
        } else {
          fitSolverSettings_ = null;
          fitSolverSettingsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The fit solver settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
       */
      public gdsc.smlm.data.config.FitConfig.FitSolverSettings.Builder getFitSolverSettingsBuilder() {
        
        onChanged();
        return getFitSolverSettingsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The fit solver settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
       */
      public gdsc.smlm.data.config.FitConfig.FitSolverSettingsOrBuilder getFitSolverSettingsOrBuilder() {
        if (fitSolverSettingsBuilder_ != null) {
          return fitSolverSettingsBuilder_.getMessageOrBuilder();
        } else {
          return fitSolverSettings_ == null ?
              gdsc.smlm.data.config.FitConfig.FitSolverSettings.getDefaultInstance() : fitSolverSettings_;
        }
      }
      /**
       * <pre>
       * The fit solver settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSolverSettings fit_solver_settings = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.FitSolverSettings, gdsc.smlm.data.config.FitConfig.FitSolverSettings.Builder, gdsc.smlm.data.config.FitConfig.FitSolverSettingsOrBuilder> 
          getFitSolverSettingsFieldBuilder() {
        if (fitSolverSettingsBuilder_ == null) {
          fitSolverSettingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.FitConfig.FitSolverSettings, gdsc.smlm.data.config.FitConfig.FitSolverSettings.Builder, gdsc.smlm.data.config.FitConfig.FitSolverSettingsOrBuilder>(
                  getFitSolverSettings(),
                  getParentForChildren(),
                  isClean());
          fitSolverSettings_ = null;
        }
        return fitSolverSettingsBuilder_;
      }

      private gdsc.smlm.data.config.FitConfig.FilterSettings filterSettings_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.FilterSettings, gdsc.smlm.data.config.FitConfig.FilterSettings.Builder, gdsc.smlm.data.config.FitConfig.FilterSettingsOrBuilder> filterSettingsBuilder_;
      /**
       * <pre>
       * The filter settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
       */
      public boolean hasFilterSettings() {
        return filterSettingsBuilder_ != null || filterSettings_ != null;
      }
      /**
       * <pre>
       * The filter settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
       */
      public gdsc.smlm.data.config.FitConfig.FilterSettings getFilterSettings() {
        if (filterSettingsBuilder_ == null) {
          return filterSettings_ == null ? gdsc.smlm.data.config.FitConfig.FilterSettings.getDefaultInstance() : filterSettings_;
        } else {
          return filterSettingsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The filter settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
       */
      public Builder setFilterSettings(gdsc.smlm.data.config.FitConfig.FilterSettings value) {
        if (filterSettingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filterSettings_ = value;
          onChanged();
        } else {
          filterSettingsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The filter settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
       */
      public Builder setFilterSettings(
          gdsc.smlm.data.config.FitConfig.FilterSettings.Builder builderForValue) {
        if (filterSettingsBuilder_ == null) {
          filterSettings_ = builderForValue.build();
          onChanged();
        } else {
          filterSettingsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The filter settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
       */
      public Builder mergeFilterSettings(gdsc.smlm.data.config.FitConfig.FilterSettings value) {
        if (filterSettingsBuilder_ == null) {
          if (filterSettings_ != null) {
            filterSettings_ =
              gdsc.smlm.data.config.FitConfig.FilterSettings.newBuilder(filterSettings_).mergeFrom(value).buildPartial();
          } else {
            filterSettings_ = value;
          }
          onChanged();
        } else {
          filterSettingsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The filter settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
       */
      public Builder clearFilterSettings() {
        if (filterSettingsBuilder_ == null) {
          filterSettings_ = null;
          onChanged();
        } else {
          filterSettings_ = null;
          filterSettingsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The filter settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
       */
      public gdsc.smlm.data.config.FitConfig.FilterSettings.Builder getFilterSettingsBuilder() {
        
        onChanged();
        return getFilterSettingsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The filter settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
       */
      public gdsc.smlm.data.config.FitConfig.FilterSettingsOrBuilder getFilterSettingsOrBuilder() {
        if (filterSettingsBuilder_ != null) {
          return filterSettingsBuilder_.getMessageOrBuilder();
        } else {
          return filterSettings_ == null ?
              gdsc.smlm.data.config.FitConfig.FilterSettings.getDefaultInstance() : filterSettings_;
        }
      }
      /**
       * <pre>
       * The filter settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FilterSettings filter_settings = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.FilterSettings, gdsc.smlm.data.config.FitConfig.FilterSettings.Builder, gdsc.smlm.data.config.FitConfig.FilterSettingsOrBuilder> 
          getFilterSettingsFieldBuilder() {
        if (filterSettingsBuilder_ == null) {
          filterSettingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.FitConfig.FilterSettings, gdsc.smlm.data.config.FitConfig.FilterSettings.Builder, gdsc.smlm.data.config.FitConfig.FilterSettingsOrBuilder>(
                  getFilterSettings(),
                  getParentForChildren(),
                  isClean());
          filterSettings_ = null;
        }
        return filterSettingsBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:gdsc.smlm.data.config.FitSettings)
    }

    // @@protoc_insertion_point(class_scope:gdsc.smlm.data.config.FitSettings)
    private static final gdsc.smlm.data.config.FitConfig.FitSettings DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.FitConfig.FitSettings();
    }

    public static gdsc.smlm.data.config.FitConfig.FitSettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FitSettings>
        PARSER = new com.google.protobuf.AbstractParser<FitSettings>() {
      public FitSettings parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FitSettings(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FitSettings> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FitSettings> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.FitConfig.FitSettings getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RelativeParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gdsc.smlm.data.config.RelativeParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The value of the parameter
     * </pre>
     *
     * <code>double value = 1;</code>
     */
    double getValue();

    /**
     * <pre>
     * Set to true to use the absolute value. The default is relative to the PSF width. 
     * </pre>
     *
     * <code>bool absolute = 2;</code>
     */
    boolean getAbsolute();
  }
  /**
   * <pre>
   * Define a parameter used during fitting that can be absolute of relative to the PSF width
   * </pre>
   *
   * Protobuf type {@code gdsc.smlm.data.config.RelativeParameter}
   */
  public  static final class RelativeParameter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gdsc.smlm.data.config.RelativeParameter)
      RelativeParameterOrBuilder {
    // Use RelativeParameter.newBuilder() to construct.
    private RelativeParameter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RelativeParameter() {
      value_ = 0D;
      absolute_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private RelativeParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 9: {

              value_ = input.readDouble();
              break;
            }
            case 16: {

              absolute_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_RelativeParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_RelativeParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.FitConfig.RelativeParameter.class, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder.class);
    }

    public static final int VALUE_FIELD_NUMBER = 1;
    private double value_;
    /**
     * <pre>
     * The value of the parameter
     * </pre>
     *
     * <code>double value = 1;</code>
     */
    public double getValue() {
      return value_;
    }

    public static final int ABSOLUTE_FIELD_NUMBER = 2;
    private boolean absolute_;
    /**
     * <pre>
     * Set to true to use the absolute value. The default is relative to the PSF width. 
     * </pre>
     *
     * <code>bool absolute = 2;</code>
     */
    public boolean getAbsolute() {
      return absolute_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (value_ != 0D) {
        output.writeDouble(1, value_);
      }
      if (absolute_ != false) {
        output.writeBool(2, absolute_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (value_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, value_);
      }
      if (absolute_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, absolute_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.FitConfig.RelativeParameter)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.FitConfig.RelativeParameter other = (gdsc.smlm.data.config.FitConfig.RelativeParameter) obj;

      boolean result = true;
      result = result && (
          java.lang.Double.doubleToLongBits(getValue())
          == java.lang.Double.doubleToLongBits(
              other.getValue()));
      result = result && (getAbsolute()
          == other.getAbsolute());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getValue()));
      hash = (37 * hash) + ABSOLUTE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getAbsolute());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.FitConfig.RelativeParameter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.RelativeParameter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.RelativeParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.RelativeParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.RelativeParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.RelativeParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.RelativeParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.RelativeParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.RelativeParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.RelativeParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.RelativeParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.RelativeParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.FitConfig.RelativeParameter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define a parameter used during fitting that can be absolute of relative to the PSF width
     * </pre>
     *
     * Protobuf type {@code gdsc.smlm.data.config.RelativeParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gdsc.smlm.data.config.RelativeParameter)
        gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_RelativeParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_RelativeParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.FitConfig.RelativeParameter.class, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.FitConfig.RelativeParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        value_ = 0D;

        absolute_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_RelativeParameter_descriptor;
      }

      public gdsc.smlm.data.config.FitConfig.RelativeParameter getDefaultInstanceForType() {
        return gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance();
      }

      public gdsc.smlm.data.config.FitConfig.RelativeParameter build() {
        gdsc.smlm.data.config.FitConfig.RelativeParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.FitConfig.RelativeParameter buildPartial() {
        gdsc.smlm.data.config.FitConfig.RelativeParameter result = new gdsc.smlm.data.config.FitConfig.RelativeParameter(this);
        result.value_ = value_;
        result.absolute_ = absolute_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.FitConfig.RelativeParameter) {
          return mergeFrom((gdsc.smlm.data.config.FitConfig.RelativeParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.FitConfig.RelativeParameter other) {
        if (other == gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance()) return this;
        if (other.getValue() != 0D) {
          setValue(other.getValue());
        }
        if (other.getAbsolute() != false) {
          setAbsolute(other.getAbsolute());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.FitConfig.RelativeParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.FitConfig.RelativeParameter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double value_ ;
      /**
       * <pre>
       * The value of the parameter
       * </pre>
       *
       * <code>double value = 1;</code>
       */
      public double getValue() {
        return value_;
      }
      /**
       * <pre>
       * The value of the parameter
       * </pre>
       *
       * <code>double value = 1;</code>
       */
      public Builder setValue(double value) {
        
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The value of the parameter
       * </pre>
       *
       * <code>double value = 1;</code>
       */
      public Builder clearValue() {
        
        value_ = 0D;
        onChanged();
        return this;
      }

      private boolean absolute_ ;
      /**
       * <pre>
       * Set to true to use the absolute value. The default is relative to the PSF width. 
       * </pre>
       *
       * <code>bool absolute = 2;</code>
       */
      public boolean getAbsolute() {
        return absolute_;
      }
      /**
       * <pre>
       * Set to true to use the absolute value. The default is relative to the PSF width. 
       * </pre>
       *
       * <code>bool absolute = 2;</code>
       */
      public Builder setAbsolute(boolean value) {
        
        absolute_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true to use the absolute value. The default is relative to the PSF width. 
       * </pre>
       *
       * <code>bool absolute = 2;</code>
       */
      public Builder clearAbsolute() {
        
        absolute_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:gdsc.smlm.data.config.RelativeParameter)
    }

    // @@protoc_insertion_point(class_scope:gdsc.smlm.data.config.RelativeParameter)
    private static final gdsc.smlm.data.config.FitConfig.RelativeParameter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.FitConfig.RelativeParameter();
    }

    public static gdsc.smlm.data.config.FitConfig.RelativeParameter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RelativeParameter>
        PARSER = new com.google.protobuf.AbstractParser<RelativeParameter>() {
      public RelativeParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new RelativeParameter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RelativeParameter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RelativeParameter> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.FitConfig.RelativeParameter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DataFilterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gdsc.smlm.data.config.DataFilter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The method used by the data filter
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterMethod data_filter_method = 1;</code>
     */
    int getDataFilterMethodValue();
    /**
     * <pre>
     * The method used by the data filter
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterMethod data_filter_method = 1;</code>
     */
    gdsc.smlm.data.config.FitConfig.DataFilterMethod getDataFilterMethod();

    /**
     * <pre>
     * Any parameters used by the data filter. These can be in pixels
     * or relative to the PSF width.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
     */
    java.util.List<gdsc.smlm.data.config.FitConfig.RelativeParameter> 
        getParameterList();
    /**
     * <pre>
     * Any parameters used by the data filter. These can be in pixels
     * or relative to the PSF width.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
     */
    gdsc.smlm.data.config.FitConfig.RelativeParameter getParameter(int index);
    /**
     * <pre>
     * Any parameters used by the data filter. These can be in pixels
     * or relative to the PSF width.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
     */
    int getParameterCount();
    /**
     * <pre>
     * Any parameters used by the data filter. These can be in pixels
     * or relative to the PSF width.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
     */
    java.util.List<? extends gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder> 
        getParameterOrBuilderList();
    /**
     * <pre>
     * Any parameters used by the data filter. These can be in pixels
     * or relative to the PSF width.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
     */
    gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getParameterOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Define a data filter
   * </pre>
   *
   * Protobuf type {@code gdsc.smlm.data.config.DataFilter}
   */
  public  static final class DataFilter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gdsc.smlm.data.config.DataFilter)
      DataFilterOrBuilder {
    // Use DataFilter.newBuilder() to construct.
    private DataFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DataFilter() {
      dataFilterMethod_ = 0;
      parameter_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private DataFilter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              dataFilterMethod_ = rawValue;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                parameter_ = new java.util.ArrayList<gdsc.smlm.data.config.FitConfig.RelativeParameter>();
                mutable_bitField0_ |= 0x00000002;
              }
              parameter_.add(
                  input.readMessage(gdsc.smlm.data.config.FitConfig.RelativeParameter.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          parameter_ = java.util.Collections.unmodifiableList(parameter_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_DataFilter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_DataFilter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.FitConfig.DataFilter.class, gdsc.smlm.data.config.FitConfig.DataFilter.Builder.class);
    }

    private int bitField0_;
    public static final int DATA_FILTER_METHOD_FIELD_NUMBER = 1;
    private int dataFilterMethod_;
    /**
     * <pre>
     * The method used by the data filter
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterMethod data_filter_method = 1;</code>
     */
    public int getDataFilterMethodValue() {
      return dataFilterMethod_;
    }
    /**
     * <pre>
     * The method used by the data filter
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterMethod data_filter_method = 1;</code>
     */
    public gdsc.smlm.data.config.FitConfig.DataFilterMethod getDataFilterMethod() {
      gdsc.smlm.data.config.FitConfig.DataFilterMethod result = gdsc.smlm.data.config.FitConfig.DataFilterMethod.valueOf(dataFilterMethod_);
      return result == null ? gdsc.smlm.data.config.FitConfig.DataFilterMethod.UNRECOGNIZED : result;
    }

    public static final int PARAMETER_FIELD_NUMBER = 2;
    private java.util.List<gdsc.smlm.data.config.FitConfig.RelativeParameter> parameter_;
    /**
     * <pre>
     * Any parameters used by the data filter. These can be in pixels
     * or relative to the PSF width.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
     */
    public java.util.List<gdsc.smlm.data.config.FitConfig.RelativeParameter> getParameterList() {
      return parameter_;
    }
    /**
     * <pre>
     * Any parameters used by the data filter. These can be in pixels
     * or relative to the PSF width.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
     */
    public java.util.List<? extends gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder> 
        getParameterOrBuilderList() {
      return parameter_;
    }
    /**
     * <pre>
     * Any parameters used by the data filter. These can be in pixels
     * or relative to the PSF width.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
     */
    public int getParameterCount() {
      return parameter_.size();
    }
    /**
     * <pre>
     * Any parameters used by the data filter. These can be in pixels
     * or relative to the PSF width.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
     */
    public gdsc.smlm.data.config.FitConfig.RelativeParameter getParameter(int index) {
      return parameter_.get(index);
    }
    /**
     * <pre>
     * Any parameters used by the data filter. These can be in pixels
     * or relative to the PSF width.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
     */
    public gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getParameterOrBuilder(
        int index) {
      return parameter_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (dataFilterMethod_ != gdsc.smlm.data.config.FitConfig.DataFilterMethod.MEAN.getNumber()) {
        output.writeEnum(1, dataFilterMethod_);
      }
      for (int i = 0; i < parameter_.size(); i++) {
        output.writeMessage(2, parameter_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (dataFilterMethod_ != gdsc.smlm.data.config.FitConfig.DataFilterMethod.MEAN.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, dataFilterMethod_);
      }
      for (int i = 0; i < parameter_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, parameter_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.FitConfig.DataFilter)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.FitConfig.DataFilter other = (gdsc.smlm.data.config.FitConfig.DataFilter) obj;

      boolean result = true;
      result = result && dataFilterMethod_ == other.dataFilterMethod_;
      result = result && getParameterList()
          .equals(other.getParameterList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DATA_FILTER_METHOD_FIELD_NUMBER;
      hash = (53 * hash) + dataFilterMethod_;
      if (getParameterCount() > 0) {
        hash = (37 * hash) + PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getParameterList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.FitConfig.DataFilter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.FitConfig.DataFilter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define a data filter
     * </pre>
     *
     * Protobuf type {@code gdsc.smlm.data.config.DataFilter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gdsc.smlm.data.config.DataFilter)
        gdsc.smlm.data.config.FitConfig.DataFilterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_DataFilter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_DataFilter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.FitConfig.DataFilter.class, gdsc.smlm.data.config.FitConfig.DataFilter.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.FitConfig.DataFilter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getParameterFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        dataFilterMethod_ = 0;

        if (parameterBuilder_ == null) {
          parameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          parameterBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_DataFilter_descriptor;
      }

      public gdsc.smlm.data.config.FitConfig.DataFilter getDefaultInstanceForType() {
        return gdsc.smlm.data.config.FitConfig.DataFilter.getDefaultInstance();
      }

      public gdsc.smlm.data.config.FitConfig.DataFilter build() {
        gdsc.smlm.data.config.FitConfig.DataFilter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.FitConfig.DataFilter buildPartial() {
        gdsc.smlm.data.config.FitConfig.DataFilter result = new gdsc.smlm.data.config.FitConfig.DataFilter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.dataFilterMethod_ = dataFilterMethod_;
        if (parameterBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            parameter_ = java.util.Collections.unmodifiableList(parameter_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.parameter_ = parameter_;
        } else {
          result.parameter_ = parameterBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.FitConfig.DataFilter) {
          return mergeFrom((gdsc.smlm.data.config.FitConfig.DataFilter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.FitConfig.DataFilter other) {
        if (other == gdsc.smlm.data.config.FitConfig.DataFilter.getDefaultInstance()) return this;
        if (other.dataFilterMethod_ != 0) {
          setDataFilterMethodValue(other.getDataFilterMethodValue());
        }
        if (parameterBuilder_ == null) {
          if (!other.parameter_.isEmpty()) {
            if (parameter_.isEmpty()) {
              parameter_ = other.parameter_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureParameterIsMutable();
              parameter_.addAll(other.parameter_);
            }
            onChanged();
          }
        } else {
          if (!other.parameter_.isEmpty()) {
            if (parameterBuilder_.isEmpty()) {
              parameterBuilder_.dispose();
              parameterBuilder_ = null;
              parameter_ = other.parameter_;
              bitField0_ = (bitField0_ & ~0x00000002);
              parameterBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getParameterFieldBuilder() : null;
            } else {
              parameterBuilder_.addAllMessages(other.parameter_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.FitConfig.DataFilter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.FitConfig.DataFilter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int dataFilterMethod_ = 0;
      /**
       * <pre>
       * The method used by the data filter
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterMethod data_filter_method = 1;</code>
       */
      public int getDataFilterMethodValue() {
        return dataFilterMethod_;
      }
      /**
       * <pre>
       * The method used by the data filter
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterMethod data_filter_method = 1;</code>
       */
      public Builder setDataFilterMethodValue(int value) {
        dataFilterMethod_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The method used by the data filter
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterMethod data_filter_method = 1;</code>
       */
      public gdsc.smlm.data.config.FitConfig.DataFilterMethod getDataFilterMethod() {
        gdsc.smlm.data.config.FitConfig.DataFilterMethod result = gdsc.smlm.data.config.FitConfig.DataFilterMethod.valueOf(dataFilterMethod_);
        return result == null ? gdsc.smlm.data.config.FitConfig.DataFilterMethod.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The method used by the data filter
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterMethod data_filter_method = 1;</code>
       */
      public Builder setDataFilterMethod(gdsc.smlm.data.config.FitConfig.DataFilterMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        dataFilterMethod_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The method used by the data filter
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterMethod data_filter_method = 1;</code>
       */
      public Builder clearDataFilterMethod() {
        
        dataFilterMethod_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<gdsc.smlm.data.config.FitConfig.RelativeParameter> parameter_ =
        java.util.Collections.emptyList();
      private void ensureParameterIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          parameter_ = new java.util.ArrayList<gdsc.smlm.data.config.FitConfig.RelativeParameter>(parameter_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder> parameterBuilder_;

      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public java.util.List<gdsc.smlm.data.config.FitConfig.RelativeParameter> getParameterList() {
        if (parameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(parameter_);
        } else {
          return parameterBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public int getParameterCount() {
        if (parameterBuilder_ == null) {
          return parameter_.size();
        } else {
          return parameterBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameter getParameter(int index) {
        if (parameterBuilder_ == null) {
          return parameter_.get(index);
        } else {
          return parameterBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public Builder setParameter(
          int index, gdsc.smlm.data.config.FitConfig.RelativeParameter value) {
        if (parameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParameterIsMutable();
          parameter_.set(index, value);
          onChanged();
        } else {
          parameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public Builder setParameter(
          int index, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder builderForValue) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          parameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public Builder addParameter(gdsc.smlm.data.config.FitConfig.RelativeParameter value) {
        if (parameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParameterIsMutable();
          parameter_.add(value);
          onChanged();
        } else {
          parameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public Builder addParameter(
          int index, gdsc.smlm.data.config.FitConfig.RelativeParameter value) {
        if (parameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParameterIsMutable();
          parameter_.add(index, value);
          onChanged();
        } else {
          parameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public Builder addParameter(
          gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder builderForValue) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.add(builderForValue.build());
          onChanged();
        } else {
          parameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public Builder addParameter(
          int index, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder builderForValue) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          parameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public Builder addAllParameter(
          java.lang.Iterable<? extends gdsc.smlm.data.config.FitConfig.RelativeParameter> values) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, parameter_);
          onChanged();
        } else {
          parameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public Builder clearParameter() {
        if (parameterBuilder_ == null) {
          parameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          parameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public Builder removeParameter(int index) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.remove(index);
          onChanged();
        } else {
          parameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder getParameterBuilder(
          int index) {
        return getParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getParameterOrBuilder(
          int index) {
        if (parameterBuilder_ == null) {
          return parameter_.get(index);  } else {
          return parameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public java.util.List<? extends gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder> 
           getParameterOrBuilderList() {
        if (parameterBuilder_ != null) {
          return parameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(parameter_);
        }
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder addParameterBuilder() {
        return getParameterFieldBuilder().addBuilder(
            gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance());
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder addParameterBuilder(
          int index) {
        return getParameterFieldBuilder().addBuilder(
            index, gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance());
      }
      /**
       * <pre>
       * Any parameters used by the data filter. These can be in pixels
       * or relative to the PSF width.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.RelativeParameter parameter = 2;</code>
       */
      public java.util.List<gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder> 
           getParameterBuilderList() {
        return getParameterFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder> 
          getParameterFieldBuilder() {
        if (parameterBuilder_ == null) {
          parameterBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder>(
                  parameter_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          parameter_ = null;
        }
        return parameterBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:gdsc.smlm.data.config.DataFilter)
    }

    // @@protoc_insertion_point(class_scope:gdsc.smlm.data.config.DataFilter)
    private static final gdsc.smlm.data.config.FitConfig.DataFilter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.FitConfig.DataFilter();
    }

    public static gdsc.smlm.data.config.FitConfig.DataFilter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DataFilter>
        PARSER = new com.google.protobuf.AbstractParser<DataFilter>() {
      public DataFilter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DataFilter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DataFilter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DataFilter> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.FitConfig.DataFilter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DataFilterSettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gdsc.smlm.data.config.DataFilterSettings)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The type of data filter
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterType data_filter_type = 1;</code>
     */
    int getDataFilterTypeValue();
    /**
     * <pre>
     * The type of data filter
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterType data_filter_type = 1;</code>
     */
    gdsc.smlm.data.config.FitConfig.DataFilterType getDataFilterType();

    /**
     * <pre>
     * The data filter
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
     */
    java.util.List<gdsc.smlm.data.config.FitConfig.DataFilter> 
        getDataFilterList();
    /**
     * <pre>
     * The data filter
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
     */
    gdsc.smlm.data.config.FitConfig.DataFilter getDataFilter(int index);
    /**
     * <pre>
     * The data filter
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
     */
    int getDataFilterCount();
    /**
     * <pre>
     * The data filter
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
     */
    java.util.List<? extends gdsc.smlm.data.config.FitConfig.DataFilterOrBuilder> 
        getDataFilterOrBuilderList();
    /**
     * <pre>
     * The data filter
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
     */
    gdsc.smlm.data.config.FitConfig.DataFilterOrBuilder getDataFilterOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Define the settings for filtering data to identify candidates.
   * </pre>
   *
   * Protobuf type {@code gdsc.smlm.data.config.DataFilterSettings}
   */
  public  static final class DataFilterSettings extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gdsc.smlm.data.config.DataFilterSettings)
      DataFilterSettingsOrBuilder {
    // Use DataFilterSettings.newBuilder() to construct.
    private DataFilterSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DataFilterSettings() {
      dataFilterType_ = 0;
      dataFilter_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private DataFilterSettings(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              dataFilterType_ = rawValue;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                dataFilter_ = new java.util.ArrayList<gdsc.smlm.data.config.FitConfig.DataFilter>();
                mutable_bitField0_ |= 0x00000002;
              }
              dataFilter_.add(
                  input.readMessage(gdsc.smlm.data.config.FitConfig.DataFilter.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          dataFilter_ = java.util.Collections.unmodifiableList(dataFilter_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_DataFilterSettings_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_DataFilterSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.FitConfig.DataFilterSettings.class, gdsc.smlm.data.config.FitConfig.DataFilterSettings.Builder.class);
    }

    private int bitField0_;
    public static final int DATA_FILTER_TYPE_FIELD_NUMBER = 1;
    private int dataFilterType_;
    /**
     * <pre>
     * The type of data filter
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterType data_filter_type = 1;</code>
     */
    public int getDataFilterTypeValue() {
      return dataFilterType_;
    }
    /**
     * <pre>
     * The type of data filter
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterType data_filter_type = 1;</code>
     */
    public gdsc.smlm.data.config.FitConfig.DataFilterType getDataFilterType() {
      gdsc.smlm.data.config.FitConfig.DataFilterType result = gdsc.smlm.data.config.FitConfig.DataFilterType.valueOf(dataFilterType_);
      return result == null ? gdsc.smlm.data.config.FitConfig.DataFilterType.UNRECOGNIZED : result;
    }

    public static final int DATA_FILTER_FIELD_NUMBER = 2;
    private java.util.List<gdsc.smlm.data.config.FitConfig.DataFilter> dataFilter_;
    /**
     * <pre>
     * The data filter
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
     */
    public java.util.List<gdsc.smlm.data.config.FitConfig.DataFilter> getDataFilterList() {
      return dataFilter_;
    }
    /**
     * <pre>
     * The data filter
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
     */
    public java.util.List<? extends gdsc.smlm.data.config.FitConfig.DataFilterOrBuilder> 
        getDataFilterOrBuilderList() {
      return dataFilter_;
    }
    /**
     * <pre>
     * The data filter
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
     */
    public int getDataFilterCount() {
      return dataFilter_.size();
    }
    /**
     * <pre>
     * The data filter
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
     */
    public gdsc.smlm.data.config.FitConfig.DataFilter getDataFilter(int index) {
      return dataFilter_.get(index);
    }
    /**
     * <pre>
     * The data filter
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
     */
    public gdsc.smlm.data.config.FitConfig.DataFilterOrBuilder getDataFilterOrBuilder(
        int index) {
      return dataFilter_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (dataFilterType_ != gdsc.smlm.data.config.FitConfig.DataFilterType.SINGLE.getNumber()) {
        output.writeEnum(1, dataFilterType_);
      }
      for (int i = 0; i < dataFilter_.size(); i++) {
        output.writeMessage(2, dataFilter_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (dataFilterType_ != gdsc.smlm.data.config.FitConfig.DataFilterType.SINGLE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, dataFilterType_);
      }
      for (int i = 0; i < dataFilter_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, dataFilter_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.FitConfig.DataFilterSettings)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.FitConfig.DataFilterSettings other = (gdsc.smlm.data.config.FitConfig.DataFilterSettings) obj;

      boolean result = true;
      result = result && dataFilterType_ == other.dataFilterType_;
      result = result && getDataFilterList()
          .equals(other.getDataFilterList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DATA_FILTER_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + dataFilterType_;
      if (getDataFilterCount() > 0) {
        hash = (37 * hash) + DATA_FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getDataFilterList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.FitConfig.DataFilterSettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilterSettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilterSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilterSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilterSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilterSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilterSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilterSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilterSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilterSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilterSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.DataFilterSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.FitConfig.DataFilterSettings prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the settings for filtering data to identify candidates.
     * </pre>
     *
     * Protobuf type {@code gdsc.smlm.data.config.DataFilterSettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gdsc.smlm.data.config.DataFilterSettings)
        gdsc.smlm.data.config.FitConfig.DataFilterSettingsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_DataFilterSettings_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_DataFilterSettings_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.FitConfig.DataFilterSettings.class, gdsc.smlm.data.config.FitConfig.DataFilterSettings.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.FitConfig.DataFilterSettings.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDataFilterFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        dataFilterType_ = 0;

        if (dataFilterBuilder_ == null) {
          dataFilter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          dataFilterBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_DataFilterSettings_descriptor;
      }

      public gdsc.smlm.data.config.FitConfig.DataFilterSettings getDefaultInstanceForType() {
        return gdsc.smlm.data.config.FitConfig.DataFilterSettings.getDefaultInstance();
      }

      public gdsc.smlm.data.config.FitConfig.DataFilterSettings build() {
        gdsc.smlm.data.config.FitConfig.DataFilterSettings result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.FitConfig.DataFilterSettings buildPartial() {
        gdsc.smlm.data.config.FitConfig.DataFilterSettings result = new gdsc.smlm.data.config.FitConfig.DataFilterSettings(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.dataFilterType_ = dataFilterType_;
        if (dataFilterBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            dataFilter_ = java.util.Collections.unmodifiableList(dataFilter_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.dataFilter_ = dataFilter_;
        } else {
          result.dataFilter_ = dataFilterBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.FitConfig.DataFilterSettings) {
          return mergeFrom((gdsc.smlm.data.config.FitConfig.DataFilterSettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.FitConfig.DataFilterSettings other) {
        if (other == gdsc.smlm.data.config.FitConfig.DataFilterSettings.getDefaultInstance()) return this;
        if (other.dataFilterType_ != 0) {
          setDataFilterTypeValue(other.getDataFilterTypeValue());
        }
        if (dataFilterBuilder_ == null) {
          if (!other.dataFilter_.isEmpty()) {
            if (dataFilter_.isEmpty()) {
              dataFilter_ = other.dataFilter_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureDataFilterIsMutable();
              dataFilter_.addAll(other.dataFilter_);
            }
            onChanged();
          }
        } else {
          if (!other.dataFilter_.isEmpty()) {
            if (dataFilterBuilder_.isEmpty()) {
              dataFilterBuilder_.dispose();
              dataFilterBuilder_ = null;
              dataFilter_ = other.dataFilter_;
              bitField0_ = (bitField0_ & ~0x00000002);
              dataFilterBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDataFilterFieldBuilder() : null;
            } else {
              dataFilterBuilder_.addAllMessages(other.dataFilter_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.FitConfig.DataFilterSettings parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.FitConfig.DataFilterSettings) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int dataFilterType_ = 0;
      /**
       * <pre>
       * The type of data filter
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterType data_filter_type = 1;</code>
       */
      public int getDataFilterTypeValue() {
        return dataFilterType_;
      }
      /**
       * <pre>
       * The type of data filter
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterType data_filter_type = 1;</code>
       */
      public Builder setDataFilterTypeValue(int value) {
        dataFilterType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type of data filter
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterType data_filter_type = 1;</code>
       */
      public gdsc.smlm.data.config.FitConfig.DataFilterType getDataFilterType() {
        gdsc.smlm.data.config.FitConfig.DataFilterType result = gdsc.smlm.data.config.FitConfig.DataFilterType.valueOf(dataFilterType_);
        return result == null ? gdsc.smlm.data.config.FitConfig.DataFilterType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The type of data filter
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterType data_filter_type = 1;</code>
       */
      public Builder setDataFilterType(gdsc.smlm.data.config.FitConfig.DataFilterType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        dataFilterType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type of data filter
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterType data_filter_type = 1;</code>
       */
      public Builder clearDataFilterType() {
        
        dataFilterType_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<gdsc.smlm.data.config.FitConfig.DataFilter> dataFilter_ =
        java.util.Collections.emptyList();
      private void ensureDataFilterIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          dataFilter_ = new java.util.ArrayList<gdsc.smlm.data.config.FitConfig.DataFilter>(dataFilter_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.DataFilter, gdsc.smlm.data.config.FitConfig.DataFilter.Builder, gdsc.smlm.data.config.FitConfig.DataFilterOrBuilder> dataFilterBuilder_;

      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public java.util.List<gdsc.smlm.data.config.FitConfig.DataFilter> getDataFilterList() {
        if (dataFilterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dataFilter_);
        } else {
          return dataFilterBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public int getDataFilterCount() {
        if (dataFilterBuilder_ == null) {
          return dataFilter_.size();
        } else {
          return dataFilterBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public gdsc.smlm.data.config.FitConfig.DataFilter getDataFilter(int index) {
        if (dataFilterBuilder_ == null) {
          return dataFilter_.get(index);
        } else {
          return dataFilterBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public Builder setDataFilter(
          int index, gdsc.smlm.data.config.FitConfig.DataFilter value) {
        if (dataFilterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataFilterIsMutable();
          dataFilter_.set(index, value);
          onChanged();
        } else {
          dataFilterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public Builder setDataFilter(
          int index, gdsc.smlm.data.config.FitConfig.DataFilter.Builder builderForValue) {
        if (dataFilterBuilder_ == null) {
          ensureDataFilterIsMutable();
          dataFilter_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataFilterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public Builder addDataFilter(gdsc.smlm.data.config.FitConfig.DataFilter value) {
        if (dataFilterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataFilterIsMutable();
          dataFilter_.add(value);
          onChanged();
        } else {
          dataFilterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public Builder addDataFilter(
          int index, gdsc.smlm.data.config.FitConfig.DataFilter value) {
        if (dataFilterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataFilterIsMutable();
          dataFilter_.add(index, value);
          onChanged();
        } else {
          dataFilterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public Builder addDataFilter(
          gdsc.smlm.data.config.FitConfig.DataFilter.Builder builderForValue) {
        if (dataFilterBuilder_ == null) {
          ensureDataFilterIsMutable();
          dataFilter_.add(builderForValue.build());
          onChanged();
        } else {
          dataFilterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public Builder addDataFilter(
          int index, gdsc.smlm.data.config.FitConfig.DataFilter.Builder builderForValue) {
        if (dataFilterBuilder_ == null) {
          ensureDataFilterIsMutable();
          dataFilter_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataFilterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public Builder addAllDataFilter(
          java.lang.Iterable<? extends gdsc.smlm.data.config.FitConfig.DataFilter> values) {
        if (dataFilterBuilder_ == null) {
          ensureDataFilterIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dataFilter_);
          onChanged();
        } else {
          dataFilterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public Builder clearDataFilter() {
        if (dataFilterBuilder_ == null) {
          dataFilter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          dataFilterBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public Builder removeDataFilter(int index) {
        if (dataFilterBuilder_ == null) {
          ensureDataFilterIsMutable();
          dataFilter_.remove(index);
          onChanged();
        } else {
          dataFilterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public gdsc.smlm.data.config.FitConfig.DataFilter.Builder getDataFilterBuilder(
          int index) {
        return getDataFilterFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public gdsc.smlm.data.config.FitConfig.DataFilterOrBuilder getDataFilterOrBuilder(
          int index) {
        if (dataFilterBuilder_ == null) {
          return dataFilter_.get(index);  } else {
          return dataFilterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public java.util.List<? extends gdsc.smlm.data.config.FitConfig.DataFilterOrBuilder> 
           getDataFilterOrBuilderList() {
        if (dataFilterBuilder_ != null) {
          return dataFilterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dataFilter_);
        }
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public gdsc.smlm.data.config.FitConfig.DataFilter.Builder addDataFilterBuilder() {
        return getDataFilterFieldBuilder().addBuilder(
            gdsc.smlm.data.config.FitConfig.DataFilter.getDefaultInstance());
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public gdsc.smlm.data.config.FitConfig.DataFilter.Builder addDataFilterBuilder(
          int index) {
        return getDataFilterFieldBuilder().addBuilder(
            index, gdsc.smlm.data.config.FitConfig.DataFilter.getDefaultInstance());
      }
      /**
       * <pre>
       * The data filter
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.DataFilter data_filter = 2;</code>
       */
      public java.util.List<gdsc.smlm.data.config.FitConfig.DataFilter.Builder> 
           getDataFilterBuilderList() {
        return getDataFilterFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.DataFilter, gdsc.smlm.data.config.FitConfig.DataFilter.Builder, gdsc.smlm.data.config.FitConfig.DataFilterOrBuilder> 
          getDataFilterFieldBuilder() {
        if (dataFilterBuilder_ == null) {
          dataFilterBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              gdsc.smlm.data.config.FitConfig.DataFilter, gdsc.smlm.data.config.FitConfig.DataFilter.Builder, gdsc.smlm.data.config.FitConfig.DataFilterOrBuilder>(
                  dataFilter_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          dataFilter_ = null;
        }
        return dataFilterBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:gdsc.smlm.data.config.DataFilterSettings)
    }

    // @@protoc_insertion_point(class_scope:gdsc.smlm.data.config.DataFilterSettings)
    private static final gdsc.smlm.data.config.FitConfig.DataFilterSettings DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.FitConfig.DataFilterSettings();
    }

    public static gdsc.smlm.data.config.FitConfig.DataFilterSettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DataFilterSettings>
        PARSER = new com.google.protobuf.AbstractParser<DataFilterSettings>() {
      public DataFilterSettings parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DataFilterSettings(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DataFilterSettings> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DataFilterSettings> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.FitConfig.DataFilterSettings getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FitEngineSettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gdsc.smlm.data.config.FitEngineSettings)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The fit settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
     */
    boolean hasFitSettings();
    /**
     * <pre>
     * The fit settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
     */
    gdsc.smlm.data.config.FitConfig.FitSettings getFitSettings();
    /**
     * <pre>
     * The fit settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
     */
    gdsc.smlm.data.config.FitConfig.FitSettingsOrBuilder getFitSettingsOrBuilder();

    /**
     * <pre>
     * the method for estimating noise in the entire frame
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.NoiseEstimatorMethod noise_method = 2;</code>
     */
    int getNoiseMethodValue();
    /**
     * <pre>
     * the method for estimating noise in the entire frame
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.NoiseEstimatorMethod noise_method = 2;</code>
     */
    gdsc.smlm.data.config.FitConfig.NoiseEstimatorMethod getNoiseMethod();

    /**
     * <pre>
     * The data filter settings 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
     */
    boolean hasDataFilterSettings();
    /**
     * <pre>
     * The data filter settings 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
     */
    gdsc.smlm.data.config.FitConfig.DataFilterSettings getDataFilterSettings();
    /**
     * <pre>
     * The data filter settings 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
     */
    gdsc.smlm.data.config.FitConfig.DataFilterSettingsOrBuilder getDataFilterSettingsOrBuilder();

    /**
     * <pre>
     * The square radius to use to identify local maxima (candidates)
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
     */
    boolean hasSearch();
    /**
     * <pre>
     * The square radius to use to identify local maxima (candidates)
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
     */
    gdsc.smlm.data.config.FitConfig.RelativeParameter getSearch();
    /**
     * <pre>
     * The square radius to use to identify local maxima (candidates)
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
     */
    gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getSearchOrBuilder();

    /**
     * <pre>
     * The border to ignore at the edge of the image 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
     */
    boolean hasBorder();
    /**
     * <pre>
     * The border to ignore at the edge of the image 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
     */
    gdsc.smlm.data.config.FitConfig.RelativeParameter getBorder();
    /**
     * <pre>
     * The border to ignore at the edge of the image 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
     */
    gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getBorderOrBuilder();

    /**
     * <pre>
     * The square radius to use for fitting around each candidate 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
     */
    boolean hasFitting();
    /**
     * <pre>
     * The square radius to use for fitting around each candidate 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
     */
    gdsc.smlm.data.config.FitConfig.RelativeParameter getFitting();
    /**
     * <pre>
     * The square radius to use for fitting around each candidate 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
     */
    gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getFittingOrBuilder();

    /**
     * <pre>
     * Set to true to include neighbours during fitting
     * </pre>
     *
     * <code>bool include_neighbours = 7;</code>
     */
    boolean getIncludeNeighbours();

    /**
     * <pre>
     * The height threshold for including neighbours expressed relative to the current candidate
     * </pre>
     *
     * <code>double neighbour_height_threshold = 8;</code>
     */
    double getNeighbourHeightThreshold();

    /**
     * <pre>
     * The residuals threshold for refitting a single peak as a doublet following analysis of the symmetry of the fit residuals.
     * </pre>
     *
     * <code>double residuals_threshold = 9;</code>
     */
    double getResidualsThreshold();

    /**
     * <pre>
     * The distance to categorise localisations as duplicates and ignore them.
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
     */
    boolean hasDuplicateDistance();
    /**
     * <pre>
     * The distance to categorise localisations as duplicates and ignore them.
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
     */
    gdsc.smlm.data.config.FitConfig.RelativeParameter getDuplicateDistance();
    /**
     * <pre>
     * The distance to categorise localisations as duplicates and ignore them.
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
     */
    gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getDuplicateDistanceOrBuilder();

    /**
     * <pre>
     * The number of consecutive failures to allow before stopping fitting of the remaining candidates
     * </pre>
     *
     * <code>int32 failures_limit = 11;</code>
     */
    int getFailuresLimit();
  }
  /**
   * <pre>
   * Define the settings for the fit engine. These settings are used to identify
   * candidates in the input data, extract regions for fitting, fit using various
   * methods (single, multiple, doublet) and select the best fit. 
   * </pre>
   *
   * Protobuf type {@code gdsc.smlm.data.config.FitEngineSettings}
   */
  public  static final class FitEngineSettings extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gdsc.smlm.data.config.FitEngineSettings)
      FitEngineSettingsOrBuilder {
    // Use FitEngineSettings.newBuilder() to construct.
    private FitEngineSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FitEngineSettings() {
      noiseMethod_ = 0;
      includeNeighbours_ = false;
      neighbourHeightThreshold_ = 0D;
      residualsThreshold_ = 0D;
      failuresLimit_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private FitEngineSettings(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              gdsc.smlm.data.config.FitConfig.FitSettings.Builder subBuilder = null;
              if (fitSettings_ != null) {
                subBuilder = fitSettings_.toBuilder();
              }
              fitSettings_ = input.readMessage(gdsc.smlm.data.config.FitConfig.FitSettings.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fitSettings_);
                fitSettings_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              noiseMethod_ = rawValue;
              break;
            }
            case 26: {
              gdsc.smlm.data.config.FitConfig.DataFilterSettings.Builder subBuilder = null;
              if (dataFilterSettings_ != null) {
                subBuilder = dataFilterSettings_.toBuilder();
              }
              dataFilterSettings_ = input.readMessage(gdsc.smlm.data.config.FitConfig.DataFilterSettings.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dataFilterSettings_);
                dataFilterSettings_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder subBuilder = null;
              if (search_ != null) {
                subBuilder = search_.toBuilder();
              }
              search_ = input.readMessage(gdsc.smlm.data.config.FitConfig.RelativeParameter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(search_);
                search_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder subBuilder = null;
              if (border_ != null) {
                subBuilder = border_.toBuilder();
              }
              border_ = input.readMessage(gdsc.smlm.data.config.FitConfig.RelativeParameter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(border_);
                border_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder subBuilder = null;
              if (fitting_ != null) {
                subBuilder = fitting_.toBuilder();
              }
              fitting_ = input.readMessage(gdsc.smlm.data.config.FitConfig.RelativeParameter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fitting_);
                fitting_ = subBuilder.buildPartial();
              }

              break;
            }
            case 56: {

              includeNeighbours_ = input.readBool();
              break;
            }
            case 65: {

              neighbourHeightThreshold_ = input.readDouble();
              break;
            }
            case 73: {

              residualsThreshold_ = input.readDouble();
              break;
            }
            case 82: {
              gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder subBuilder = null;
              if (duplicateDistance_ != null) {
                subBuilder = duplicateDistance_.toBuilder();
              }
              duplicateDistance_ = input.readMessage(gdsc.smlm.data.config.FitConfig.RelativeParameter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(duplicateDistance_);
                duplicateDistance_ = subBuilder.buildPartial();
              }

              break;
            }
            case 88: {

              failuresLimit_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitEngineSettings_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitEngineSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.FitConfig.FitEngineSettings.class, gdsc.smlm.data.config.FitConfig.FitEngineSettings.Builder.class);
    }

    public static final int FIT_SETTINGS_FIELD_NUMBER = 1;
    private gdsc.smlm.data.config.FitConfig.FitSettings fitSettings_;
    /**
     * <pre>
     * The fit settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
     */
    public boolean hasFitSettings() {
      return fitSettings_ != null;
    }
    /**
     * <pre>
     * The fit settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
     */
    public gdsc.smlm.data.config.FitConfig.FitSettings getFitSettings() {
      return fitSettings_ == null ? gdsc.smlm.data.config.FitConfig.FitSettings.getDefaultInstance() : fitSettings_;
    }
    /**
     * <pre>
     * The fit settings
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
     */
    public gdsc.smlm.data.config.FitConfig.FitSettingsOrBuilder getFitSettingsOrBuilder() {
      return getFitSettings();
    }

    public static final int NOISE_METHOD_FIELD_NUMBER = 2;
    private int noiseMethod_;
    /**
     * <pre>
     * the method for estimating noise in the entire frame
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.NoiseEstimatorMethod noise_method = 2;</code>
     */
    public int getNoiseMethodValue() {
      return noiseMethod_;
    }
    /**
     * <pre>
     * the method for estimating noise in the entire frame
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.NoiseEstimatorMethod noise_method = 2;</code>
     */
    public gdsc.smlm.data.config.FitConfig.NoiseEstimatorMethod getNoiseMethod() {
      gdsc.smlm.data.config.FitConfig.NoiseEstimatorMethod result = gdsc.smlm.data.config.FitConfig.NoiseEstimatorMethod.valueOf(noiseMethod_);
      return result == null ? gdsc.smlm.data.config.FitConfig.NoiseEstimatorMethod.UNRECOGNIZED : result;
    }

    public static final int DATA_FILTER_SETTINGS_FIELD_NUMBER = 3;
    private gdsc.smlm.data.config.FitConfig.DataFilterSettings dataFilterSettings_;
    /**
     * <pre>
     * The data filter settings 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
     */
    public boolean hasDataFilterSettings() {
      return dataFilterSettings_ != null;
    }
    /**
     * <pre>
     * The data filter settings 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
     */
    public gdsc.smlm.data.config.FitConfig.DataFilterSettings getDataFilterSettings() {
      return dataFilterSettings_ == null ? gdsc.smlm.data.config.FitConfig.DataFilterSettings.getDefaultInstance() : dataFilterSettings_;
    }
    /**
     * <pre>
     * The data filter settings 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
     */
    public gdsc.smlm.data.config.FitConfig.DataFilterSettingsOrBuilder getDataFilterSettingsOrBuilder() {
      return getDataFilterSettings();
    }

    public static final int SEARCH_FIELD_NUMBER = 4;
    private gdsc.smlm.data.config.FitConfig.RelativeParameter search_;
    /**
     * <pre>
     * The square radius to use to identify local maxima (candidates)
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
     */
    public boolean hasSearch() {
      return search_ != null;
    }
    /**
     * <pre>
     * The square radius to use to identify local maxima (candidates)
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
     */
    public gdsc.smlm.data.config.FitConfig.RelativeParameter getSearch() {
      return search_ == null ? gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance() : search_;
    }
    /**
     * <pre>
     * The square radius to use to identify local maxima (candidates)
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
     */
    public gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getSearchOrBuilder() {
      return getSearch();
    }

    public static final int BORDER_FIELD_NUMBER = 5;
    private gdsc.smlm.data.config.FitConfig.RelativeParameter border_;
    /**
     * <pre>
     * The border to ignore at the edge of the image 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
     */
    public boolean hasBorder() {
      return border_ != null;
    }
    /**
     * <pre>
     * The border to ignore at the edge of the image 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
     */
    public gdsc.smlm.data.config.FitConfig.RelativeParameter getBorder() {
      return border_ == null ? gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance() : border_;
    }
    /**
     * <pre>
     * The border to ignore at the edge of the image 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
     */
    public gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getBorderOrBuilder() {
      return getBorder();
    }

    public static final int FITTING_FIELD_NUMBER = 6;
    private gdsc.smlm.data.config.FitConfig.RelativeParameter fitting_;
    /**
     * <pre>
     * The square radius to use for fitting around each candidate 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
     */
    public boolean hasFitting() {
      return fitting_ != null;
    }
    /**
     * <pre>
     * The square radius to use for fitting around each candidate 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
     */
    public gdsc.smlm.data.config.FitConfig.RelativeParameter getFitting() {
      return fitting_ == null ? gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance() : fitting_;
    }
    /**
     * <pre>
     * The square radius to use for fitting around each candidate 
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
     */
    public gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getFittingOrBuilder() {
      return getFitting();
    }

    public static final int INCLUDE_NEIGHBOURS_FIELD_NUMBER = 7;
    private boolean includeNeighbours_;
    /**
     * <pre>
     * Set to true to include neighbours during fitting
     * </pre>
     *
     * <code>bool include_neighbours = 7;</code>
     */
    public boolean getIncludeNeighbours() {
      return includeNeighbours_;
    }

    public static final int NEIGHBOUR_HEIGHT_THRESHOLD_FIELD_NUMBER = 8;
    private double neighbourHeightThreshold_;
    /**
     * <pre>
     * The height threshold for including neighbours expressed relative to the current candidate
     * </pre>
     *
     * <code>double neighbour_height_threshold = 8;</code>
     */
    public double getNeighbourHeightThreshold() {
      return neighbourHeightThreshold_;
    }

    public static final int RESIDUALS_THRESHOLD_FIELD_NUMBER = 9;
    private double residualsThreshold_;
    /**
     * <pre>
     * The residuals threshold for refitting a single peak as a doublet following analysis of the symmetry of the fit residuals.
     * </pre>
     *
     * <code>double residuals_threshold = 9;</code>
     */
    public double getResidualsThreshold() {
      return residualsThreshold_;
    }

    public static final int DUPLICATE_DISTANCE_FIELD_NUMBER = 10;
    private gdsc.smlm.data.config.FitConfig.RelativeParameter duplicateDistance_;
    /**
     * <pre>
     * The distance to categorise localisations as duplicates and ignore them.
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
     */
    public boolean hasDuplicateDistance() {
      return duplicateDistance_ != null;
    }
    /**
     * <pre>
     * The distance to categorise localisations as duplicates and ignore them.
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
     */
    public gdsc.smlm.data.config.FitConfig.RelativeParameter getDuplicateDistance() {
      return duplicateDistance_ == null ? gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance() : duplicateDistance_;
    }
    /**
     * <pre>
     * The distance to categorise localisations as duplicates and ignore them.
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
     */
    public gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getDuplicateDistanceOrBuilder() {
      return getDuplicateDistance();
    }

    public static final int FAILURES_LIMIT_FIELD_NUMBER = 11;
    private int failuresLimit_;
    /**
     * <pre>
     * The number of consecutive failures to allow before stopping fitting of the remaining candidates
     * </pre>
     *
     * <code>int32 failures_limit = 11;</code>
     */
    public int getFailuresLimit() {
      return failuresLimit_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (fitSettings_ != null) {
        output.writeMessage(1, getFitSettings());
      }
      if (noiseMethod_ != gdsc.smlm.data.config.FitConfig.NoiseEstimatorMethod.ALL_PIXELS.getNumber()) {
        output.writeEnum(2, noiseMethod_);
      }
      if (dataFilterSettings_ != null) {
        output.writeMessage(3, getDataFilterSettings());
      }
      if (search_ != null) {
        output.writeMessage(4, getSearch());
      }
      if (border_ != null) {
        output.writeMessage(5, getBorder());
      }
      if (fitting_ != null) {
        output.writeMessage(6, getFitting());
      }
      if (includeNeighbours_ != false) {
        output.writeBool(7, includeNeighbours_);
      }
      if (neighbourHeightThreshold_ != 0D) {
        output.writeDouble(8, neighbourHeightThreshold_);
      }
      if (residualsThreshold_ != 0D) {
        output.writeDouble(9, residualsThreshold_);
      }
      if (duplicateDistance_ != null) {
        output.writeMessage(10, getDuplicateDistance());
      }
      if (failuresLimit_ != 0) {
        output.writeInt32(11, failuresLimit_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (fitSettings_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getFitSettings());
      }
      if (noiseMethod_ != gdsc.smlm.data.config.FitConfig.NoiseEstimatorMethod.ALL_PIXELS.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, noiseMethod_);
      }
      if (dataFilterSettings_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDataFilterSettings());
      }
      if (search_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getSearch());
      }
      if (border_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getBorder());
      }
      if (fitting_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getFitting());
      }
      if (includeNeighbours_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, includeNeighbours_);
      }
      if (neighbourHeightThreshold_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, neighbourHeightThreshold_);
      }
      if (residualsThreshold_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, residualsThreshold_);
      }
      if (duplicateDistance_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getDuplicateDistance());
      }
      if (failuresLimit_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, failuresLimit_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.FitConfig.FitEngineSettings)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.FitConfig.FitEngineSettings other = (gdsc.smlm.data.config.FitConfig.FitEngineSettings) obj;

      boolean result = true;
      result = result && (hasFitSettings() == other.hasFitSettings());
      if (hasFitSettings()) {
        result = result && getFitSettings()
            .equals(other.getFitSettings());
      }
      result = result && noiseMethod_ == other.noiseMethod_;
      result = result && (hasDataFilterSettings() == other.hasDataFilterSettings());
      if (hasDataFilterSettings()) {
        result = result && getDataFilterSettings()
            .equals(other.getDataFilterSettings());
      }
      result = result && (hasSearch() == other.hasSearch());
      if (hasSearch()) {
        result = result && getSearch()
            .equals(other.getSearch());
      }
      result = result && (hasBorder() == other.hasBorder());
      if (hasBorder()) {
        result = result && getBorder()
            .equals(other.getBorder());
      }
      result = result && (hasFitting() == other.hasFitting());
      if (hasFitting()) {
        result = result && getFitting()
            .equals(other.getFitting());
      }
      result = result && (getIncludeNeighbours()
          == other.getIncludeNeighbours());
      result = result && (
          java.lang.Double.doubleToLongBits(getNeighbourHeightThreshold())
          == java.lang.Double.doubleToLongBits(
              other.getNeighbourHeightThreshold()));
      result = result && (
          java.lang.Double.doubleToLongBits(getResidualsThreshold())
          == java.lang.Double.doubleToLongBits(
              other.getResidualsThreshold()));
      result = result && (hasDuplicateDistance() == other.hasDuplicateDistance());
      if (hasDuplicateDistance()) {
        result = result && getDuplicateDistance()
            .equals(other.getDuplicateDistance());
      }
      result = result && (getFailuresLimit()
          == other.getFailuresLimit());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFitSettings()) {
        hash = (37 * hash) + FIT_SETTINGS_FIELD_NUMBER;
        hash = (53 * hash) + getFitSettings().hashCode();
      }
      hash = (37 * hash) + NOISE_METHOD_FIELD_NUMBER;
      hash = (53 * hash) + noiseMethod_;
      if (hasDataFilterSettings()) {
        hash = (37 * hash) + DATA_FILTER_SETTINGS_FIELD_NUMBER;
        hash = (53 * hash) + getDataFilterSettings().hashCode();
      }
      if (hasSearch()) {
        hash = (37 * hash) + SEARCH_FIELD_NUMBER;
        hash = (53 * hash) + getSearch().hashCode();
      }
      if (hasBorder()) {
        hash = (37 * hash) + BORDER_FIELD_NUMBER;
        hash = (53 * hash) + getBorder().hashCode();
      }
      if (hasFitting()) {
        hash = (37 * hash) + FITTING_FIELD_NUMBER;
        hash = (53 * hash) + getFitting().hashCode();
      }
      hash = (37 * hash) + INCLUDE_NEIGHBOURS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIncludeNeighbours());
      hash = (37 * hash) + NEIGHBOUR_HEIGHT_THRESHOLD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getNeighbourHeightThreshold()));
      hash = (37 * hash) + RESIDUALS_THRESHOLD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getResidualsThreshold()));
      if (hasDuplicateDistance()) {
        hash = (37 * hash) + DUPLICATE_DISTANCE_FIELD_NUMBER;
        hash = (53 * hash) + getDuplicateDistance().hashCode();
      }
      hash = (37 * hash) + FAILURES_LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getFailuresLimit();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.FitConfig.FitEngineSettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.FitEngineSettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitEngineSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.FitEngineSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitEngineSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.FitConfig.FitEngineSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitEngineSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.FitEngineSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitEngineSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.FitEngineSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.FitConfig.FitEngineSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.FitConfig.FitEngineSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.FitConfig.FitEngineSettings prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the settings for the fit engine. These settings are used to identify
     * candidates in the input data, extract regions for fitting, fit using various
     * methods (single, multiple, doublet) and select the best fit. 
     * </pre>
     *
     * Protobuf type {@code gdsc.smlm.data.config.FitEngineSettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gdsc.smlm.data.config.FitEngineSettings)
        gdsc.smlm.data.config.FitConfig.FitEngineSettingsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitEngineSettings_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitEngineSettings_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.FitConfig.FitEngineSettings.class, gdsc.smlm.data.config.FitConfig.FitEngineSettings.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.FitConfig.FitEngineSettings.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (fitSettingsBuilder_ == null) {
          fitSettings_ = null;
        } else {
          fitSettings_ = null;
          fitSettingsBuilder_ = null;
        }
        noiseMethod_ = 0;

        if (dataFilterSettingsBuilder_ == null) {
          dataFilterSettings_ = null;
        } else {
          dataFilterSettings_ = null;
          dataFilterSettingsBuilder_ = null;
        }
        if (searchBuilder_ == null) {
          search_ = null;
        } else {
          search_ = null;
          searchBuilder_ = null;
        }
        if (borderBuilder_ == null) {
          border_ = null;
        } else {
          border_ = null;
          borderBuilder_ = null;
        }
        if (fittingBuilder_ == null) {
          fitting_ = null;
        } else {
          fitting_ = null;
          fittingBuilder_ = null;
        }
        includeNeighbours_ = false;

        neighbourHeightThreshold_ = 0D;

        residualsThreshold_ = 0D;

        if (duplicateDistanceBuilder_ == null) {
          duplicateDistance_ = null;
        } else {
          duplicateDistance_ = null;
          duplicateDistanceBuilder_ = null;
        }
        failuresLimit_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.FitConfig.internal_static_gdsc_smlm_data_config_FitEngineSettings_descriptor;
      }

      public gdsc.smlm.data.config.FitConfig.FitEngineSettings getDefaultInstanceForType() {
        return gdsc.smlm.data.config.FitConfig.FitEngineSettings.getDefaultInstance();
      }

      public gdsc.smlm.data.config.FitConfig.FitEngineSettings build() {
        gdsc.smlm.data.config.FitConfig.FitEngineSettings result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.FitConfig.FitEngineSettings buildPartial() {
        gdsc.smlm.data.config.FitConfig.FitEngineSettings result = new gdsc.smlm.data.config.FitConfig.FitEngineSettings(this);
        if (fitSettingsBuilder_ == null) {
          result.fitSettings_ = fitSettings_;
        } else {
          result.fitSettings_ = fitSettingsBuilder_.build();
        }
        result.noiseMethod_ = noiseMethod_;
        if (dataFilterSettingsBuilder_ == null) {
          result.dataFilterSettings_ = dataFilterSettings_;
        } else {
          result.dataFilterSettings_ = dataFilterSettingsBuilder_.build();
        }
        if (searchBuilder_ == null) {
          result.search_ = search_;
        } else {
          result.search_ = searchBuilder_.build();
        }
        if (borderBuilder_ == null) {
          result.border_ = border_;
        } else {
          result.border_ = borderBuilder_.build();
        }
        if (fittingBuilder_ == null) {
          result.fitting_ = fitting_;
        } else {
          result.fitting_ = fittingBuilder_.build();
        }
        result.includeNeighbours_ = includeNeighbours_;
        result.neighbourHeightThreshold_ = neighbourHeightThreshold_;
        result.residualsThreshold_ = residualsThreshold_;
        if (duplicateDistanceBuilder_ == null) {
          result.duplicateDistance_ = duplicateDistance_;
        } else {
          result.duplicateDistance_ = duplicateDistanceBuilder_.build();
        }
        result.failuresLimit_ = failuresLimit_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.FitConfig.FitEngineSettings) {
          return mergeFrom((gdsc.smlm.data.config.FitConfig.FitEngineSettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.FitConfig.FitEngineSettings other) {
        if (other == gdsc.smlm.data.config.FitConfig.FitEngineSettings.getDefaultInstance()) return this;
        if (other.hasFitSettings()) {
          mergeFitSettings(other.getFitSettings());
        }
        if (other.noiseMethod_ != 0) {
          setNoiseMethodValue(other.getNoiseMethodValue());
        }
        if (other.hasDataFilterSettings()) {
          mergeDataFilterSettings(other.getDataFilterSettings());
        }
        if (other.hasSearch()) {
          mergeSearch(other.getSearch());
        }
        if (other.hasBorder()) {
          mergeBorder(other.getBorder());
        }
        if (other.hasFitting()) {
          mergeFitting(other.getFitting());
        }
        if (other.getIncludeNeighbours() != false) {
          setIncludeNeighbours(other.getIncludeNeighbours());
        }
        if (other.getNeighbourHeightThreshold() != 0D) {
          setNeighbourHeightThreshold(other.getNeighbourHeightThreshold());
        }
        if (other.getResidualsThreshold() != 0D) {
          setResidualsThreshold(other.getResidualsThreshold());
        }
        if (other.hasDuplicateDistance()) {
          mergeDuplicateDistance(other.getDuplicateDistance());
        }
        if (other.getFailuresLimit() != 0) {
          setFailuresLimit(other.getFailuresLimit());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.FitConfig.FitEngineSettings parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.FitConfig.FitEngineSettings) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private gdsc.smlm.data.config.FitConfig.FitSettings fitSettings_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.FitSettings, gdsc.smlm.data.config.FitConfig.FitSettings.Builder, gdsc.smlm.data.config.FitConfig.FitSettingsOrBuilder> fitSettingsBuilder_;
      /**
       * <pre>
       * The fit settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
       */
      public boolean hasFitSettings() {
        return fitSettingsBuilder_ != null || fitSettings_ != null;
      }
      /**
       * <pre>
       * The fit settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
       */
      public gdsc.smlm.data.config.FitConfig.FitSettings getFitSettings() {
        if (fitSettingsBuilder_ == null) {
          return fitSettings_ == null ? gdsc.smlm.data.config.FitConfig.FitSettings.getDefaultInstance() : fitSettings_;
        } else {
          return fitSettingsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The fit settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
       */
      public Builder setFitSettings(gdsc.smlm.data.config.FitConfig.FitSettings value) {
        if (fitSettingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fitSettings_ = value;
          onChanged();
        } else {
          fitSettingsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The fit settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
       */
      public Builder setFitSettings(
          gdsc.smlm.data.config.FitConfig.FitSettings.Builder builderForValue) {
        if (fitSettingsBuilder_ == null) {
          fitSettings_ = builderForValue.build();
          onChanged();
        } else {
          fitSettingsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The fit settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
       */
      public Builder mergeFitSettings(gdsc.smlm.data.config.FitConfig.FitSettings value) {
        if (fitSettingsBuilder_ == null) {
          if (fitSettings_ != null) {
            fitSettings_ =
              gdsc.smlm.data.config.FitConfig.FitSettings.newBuilder(fitSettings_).mergeFrom(value).buildPartial();
          } else {
            fitSettings_ = value;
          }
          onChanged();
        } else {
          fitSettingsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The fit settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
       */
      public Builder clearFitSettings() {
        if (fitSettingsBuilder_ == null) {
          fitSettings_ = null;
          onChanged();
        } else {
          fitSettings_ = null;
          fitSettingsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The fit settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
       */
      public gdsc.smlm.data.config.FitConfig.FitSettings.Builder getFitSettingsBuilder() {
        
        onChanged();
        return getFitSettingsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The fit settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
       */
      public gdsc.smlm.data.config.FitConfig.FitSettingsOrBuilder getFitSettingsOrBuilder() {
        if (fitSettingsBuilder_ != null) {
          return fitSettingsBuilder_.getMessageOrBuilder();
        } else {
          return fitSettings_ == null ?
              gdsc.smlm.data.config.FitConfig.FitSettings.getDefaultInstance() : fitSettings_;
        }
      }
      /**
       * <pre>
       * The fit settings
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.FitSettings fit_settings = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.FitSettings, gdsc.smlm.data.config.FitConfig.FitSettings.Builder, gdsc.smlm.data.config.FitConfig.FitSettingsOrBuilder> 
          getFitSettingsFieldBuilder() {
        if (fitSettingsBuilder_ == null) {
          fitSettingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.FitConfig.FitSettings, gdsc.smlm.data.config.FitConfig.FitSettings.Builder, gdsc.smlm.data.config.FitConfig.FitSettingsOrBuilder>(
                  getFitSettings(),
                  getParentForChildren(),
                  isClean());
          fitSettings_ = null;
        }
        return fitSettingsBuilder_;
      }

      private int noiseMethod_ = 0;
      /**
       * <pre>
       * the method for estimating noise in the entire frame
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.NoiseEstimatorMethod noise_method = 2;</code>
       */
      public int getNoiseMethodValue() {
        return noiseMethod_;
      }
      /**
       * <pre>
       * the method for estimating noise in the entire frame
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.NoiseEstimatorMethod noise_method = 2;</code>
       */
      public Builder setNoiseMethodValue(int value) {
        noiseMethod_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the method for estimating noise in the entire frame
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.NoiseEstimatorMethod noise_method = 2;</code>
       */
      public gdsc.smlm.data.config.FitConfig.NoiseEstimatorMethod getNoiseMethod() {
        gdsc.smlm.data.config.FitConfig.NoiseEstimatorMethod result = gdsc.smlm.data.config.FitConfig.NoiseEstimatorMethod.valueOf(noiseMethod_);
        return result == null ? gdsc.smlm.data.config.FitConfig.NoiseEstimatorMethod.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * the method for estimating noise in the entire frame
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.NoiseEstimatorMethod noise_method = 2;</code>
       */
      public Builder setNoiseMethod(gdsc.smlm.data.config.FitConfig.NoiseEstimatorMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        noiseMethod_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the method for estimating noise in the entire frame
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.NoiseEstimatorMethod noise_method = 2;</code>
       */
      public Builder clearNoiseMethod() {
        
        noiseMethod_ = 0;
        onChanged();
        return this;
      }

      private gdsc.smlm.data.config.FitConfig.DataFilterSettings dataFilterSettings_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.DataFilterSettings, gdsc.smlm.data.config.FitConfig.DataFilterSettings.Builder, gdsc.smlm.data.config.FitConfig.DataFilterSettingsOrBuilder> dataFilterSettingsBuilder_;
      /**
       * <pre>
       * The data filter settings 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
       */
      public boolean hasDataFilterSettings() {
        return dataFilterSettingsBuilder_ != null || dataFilterSettings_ != null;
      }
      /**
       * <pre>
       * The data filter settings 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
       */
      public gdsc.smlm.data.config.FitConfig.DataFilterSettings getDataFilterSettings() {
        if (dataFilterSettingsBuilder_ == null) {
          return dataFilterSettings_ == null ? gdsc.smlm.data.config.FitConfig.DataFilterSettings.getDefaultInstance() : dataFilterSettings_;
        } else {
          return dataFilterSettingsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The data filter settings 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
       */
      public Builder setDataFilterSettings(gdsc.smlm.data.config.FitConfig.DataFilterSettings value) {
        if (dataFilterSettingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dataFilterSettings_ = value;
          onChanged();
        } else {
          dataFilterSettingsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The data filter settings 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
       */
      public Builder setDataFilterSettings(
          gdsc.smlm.data.config.FitConfig.DataFilterSettings.Builder builderForValue) {
        if (dataFilterSettingsBuilder_ == null) {
          dataFilterSettings_ = builderForValue.build();
          onChanged();
        } else {
          dataFilterSettingsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The data filter settings 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
       */
      public Builder mergeDataFilterSettings(gdsc.smlm.data.config.FitConfig.DataFilterSettings value) {
        if (dataFilterSettingsBuilder_ == null) {
          if (dataFilterSettings_ != null) {
            dataFilterSettings_ =
              gdsc.smlm.data.config.FitConfig.DataFilterSettings.newBuilder(dataFilterSettings_).mergeFrom(value).buildPartial();
          } else {
            dataFilterSettings_ = value;
          }
          onChanged();
        } else {
          dataFilterSettingsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The data filter settings 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
       */
      public Builder clearDataFilterSettings() {
        if (dataFilterSettingsBuilder_ == null) {
          dataFilterSettings_ = null;
          onChanged();
        } else {
          dataFilterSettings_ = null;
          dataFilterSettingsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The data filter settings 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
       */
      public gdsc.smlm.data.config.FitConfig.DataFilterSettings.Builder getDataFilterSettingsBuilder() {
        
        onChanged();
        return getDataFilterSettingsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The data filter settings 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
       */
      public gdsc.smlm.data.config.FitConfig.DataFilterSettingsOrBuilder getDataFilterSettingsOrBuilder() {
        if (dataFilterSettingsBuilder_ != null) {
          return dataFilterSettingsBuilder_.getMessageOrBuilder();
        } else {
          return dataFilterSettings_ == null ?
              gdsc.smlm.data.config.FitConfig.DataFilterSettings.getDefaultInstance() : dataFilterSettings_;
        }
      }
      /**
       * <pre>
       * The data filter settings 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.DataFilterSettings data_filter_settings = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.DataFilterSettings, gdsc.smlm.data.config.FitConfig.DataFilterSettings.Builder, gdsc.smlm.data.config.FitConfig.DataFilterSettingsOrBuilder> 
          getDataFilterSettingsFieldBuilder() {
        if (dataFilterSettingsBuilder_ == null) {
          dataFilterSettingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.FitConfig.DataFilterSettings, gdsc.smlm.data.config.FitConfig.DataFilterSettings.Builder, gdsc.smlm.data.config.FitConfig.DataFilterSettingsOrBuilder>(
                  getDataFilterSettings(),
                  getParentForChildren(),
                  isClean());
          dataFilterSettings_ = null;
        }
        return dataFilterSettingsBuilder_;
      }

      private gdsc.smlm.data.config.FitConfig.RelativeParameter search_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder> searchBuilder_;
      /**
       * <pre>
       * The square radius to use to identify local maxima (candidates)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
       */
      public boolean hasSearch() {
        return searchBuilder_ != null || search_ != null;
      }
      /**
       * <pre>
       * The square radius to use to identify local maxima (candidates)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameter getSearch() {
        if (searchBuilder_ == null) {
          return search_ == null ? gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance() : search_;
        } else {
          return searchBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The square radius to use to identify local maxima (candidates)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
       */
      public Builder setSearch(gdsc.smlm.data.config.FitConfig.RelativeParameter value) {
        if (searchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          search_ = value;
          onChanged();
        } else {
          searchBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The square radius to use to identify local maxima (candidates)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
       */
      public Builder setSearch(
          gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder builderForValue) {
        if (searchBuilder_ == null) {
          search_ = builderForValue.build();
          onChanged();
        } else {
          searchBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The square radius to use to identify local maxima (candidates)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
       */
      public Builder mergeSearch(gdsc.smlm.data.config.FitConfig.RelativeParameter value) {
        if (searchBuilder_ == null) {
          if (search_ != null) {
            search_ =
              gdsc.smlm.data.config.FitConfig.RelativeParameter.newBuilder(search_).mergeFrom(value).buildPartial();
          } else {
            search_ = value;
          }
          onChanged();
        } else {
          searchBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The square radius to use to identify local maxima (candidates)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
       */
      public Builder clearSearch() {
        if (searchBuilder_ == null) {
          search_ = null;
          onChanged();
        } else {
          search_ = null;
          searchBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The square radius to use to identify local maxima (candidates)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder getSearchBuilder() {
        
        onChanged();
        return getSearchFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The square radius to use to identify local maxima (candidates)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getSearchOrBuilder() {
        if (searchBuilder_ != null) {
          return searchBuilder_.getMessageOrBuilder();
        } else {
          return search_ == null ?
              gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance() : search_;
        }
      }
      /**
       * <pre>
       * The square radius to use to identify local maxima (candidates)
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter search = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder> 
          getSearchFieldBuilder() {
        if (searchBuilder_ == null) {
          searchBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder>(
                  getSearch(),
                  getParentForChildren(),
                  isClean());
          search_ = null;
        }
        return searchBuilder_;
      }

      private gdsc.smlm.data.config.FitConfig.RelativeParameter border_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder> borderBuilder_;
      /**
       * <pre>
       * The border to ignore at the edge of the image 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
       */
      public boolean hasBorder() {
        return borderBuilder_ != null || border_ != null;
      }
      /**
       * <pre>
       * The border to ignore at the edge of the image 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameter getBorder() {
        if (borderBuilder_ == null) {
          return border_ == null ? gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance() : border_;
        } else {
          return borderBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The border to ignore at the edge of the image 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
       */
      public Builder setBorder(gdsc.smlm.data.config.FitConfig.RelativeParameter value) {
        if (borderBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          border_ = value;
          onChanged();
        } else {
          borderBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The border to ignore at the edge of the image 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
       */
      public Builder setBorder(
          gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder builderForValue) {
        if (borderBuilder_ == null) {
          border_ = builderForValue.build();
          onChanged();
        } else {
          borderBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The border to ignore at the edge of the image 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
       */
      public Builder mergeBorder(gdsc.smlm.data.config.FitConfig.RelativeParameter value) {
        if (borderBuilder_ == null) {
          if (border_ != null) {
            border_ =
              gdsc.smlm.data.config.FitConfig.RelativeParameter.newBuilder(border_).mergeFrom(value).buildPartial();
          } else {
            border_ = value;
          }
          onChanged();
        } else {
          borderBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The border to ignore at the edge of the image 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
       */
      public Builder clearBorder() {
        if (borderBuilder_ == null) {
          border_ = null;
          onChanged();
        } else {
          border_ = null;
          borderBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The border to ignore at the edge of the image 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder getBorderBuilder() {
        
        onChanged();
        return getBorderFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The border to ignore at the edge of the image 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getBorderOrBuilder() {
        if (borderBuilder_ != null) {
          return borderBuilder_.getMessageOrBuilder();
        } else {
          return border_ == null ?
              gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance() : border_;
        }
      }
      /**
       * <pre>
       * The border to ignore at the edge of the image 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter border = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder> 
          getBorderFieldBuilder() {
        if (borderBuilder_ == null) {
          borderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder>(
                  getBorder(),
                  getParentForChildren(),
                  isClean());
          border_ = null;
        }
        return borderBuilder_;
      }

      private gdsc.smlm.data.config.FitConfig.RelativeParameter fitting_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder> fittingBuilder_;
      /**
       * <pre>
       * The square radius to use for fitting around each candidate 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
       */
      public boolean hasFitting() {
        return fittingBuilder_ != null || fitting_ != null;
      }
      /**
       * <pre>
       * The square radius to use for fitting around each candidate 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameter getFitting() {
        if (fittingBuilder_ == null) {
          return fitting_ == null ? gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance() : fitting_;
        } else {
          return fittingBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The square radius to use for fitting around each candidate 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
       */
      public Builder setFitting(gdsc.smlm.data.config.FitConfig.RelativeParameter value) {
        if (fittingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fitting_ = value;
          onChanged();
        } else {
          fittingBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The square radius to use for fitting around each candidate 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
       */
      public Builder setFitting(
          gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder builderForValue) {
        if (fittingBuilder_ == null) {
          fitting_ = builderForValue.build();
          onChanged();
        } else {
          fittingBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The square radius to use for fitting around each candidate 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
       */
      public Builder mergeFitting(gdsc.smlm.data.config.FitConfig.RelativeParameter value) {
        if (fittingBuilder_ == null) {
          if (fitting_ != null) {
            fitting_ =
              gdsc.smlm.data.config.FitConfig.RelativeParameter.newBuilder(fitting_).mergeFrom(value).buildPartial();
          } else {
            fitting_ = value;
          }
          onChanged();
        } else {
          fittingBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The square radius to use for fitting around each candidate 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
       */
      public Builder clearFitting() {
        if (fittingBuilder_ == null) {
          fitting_ = null;
          onChanged();
        } else {
          fitting_ = null;
          fittingBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The square radius to use for fitting around each candidate 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder getFittingBuilder() {
        
        onChanged();
        return getFittingFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The square radius to use for fitting around each candidate 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getFittingOrBuilder() {
        if (fittingBuilder_ != null) {
          return fittingBuilder_.getMessageOrBuilder();
        } else {
          return fitting_ == null ?
              gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance() : fitting_;
        }
      }
      /**
       * <pre>
       * The square radius to use for fitting around each candidate 
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter fitting = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder> 
          getFittingFieldBuilder() {
        if (fittingBuilder_ == null) {
          fittingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder>(
                  getFitting(),
                  getParentForChildren(),
                  isClean());
          fitting_ = null;
        }
        return fittingBuilder_;
      }

      private boolean includeNeighbours_ ;
      /**
       * <pre>
       * Set to true to include neighbours during fitting
       * </pre>
       *
       * <code>bool include_neighbours = 7;</code>
       */
      public boolean getIncludeNeighbours() {
        return includeNeighbours_;
      }
      /**
       * <pre>
       * Set to true to include neighbours during fitting
       * </pre>
       *
       * <code>bool include_neighbours = 7;</code>
       */
      public Builder setIncludeNeighbours(boolean value) {
        
        includeNeighbours_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true to include neighbours during fitting
       * </pre>
       *
       * <code>bool include_neighbours = 7;</code>
       */
      public Builder clearIncludeNeighbours() {
        
        includeNeighbours_ = false;
        onChanged();
        return this;
      }

      private double neighbourHeightThreshold_ ;
      /**
       * <pre>
       * The height threshold for including neighbours expressed relative to the current candidate
       * </pre>
       *
       * <code>double neighbour_height_threshold = 8;</code>
       */
      public double getNeighbourHeightThreshold() {
        return neighbourHeightThreshold_;
      }
      /**
       * <pre>
       * The height threshold for including neighbours expressed relative to the current candidate
       * </pre>
       *
       * <code>double neighbour_height_threshold = 8;</code>
       */
      public Builder setNeighbourHeightThreshold(double value) {
        
        neighbourHeightThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The height threshold for including neighbours expressed relative to the current candidate
       * </pre>
       *
       * <code>double neighbour_height_threshold = 8;</code>
       */
      public Builder clearNeighbourHeightThreshold() {
        
        neighbourHeightThreshold_ = 0D;
        onChanged();
        return this;
      }

      private double residualsThreshold_ ;
      /**
       * <pre>
       * The residuals threshold for refitting a single peak as a doublet following analysis of the symmetry of the fit residuals.
       * </pre>
       *
       * <code>double residuals_threshold = 9;</code>
       */
      public double getResidualsThreshold() {
        return residualsThreshold_;
      }
      /**
       * <pre>
       * The residuals threshold for refitting a single peak as a doublet following analysis of the symmetry of the fit residuals.
       * </pre>
       *
       * <code>double residuals_threshold = 9;</code>
       */
      public Builder setResidualsThreshold(double value) {
        
        residualsThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The residuals threshold for refitting a single peak as a doublet following analysis of the symmetry of the fit residuals.
       * </pre>
       *
       * <code>double residuals_threshold = 9;</code>
       */
      public Builder clearResidualsThreshold() {
        
        residualsThreshold_ = 0D;
        onChanged();
        return this;
      }

      private gdsc.smlm.data.config.FitConfig.RelativeParameter duplicateDistance_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder> duplicateDistanceBuilder_;
      /**
       * <pre>
       * The distance to categorise localisations as duplicates and ignore them.
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
       */
      public boolean hasDuplicateDistance() {
        return duplicateDistanceBuilder_ != null || duplicateDistance_ != null;
      }
      /**
       * <pre>
       * The distance to categorise localisations as duplicates and ignore them.
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameter getDuplicateDistance() {
        if (duplicateDistanceBuilder_ == null) {
          return duplicateDistance_ == null ? gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance() : duplicateDistance_;
        } else {
          return duplicateDistanceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The distance to categorise localisations as duplicates and ignore them.
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
       */
      public Builder setDuplicateDistance(gdsc.smlm.data.config.FitConfig.RelativeParameter value) {
        if (duplicateDistanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          duplicateDistance_ = value;
          onChanged();
        } else {
          duplicateDistanceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The distance to categorise localisations as duplicates and ignore them.
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
       */
      public Builder setDuplicateDistance(
          gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder builderForValue) {
        if (duplicateDistanceBuilder_ == null) {
          duplicateDistance_ = builderForValue.build();
          onChanged();
        } else {
          duplicateDistanceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The distance to categorise localisations as duplicates and ignore them.
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
       */
      public Builder mergeDuplicateDistance(gdsc.smlm.data.config.FitConfig.RelativeParameter value) {
        if (duplicateDistanceBuilder_ == null) {
          if (duplicateDistance_ != null) {
            duplicateDistance_ =
              gdsc.smlm.data.config.FitConfig.RelativeParameter.newBuilder(duplicateDistance_).mergeFrom(value).buildPartial();
          } else {
            duplicateDistance_ = value;
          }
          onChanged();
        } else {
          duplicateDistanceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The distance to categorise localisations as duplicates and ignore them.
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
       */
      public Builder clearDuplicateDistance() {
        if (duplicateDistanceBuilder_ == null) {
          duplicateDistance_ = null;
          onChanged();
        } else {
          duplicateDistance_ = null;
          duplicateDistanceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The distance to categorise localisations as duplicates and ignore them.
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder getDuplicateDistanceBuilder() {
        
        onChanged();
        return getDuplicateDistanceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The distance to categorise localisations as duplicates and ignore them.
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
       */
      public gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder getDuplicateDistanceOrBuilder() {
        if (duplicateDistanceBuilder_ != null) {
          return duplicateDistanceBuilder_.getMessageOrBuilder();
        } else {
          return duplicateDistance_ == null ?
              gdsc.smlm.data.config.FitConfig.RelativeParameter.getDefaultInstance() : duplicateDistance_;
        }
      }
      /**
       * <pre>
       * The distance to categorise localisations as duplicates and ignore them.
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.RelativeParameter duplicate_distance = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder> 
          getDuplicateDistanceFieldBuilder() {
        if (duplicateDistanceBuilder_ == null) {
          duplicateDistanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.FitConfig.RelativeParameter, gdsc.smlm.data.config.FitConfig.RelativeParameter.Builder, gdsc.smlm.data.config.FitConfig.RelativeParameterOrBuilder>(
                  getDuplicateDistance(),
                  getParentForChildren(),
                  isClean());
          duplicateDistance_ = null;
        }
        return duplicateDistanceBuilder_;
      }

      private int failuresLimit_ ;
      /**
       * <pre>
       * The number of consecutive failures to allow before stopping fitting of the remaining candidates
       * </pre>
       *
       * <code>int32 failures_limit = 11;</code>
       */
      public int getFailuresLimit() {
        return failuresLimit_;
      }
      /**
       * <pre>
       * The number of consecutive failures to allow before stopping fitting of the remaining candidates
       * </pre>
       *
       * <code>int32 failures_limit = 11;</code>
       */
      public Builder setFailuresLimit(int value) {
        
        failuresLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of consecutive failures to allow before stopping fitting of the remaining candidates
       * </pre>
       *
       * <code>int32 failures_limit = 11;</code>
       */
      public Builder clearFailuresLimit() {
        
        failuresLimit_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:gdsc.smlm.data.config.FitEngineSettings)
    }

    // @@protoc_insertion_point(class_scope:gdsc.smlm.data.config.FitEngineSettings)
    private static final gdsc.smlm.data.config.FitConfig.FitEngineSettings DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.FitConfig.FitEngineSettings();
    }

    public static gdsc.smlm.data.config.FitConfig.FitEngineSettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FitEngineSettings>
        PARSER = new com.google.protobuf.AbstractParser<FitEngineSettings>() {
      public FitEngineSettings parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FitEngineSettings(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FitEngineSettings> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FitEngineSettings> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.FitConfig.FitEngineSettings getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gdsc_smlm_data_config_FitSolverSettings_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gdsc_smlm_data_config_FitSolverSettings_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gdsc_smlm_data_config_FilterSettings_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gdsc_smlm_data_config_FilterSettings_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gdsc_smlm_data_config_FitSettings_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gdsc_smlm_data_config_FitSettings_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gdsc_smlm_data_config_RelativeParameter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gdsc_smlm_data_config_RelativeParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gdsc_smlm_data_config_DataFilter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gdsc_smlm_data_config_DataFilter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gdsc_smlm_data_config_DataFilterSettings_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gdsc_smlm_data_config_DataFilterSettings_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gdsc_smlm_data_config_FitEngineSettings_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gdsc_smlm_data_config_FitEngineSettings_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020fit_config.proto\022\025gdsc.smlm.data.confi" +
      "g\032\020psf_config.proto\032\030calibration_config." +
      "proto\"\307\004\n\021FitSolverSettings\022\021\n\tfixed_psf" +
      "\030\001 \001(\010\022\"\n\032disable_background_fitting\030\002 \001" +
      "(\010\022\036\n\026disable_signal_fitting\030\003 \001(\010\0224\n\nfi" +
      "t_solver\030\004 \001(\0162 .gdsc.smlm.data.config.F" +
      "itSolver\022\030\n\020fixed_iterations\030\005 \001(\010\022\026\n\016ma" +
      "x_iterations\030\006 \001(\005\022\032\n\022relative_threshold" +
      "\030\007 \001(\001\022\032\n\022absolute_threshold\030\010 \001(\001\022$\n\034pa" +
      "rameter_relative_threshold\030\t \001(\001\022$\n\034para",
      "meter_absolute_threshold\030\n \001(\001\022\016\n\006lambda" +
      "\030\013 \001(\001\022:\n\rsearch_method\030\014 \001(\0162#.gdsc.sml" +
      "m.data.config.SearchMethod\022\"\n\032gradient_l" +
      "ine_minimisation\030\r \001(\010\022\024\n\014model_camera\030\016" +
      " \001(\010\022 \n\030max_function_evaluations\030\017 \001(\005\022\024" +
      "\n\014use_clamping\030\020 \001(\010\022\034\n\024use_dynamic_clam" +
      "ping\030\021 \001(\010\022\023\n\013clamp_value\030\022 \003(\001\"\233\002\n\016Filt" +
      "erSettings\022\024\n\014shift_factor\030\001 \001(\001\022\027\n\017sign" +
      "al_strength\030\002 \001(\001\022\023\n\013min_photons\030\003 \001(\001\022\033" +
      "\n\023precision_threshold\030\004 \001(\001\022\"\n\032precision",
      "_using_background\030\005 \001(\010\022\030\n\020min_width_fac" +
      "tor\030\006 \001(\001\022\030\n\020max_width_factor\030\007 \001(\001\022\035\n\025d" +
      "isable_simple_filter\030\010 \001(\010\022\024\n\014smart_filt" +
      "er\030\t \001(\010\022\033\n\023smart_filter_string\030\n \001(\t\"\366\001" +
      "\n\013FitSettings\0227\n\013calibration\030\001 \001(\0132\".gds" +
      "c.smlm.data.config.Calibration\022\'\n\003psf\030\002 " +
      "\001(\0132\032.gdsc.smlm.data.config.PSF\022E\n\023fit_s" +
      "olver_settings\030\003 \001(\0132(.gdsc.smlm.data.co" +
      "nfig.FitSolverSettings\022>\n\017filter_setting" +
      "s\030\004 \001(\0132%.gdsc.smlm.data.config.FilterSe",
      "ttings\"4\n\021RelativeParameter\022\r\n\005value\030\001 \001" +
      "(\001\022\020\n\010absolute\030\002 \001(\010\"\216\001\n\nDataFilter\022C\n\022d" +
      "ata_filter_method\030\001 \001(\0162\'.gdsc.smlm.data" +
      ".config.DataFilterMethod\022;\n\tparameter\030\002 " +
      "\003(\0132(.gdsc.smlm.data.config.RelativePara" +
      "meter\"\215\001\n\022DataFilterSettings\022?\n\020data_fil" +
      "ter_type\030\001 \001(\0162%.gdsc.smlm.data.config.D" +
      "ataFilterType\0226\n\013data_filter\030\002 \003(\0132!.gds" +
      "c.smlm.data.config.DataFilter\"\303\004\n\021FitEng" +
      "ineSettings\0228\n\014fit_settings\030\001 \001(\0132\".gdsc",
      ".smlm.data.config.FitSettings\022A\n\014noise_m" +
      "ethod\030\002 \001(\0162+.gdsc.smlm.data.config.Nois" +
      "eEstimatorMethod\022G\n\024data_filter_settings" +
      "\030\003 \001(\0132).gdsc.smlm.data.config.DataFilte" +
      "rSettings\0228\n\006search\030\004 \001(\0132(.gdsc.smlm.da" +
      "ta.config.RelativeParameter\0228\n\006border\030\005 " +
      "\001(\0132(.gdsc.smlm.data.config.RelativePara" +
      "meter\0229\n\007fitting\030\006 \001(\0132(.gdsc.smlm.data." +
      "config.RelativeParameter\022\032\n\022include_neig" +
      "hbours\030\007 \001(\010\022\"\n\032neighbour_height_thresho",
      "ld\030\010 \001(\001\022\033\n\023residuals_threshold\030\t \001(\001\022D\n" +
      "\022duplicate_distance\030\n \001(\0132(.gdsc.smlm.da" +
      "ta.config.RelativeParameter\022\026\n\016failures_" +
      "limit\030\013 \001(\005*e\n\tFitSolver\022\013\n\007LVM_LSE\020\000\022\013\n" +
      "\007LVM_MLE\020\001\022\014\n\010LVM_WLSE\020\002\022\007\n\003MLE\020\003\022\014\n\010FAS" +
      "T_MLE\020\004\022\031\n\025BACKTRACKING_FAST_MLE\020\005*\231\001\n\014S" +
      "earchMethod\022\022\n\016POWELL_BOUNDED\020\000\022\n\n\006POWEL" +
      "L\020\001\022\022\n\016POWELL_ADAPTER\020\002\022\n\n\006BOBYQA\020\003\022\t\n\005C" +
      "MAES\020\004\022\031\n\025CONJUGATE_GRADIENT_FR\020\005\022\031\n\025CON" +
      "JUGATE_GRADIENT_PR\020\006\022\010\n\004BFGS\020\007*6\n\016DataFi",
      "lterType\022\n\n\006SINGLE\020\000\022\016\n\nDIFFERENCE\020\001\022\010\n\004" +
      "JURY\020\002*Y\n\020DataFilterMethod\022\010\n\004MEAN\020\000\022\016\n\n" +
      "BLOCK_MEAN\020\001\022\021\n\rCIRCULAR_MEAN\020\002\022\014\n\010GAUSS" +
      "IAN\020\003\022\n\n\006MEDIAN\020\004*\263\002\n\024NoiseEstimatorMeth" +
      "od\022\016\n\nALL_PIXELS\020\000\022\021\n\rLOWEST_PIXELS\020\001\022%\n" +
      "!RESIDUALS_LEAST_MEDIAN_OF_SQUARES\020\002\022&\n\"" +
      "RESIDUALS_LEAST_TRIMMED_OF_SQUARES\020\003\022#\n\037" +
      "RESIDUALS_LEAST_MEAN_OF_SQUARES\020\004\022+\n\'QUI" +
      "CK_RESIDUALS_LEAST_MEDIAN_OF_SQUARES\020\005\022," +
      "\n(QUICK_RESIDUALS_LEAST_TRIMMED_OF_SQUAR",
      "ES\020\006\022)\n%QUICK_RESIDUALS_LEAST_MEAN_OF_SQ" +
      "UARES\020\007B\013B\tFitConfigb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          gdsc.smlm.data.config.PSFConfig.getDescriptor(),
          gdsc.smlm.data.config.CalibrationConfig.getDescriptor(),
        }, assigner);
    internal_static_gdsc_smlm_data_config_FitSolverSettings_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gdsc_smlm_data_config_FitSolverSettings_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gdsc_smlm_data_config_FitSolverSettings_descriptor,
        new java.lang.String[] { "FixedPsf", "DisableBackgroundFitting", "DisableSignalFitting", "FitSolver", "FixedIterations", "MaxIterations", "RelativeThreshold", "AbsoluteThreshold", "ParameterRelativeThreshold", "ParameterAbsoluteThreshold", "Lambda", "SearchMethod", "GradientLineMinimisation", "ModelCamera", "MaxFunctionEvaluations", "UseClamping", "UseDynamicClamping", "ClampValue", });
    internal_static_gdsc_smlm_data_config_FilterSettings_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_gdsc_smlm_data_config_FilterSettings_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gdsc_smlm_data_config_FilterSettings_descriptor,
        new java.lang.String[] { "ShiftFactor", "SignalStrength", "MinPhotons", "PrecisionThreshold", "PrecisionUsingBackground", "MinWidthFactor", "MaxWidthFactor", "DisableSimpleFilter", "SmartFilter", "SmartFilterString", });
    internal_static_gdsc_smlm_data_config_FitSettings_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_gdsc_smlm_data_config_FitSettings_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gdsc_smlm_data_config_FitSettings_descriptor,
        new java.lang.String[] { "Calibration", "Psf", "FitSolverSettings", "FilterSettings", });
    internal_static_gdsc_smlm_data_config_RelativeParameter_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_gdsc_smlm_data_config_RelativeParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gdsc_smlm_data_config_RelativeParameter_descriptor,
        new java.lang.String[] { "Value", "Absolute", });
    internal_static_gdsc_smlm_data_config_DataFilter_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_gdsc_smlm_data_config_DataFilter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gdsc_smlm_data_config_DataFilter_descriptor,
        new java.lang.String[] { "DataFilterMethod", "Parameter", });
    internal_static_gdsc_smlm_data_config_DataFilterSettings_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_gdsc_smlm_data_config_DataFilterSettings_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gdsc_smlm_data_config_DataFilterSettings_descriptor,
        new java.lang.String[] { "DataFilterType", "DataFilter", });
    internal_static_gdsc_smlm_data_config_FitEngineSettings_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_gdsc_smlm_data_config_FitEngineSettings_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gdsc_smlm_data_config_FitEngineSettings_descriptor,
        new java.lang.String[] { "FitSettings", "NoiseMethod", "DataFilterSettings", "Search", "Border", "Fitting", "IncludeNeighbours", "NeighbourHeightThreshold", "ResidualsThreshold", "DuplicateDistance", "FailuresLimit", });
    gdsc.smlm.data.config.PSFConfig.getDescriptor();
    gdsc.smlm.data.config.CalibrationConfig.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
