// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: psf_config.proto

package gdsc.smlm.data.config;

@SuppressWarnings({"unchecked", "unused"})
public final class PSFConfig {
  private PSFConfig() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * The type of Point Spread Function (PSF)
   * </pre>
   *
   * Protobuf enum {@code gdsc.smlm.data.config.PSFType}
   */
  public enum PSFType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Not available. Only the standard parameters are supported.
     * </pre>
     *
     * <code>PSF_TYPE_NA = 0;</code>
     */
    PSF_TYPE_NA(0),
    /**
     * <pre>
     * A 2D Gaussian with the same standard deviation in X and Y dimensions
     * </pre>
     *
     * <code>ONE_AXIS_GAUSSIAN_2D = 1;</code>
     */
    ONE_AXIS_GAUSSIAN_2D(1),
    /**
     * <pre>
     * A 2D Gaussian with standard deviations in X and Y dimensions
     * </pre>
     *
     * <code>TWO_AXIS_GAUSSIAN_2D = 2;</code>
     */
    TWO_AXIS_GAUSSIAN_2D(2),
    /**
     * <pre>
     * A 2D Gaussian with standard deviations in X and Y dimensions and a rotation angle
     * </pre>
     *
     * <code>TWO_AXIS_AND_THETA_GAUSSIAN_2D = 3;</code>
     */
    TWO_AXIS_AND_THETA_GAUSSIAN_2D(3),
    /**
     * <pre>
     * A 2D Gaussian with standard deviations in X and Y dimensions defined by the z-depth
     * </pre>
     *
     * <code>ASTIGMATIC_GAUSSIAN_2D = 4;</code>
     */
    ASTIGMATIC_GAUSSIAN_2D(4),
    /**
     * <pre>
     * A custom point spread function (PSF) 
     * </pre>
     *
     * <code>CUSTOM = 5;</code>
     */
    CUSTOM(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Not available. Only the standard parameters are supported.
     * </pre>
     *
     * <code>PSF_TYPE_NA = 0;</code>
     */
    public static final int PSF_TYPE_NA_VALUE = 0;
    /**
     * <pre>
     * A 2D Gaussian with the same standard deviation in X and Y dimensions
     * </pre>
     *
     * <code>ONE_AXIS_GAUSSIAN_2D = 1;</code>
     */
    public static final int ONE_AXIS_GAUSSIAN_2D_VALUE = 1;
    /**
     * <pre>
     * A 2D Gaussian with standard deviations in X and Y dimensions
     * </pre>
     *
     * <code>TWO_AXIS_GAUSSIAN_2D = 2;</code>
     */
    public static final int TWO_AXIS_GAUSSIAN_2D_VALUE = 2;
    /**
     * <pre>
     * A 2D Gaussian with standard deviations in X and Y dimensions and a rotation angle
     * </pre>
     *
     * <code>TWO_AXIS_AND_THETA_GAUSSIAN_2D = 3;</code>
     */
    public static final int TWO_AXIS_AND_THETA_GAUSSIAN_2D_VALUE = 3;
    /**
     * <pre>
     * A 2D Gaussian with standard deviations in X and Y dimensions defined by the z-depth
     * </pre>
     *
     * <code>ASTIGMATIC_GAUSSIAN_2D = 4;</code>
     */
    public static final int ASTIGMATIC_GAUSSIAN_2D_VALUE = 4;
    /**
     * <pre>
     * A custom point spread function (PSF) 
     * </pre>
     *
     * <code>CUSTOM = 5;</code>
     */
    public static final int CUSTOM_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PSFType valueOf(int value) {
      return forNumber(value);
    }

    public static PSFType forNumber(int value) {
      switch (value) {
        case 0: return PSF_TYPE_NA;
        case 1: return ONE_AXIS_GAUSSIAN_2D;
        case 2: return TWO_AXIS_GAUSSIAN_2D;
        case 3: return TWO_AXIS_AND_THETA_GAUSSIAN_2D;
        case 4: return ASTIGMATIC_GAUSSIAN_2D;
        case 5: return CUSTOM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PSFType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PSFType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PSFType>() {
            public PSFType findValueByNumber(int number) {
              return PSFType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.PSFConfig.getDescriptor().getEnumTypes().get(0);
    }

    private static final PSFType[] VALUES = values();

    public static PSFType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PSFType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gdsc.smlm.data.config.PSFType)
  }

  /**
   * <pre>
   * Define the type of units supported in the Point Spread Function (PSF)
   * </pre>
   *
   * Protobuf enum {@code gdsc.smlm.data.config.PSFParameterUnit}
   */
  public enum PSFParameterUnit
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>PSF_PARAMETER_UNIT_NA = 0;</code>
     */
    PSF_PARAMETER_UNIT_NA(0),
    /**
     * <pre>
     * The parameter describes a distance
     * </pre>
     *
     * <code>DISTANCE = 1;</code>
     */
    DISTANCE(1),
    /**
     * <pre>
     * The parameter describes an intensity
     * </pre>
     *
     * <code>INTENSITY = 2;</code>
     */
    INTENSITY(2),
    /**
     * <pre>
     * The parameter describes an angle
     * </pre>
     *
     * <code>ANGLE = 3;</code>
     */
    ANGLE(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>PSF_PARAMETER_UNIT_NA = 0;</code>
     */
    public static final int PSF_PARAMETER_UNIT_NA_VALUE = 0;
    /**
     * <pre>
     * The parameter describes a distance
     * </pre>
     *
     * <code>DISTANCE = 1;</code>
     */
    public static final int DISTANCE_VALUE = 1;
    /**
     * <pre>
     * The parameter describes an intensity
     * </pre>
     *
     * <code>INTENSITY = 2;</code>
     */
    public static final int INTENSITY_VALUE = 2;
    /**
     * <pre>
     * The parameter describes an angle
     * </pre>
     *
     * <code>ANGLE = 3;</code>
     */
    public static final int ANGLE_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PSFParameterUnit valueOf(int value) {
      return forNumber(value);
    }

    public static PSFParameterUnit forNumber(int value) {
      switch (value) {
        case 0: return PSF_PARAMETER_UNIT_NA;
        case 1: return DISTANCE;
        case 2: return INTENSITY;
        case 3: return ANGLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PSFParameterUnit>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PSFParameterUnit> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PSFParameterUnit>() {
            public PSFParameterUnit findValueByNumber(int number) {
              return PSFParameterUnit.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.PSFConfig.getDescriptor().getEnumTypes().get(1);
    }

    private static final PSFParameterUnit[] VALUES = values();

    public static PSFParameterUnit valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PSFParameterUnit(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:gdsc.smlm.data.config.PSFParameterUnit)
  }

  public interface PSFParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gdsc.smlm.data.config.PSFParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>.gdsc.smlm.data.config.PSFParameterUnit unit = 2;</code>
     */
    int getUnitValue();
    /**
     * <code>.gdsc.smlm.data.config.PSFParameterUnit unit = 2;</code>
     */
    gdsc.smlm.data.config.PSFConfig.PSFParameterUnit getUnit();

    /**
     * <code>double value = 3;</code>
     */
    double getValue();
  }
  /**
   * <pre>
   * Define the additional parameters of the Point Spread Function (PSF)
   * </pre>
   *
   * Protobuf type {@code gdsc.smlm.data.config.PSFParameter}
   */
  public  static final class PSFParameter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gdsc.smlm.data.config.PSFParameter)
      PSFParameterOrBuilder {
    // Use PSFParameter.newBuilder() to construct.
    private PSFParameter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PSFParameter() {
      name_ = "";
      unit_ = 0;
      value_ = 0D;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private PSFParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              unit_ = rawValue;
              break;
            }
            case 25: {

              value_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_PSFParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_PSFParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.PSFConfig.PSFParameter.class, gdsc.smlm.data.config.PSFConfig.PSFParameter.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int UNIT_FIELD_NUMBER = 2;
    private int unit_;
    /**
     * <code>.gdsc.smlm.data.config.PSFParameterUnit unit = 2;</code>
     */
    public int getUnitValue() {
      return unit_;
    }
    /**
     * <code>.gdsc.smlm.data.config.PSFParameterUnit unit = 2;</code>
     */
    public gdsc.smlm.data.config.PSFConfig.PSFParameterUnit getUnit() {
      gdsc.smlm.data.config.PSFConfig.PSFParameterUnit result = gdsc.smlm.data.config.PSFConfig.PSFParameterUnit.valueOf(unit_);
      return result == null ? gdsc.smlm.data.config.PSFConfig.PSFParameterUnit.UNRECOGNIZED : result;
    }

    public static final int VALUE_FIELD_NUMBER = 3;
    private double value_;
    /**
     * <code>double value = 3;</code>
     */
    public double getValue() {
      return value_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (unit_ != gdsc.smlm.data.config.PSFConfig.PSFParameterUnit.PSF_PARAMETER_UNIT_NA.getNumber()) {
        output.writeEnum(2, unit_);
      }
      if (value_ != 0D) {
        output.writeDouble(3, value_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (unit_ != gdsc.smlm.data.config.PSFConfig.PSFParameterUnit.PSF_PARAMETER_UNIT_NA.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, unit_);
      }
      if (value_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, value_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.PSFConfig.PSFParameter)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.PSFConfig.PSFParameter other = (gdsc.smlm.data.config.PSFConfig.PSFParameter) obj;

      boolean result = true;
      result = result && getName()
          .equals(other.getName());
      result = result && unit_ == other.unit_;
      result = result && (
          java.lang.Double.doubleToLongBits(getValue())
          == java.lang.Double.doubleToLongBits(
              other.getValue()));
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + UNIT_FIELD_NUMBER;
      hash = (53 * hash) + unit_;
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getValue()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.PSFConfig.PSFParameter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSFParameter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSFParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSFParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSFParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSFParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSFParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSFParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSFParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSFParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSFParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSFParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.PSFConfig.PSFParameter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the additional parameters of the Point Spread Function (PSF)
     * </pre>
     *
     * Protobuf type {@code gdsc.smlm.data.config.PSFParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gdsc.smlm.data.config.PSFParameter)
        gdsc.smlm.data.config.PSFConfig.PSFParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_PSFParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_PSFParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.PSFConfig.PSFParameter.class, gdsc.smlm.data.config.PSFConfig.PSFParameter.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.PSFConfig.PSFParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";

        unit_ = 0;

        value_ = 0D;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_PSFParameter_descriptor;
      }

      public gdsc.smlm.data.config.PSFConfig.PSFParameter getDefaultInstanceForType() {
        return gdsc.smlm.data.config.PSFConfig.PSFParameter.getDefaultInstance();
      }

      public gdsc.smlm.data.config.PSFConfig.PSFParameter build() {
        gdsc.smlm.data.config.PSFConfig.PSFParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.PSFConfig.PSFParameter buildPartial() {
        gdsc.smlm.data.config.PSFConfig.PSFParameter result = new gdsc.smlm.data.config.PSFConfig.PSFParameter(this);
        result.name_ = name_;
        result.unit_ = unit_;
        result.value_ = value_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.PSFConfig.PSFParameter) {
          return mergeFrom((gdsc.smlm.data.config.PSFConfig.PSFParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.PSFConfig.PSFParameter other) {
        if (other == gdsc.smlm.data.config.PSFConfig.PSFParameter.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.unit_ != 0) {
          setUnitValue(other.getUnitValue());
        }
        if (other.getValue() != 0D) {
          setValue(other.getValue());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.PSFConfig.PSFParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.PSFConfig.PSFParameter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string name = 1;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private int unit_ = 0;
      /**
       * <code>.gdsc.smlm.data.config.PSFParameterUnit unit = 2;</code>
       */
      public int getUnitValue() {
        return unit_;
      }
      /**
       * <code>.gdsc.smlm.data.config.PSFParameterUnit unit = 2;</code>
       */
      public Builder setUnitValue(int value) {
        unit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.gdsc.smlm.data.config.PSFParameterUnit unit = 2;</code>
       */
      public gdsc.smlm.data.config.PSFConfig.PSFParameterUnit getUnit() {
        gdsc.smlm.data.config.PSFConfig.PSFParameterUnit result = gdsc.smlm.data.config.PSFConfig.PSFParameterUnit.valueOf(unit_);
        return result == null ? gdsc.smlm.data.config.PSFConfig.PSFParameterUnit.UNRECOGNIZED : result;
      }
      /**
       * <code>.gdsc.smlm.data.config.PSFParameterUnit unit = 2;</code>
       */
      public Builder setUnit(gdsc.smlm.data.config.PSFConfig.PSFParameterUnit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        unit_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.gdsc.smlm.data.config.PSFParameterUnit unit = 2;</code>
       */
      public Builder clearUnit() {
        
        unit_ = 0;
        onChanged();
        return this;
      }

      private double value_ ;
      /**
       * <code>double value = 3;</code>
       */
      public double getValue() {
        return value_;
      }
      /**
       * <code>double value = 3;</code>
       */
      public Builder setValue(double value) {
        
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double value = 3;</code>
       */
      public Builder clearValue() {
        
        value_ = 0D;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:gdsc.smlm.data.config.PSFParameter)
    }

    // @@protoc_insertion_point(class_scope:gdsc.smlm.data.config.PSFParameter)
    private static final gdsc.smlm.data.config.PSFConfig.PSFParameter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.PSFConfig.PSFParameter();
    }

    public static gdsc.smlm.data.config.PSFConfig.PSFParameter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PSFParameter>
        PARSER = new com.google.protobuf.AbstractParser<PSFParameter>() {
      public PSFParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new PSFParameter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PSFParameter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PSFParameter> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.PSFConfig.PSFParameter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PSFOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gdsc.smlm.data.config.PSF)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The PSF type
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.PSFType psf_type = 1;</code>
     */
    int getPsfTypeValue();
    /**
     * <pre>
     * The PSF type
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.PSFType psf_type = 1;</code>
     */
    gdsc.smlm.data.config.PSFConfig.PSFType getPsfType();

    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
     */
    java.util.List<gdsc.smlm.data.config.PSFConfig.PSFParameter> 
        getParameterList();
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
     */
    gdsc.smlm.data.config.PSFConfig.PSFParameter getParameter(int index);
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
     */
    int getParameterCount();
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
     */
    java.util.List<? extends gdsc.smlm.data.config.PSFConfig.PSFParameterOrBuilder> 
        getParameterOrBuilderList();
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
     */
    gdsc.smlm.data.config.PSFConfig.PSFParameterOrBuilder getParameterOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Define the Point Spread Function (PSF)
   * </pre>
   *
   * Protobuf type {@code gdsc.smlm.data.config.PSF}
   */
  public  static final class PSF extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gdsc.smlm.data.config.PSF)
      PSFOrBuilder {
    // Use PSF.newBuilder() to construct.
    private PSF(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PSF() {
      psfType_ = 0;
      parameter_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private PSF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              psfType_ = rawValue;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                parameter_ = new java.util.ArrayList<gdsc.smlm.data.config.PSFConfig.PSFParameter>();
                mutable_bitField0_ |= 0x00000002;
              }
              parameter_.add(
                  input.readMessage(gdsc.smlm.data.config.PSFConfig.PSFParameter.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          parameter_ = java.util.Collections.unmodifiableList(parameter_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_PSF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_PSF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.PSFConfig.PSF.class, gdsc.smlm.data.config.PSFConfig.PSF.Builder.class);
    }

    private int bitField0_;
    public static final int PSF_TYPE_FIELD_NUMBER = 1;
    private int psfType_;
    /**
     * <pre>
     * The PSF type
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.PSFType psf_type = 1;</code>
     */
    public int getPsfTypeValue() {
      return psfType_;
    }
    /**
     * <pre>
     * The PSF type
     * </pre>
     *
     * <code>.gdsc.smlm.data.config.PSFType psf_type = 1;</code>
     */
    public gdsc.smlm.data.config.PSFConfig.PSFType getPsfType() {
      gdsc.smlm.data.config.PSFConfig.PSFType result = gdsc.smlm.data.config.PSFConfig.PSFType.valueOf(psfType_);
      return result == null ? gdsc.smlm.data.config.PSFConfig.PSFType.UNRECOGNIZED : result;
    }

    public static final int PARAMETER_FIELD_NUMBER = 2;
    private java.util.List<gdsc.smlm.data.config.PSFConfig.PSFParameter> parameter_;
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
     */
    public java.util.List<gdsc.smlm.data.config.PSFConfig.PSFParameter> getParameterList() {
      return parameter_;
    }
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
     */
    public java.util.List<? extends gdsc.smlm.data.config.PSFConfig.PSFParameterOrBuilder> 
        getParameterOrBuilderList() {
      return parameter_;
    }
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
     */
    public int getParameterCount() {
      return parameter_.size();
    }
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
     */
    public gdsc.smlm.data.config.PSFConfig.PSFParameter getParameter(int index) {
      return parameter_.get(index);
    }
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
     */
    public gdsc.smlm.data.config.PSFConfig.PSFParameterOrBuilder getParameterOrBuilder(
        int index) {
      return parameter_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (psfType_ != gdsc.smlm.data.config.PSFConfig.PSFType.PSF_TYPE_NA.getNumber()) {
        output.writeEnum(1, psfType_);
      }
      for (int i = 0; i < parameter_.size(); i++) {
        output.writeMessage(2, parameter_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (psfType_ != gdsc.smlm.data.config.PSFConfig.PSFType.PSF_TYPE_NA.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, psfType_);
      }
      for (int i = 0; i < parameter_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, parameter_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.PSFConfig.PSF)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.PSFConfig.PSF other = (gdsc.smlm.data.config.PSFConfig.PSF) obj;

      boolean result = true;
      result = result && psfType_ == other.psfType_;
      result = result && getParameterList()
          .equals(other.getParameterList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PSF_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + psfType_;
      if (getParameterCount() > 0) {
        hash = (37 * hash) + PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getParameterList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.PSFConfig.PSF parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSF parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.PSFConfig.PSF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.PSFConfig.PSF prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the Point Spread Function (PSF)
     * </pre>
     *
     * Protobuf type {@code gdsc.smlm.data.config.PSF}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gdsc.smlm.data.config.PSF)
        gdsc.smlm.data.config.PSFConfig.PSFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_PSF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_PSF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.PSFConfig.PSF.class, gdsc.smlm.data.config.PSFConfig.PSF.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.PSFConfig.PSF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getParameterFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        psfType_ = 0;

        if (parameterBuilder_ == null) {
          parameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          parameterBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_PSF_descriptor;
      }

      public gdsc.smlm.data.config.PSFConfig.PSF getDefaultInstanceForType() {
        return gdsc.smlm.data.config.PSFConfig.PSF.getDefaultInstance();
      }

      public gdsc.smlm.data.config.PSFConfig.PSF build() {
        gdsc.smlm.data.config.PSFConfig.PSF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.PSFConfig.PSF buildPartial() {
        gdsc.smlm.data.config.PSFConfig.PSF result = new gdsc.smlm.data.config.PSFConfig.PSF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.psfType_ = psfType_;
        if (parameterBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            parameter_ = java.util.Collections.unmodifiableList(parameter_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.parameter_ = parameter_;
        } else {
          result.parameter_ = parameterBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.PSFConfig.PSF) {
          return mergeFrom((gdsc.smlm.data.config.PSFConfig.PSF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.PSFConfig.PSF other) {
        if (other == gdsc.smlm.data.config.PSFConfig.PSF.getDefaultInstance()) return this;
        if (other.psfType_ != 0) {
          setPsfTypeValue(other.getPsfTypeValue());
        }
        if (parameterBuilder_ == null) {
          if (!other.parameter_.isEmpty()) {
            if (parameter_.isEmpty()) {
              parameter_ = other.parameter_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureParameterIsMutable();
              parameter_.addAll(other.parameter_);
            }
            onChanged();
          }
        } else {
          if (!other.parameter_.isEmpty()) {
            if (parameterBuilder_.isEmpty()) {
              parameterBuilder_.dispose();
              parameterBuilder_ = null;
              parameter_ = other.parameter_;
              bitField0_ = (bitField0_ & ~0x00000002);
              parameterBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getParameterFieldBuilder() : null;
            } else {
              parameterBuilder_.addAllMessages(other.parameter_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.PSFConfig.PSF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.PSFConfig.PSF) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int psfType_ = 0;
      /**
       * <pre>
       * The PSF type
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSFType psf_type = 1;</code>
       */
      public int getPsfTypeValue() {
        return psfType_;
      }
      /**
       * <pre>
       * The PSF type
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSFType psf_type = 1;</code>
       */
      public Builder setPsfTypeValue(int value) {
        psfType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The PSF type
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSFType psf_type = 1;</code>
       */
      public gdsc.smlm.data.config.PSFConfig.PSFType getPsfType() {
        gdsc.smlm.data.config.PSFConfig.PSFType result = gdsc.smlm.data.config.PSFConfig.PSFType.valueOf(psfType_);
        return result == null ? gdsc.smlm.data.config.PSFConfig.PSFType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The PSF type
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSFType psf_type = 1;</code>
       */
      public Builder setPsfType(gdsc.smlm.data.config.PSFConfig.PSFType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        psfType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The PSF type
       * </pre>
       *
       * <code>.gdsc.smlm.data.config.PSFType psf_type = 1;</code>
       */
      public Builder clearPsfType() {
        
        psfType_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<gdsc.smlm.data.config.PSFConfig.PSFParameter> parameter_ =
        java.util.Collections.emptyList();
      private void ensureParameterIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          parameter_ = new java.util.ArrayList<gdsc.smlm.data.config.PSFConfig.PSFParameter>(parameter_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          gdsc.smlm.data.config.PSFConfig.PSFParameter, gdsc.smlm.data.config.PSFConfig.PSFParameter.Builder, gdsc.smlm.data.config.PSFConfig.PSFParameterOrBuilder> parameterBuilder_;

      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public java.util.List<gdsc.smlm.data.config.PSFConfig.PSFParameter> getParameterList() {
        if (parameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(parameter_);
        } else {
          return parameterBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public int getParameterCount() {
        if (parameterBuilder_ == null) {
          return parameter_.size();
        } else {
          return parameterBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.PSFConfig.PSFParameter getParameter(int index) {
        if (parameterBuilder_ == null) {
          return parameter_.get(index);
        } else {
          return parameterBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public Builder setParameter(
          int index, gdsc.smlm.data.config.PSFConfig.PSFParameter value) {
        if (parameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParameterIsMutable();
          parameter_.set(index, value);
          onChanged();
        } else {
          parameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public Builder setParameter(
          int index, gdsc.smlm.data.config.PSFConfig.PSFParameter.Builder builderForValue) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          parameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public Builder addParameter(gdsc.smlm.data.config.PSFConfig.PSFParameter value) {
        if (parameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParameterIsMutable();
          parameter_.add(value);
          onChanged();
        } else {
          parameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public Builder addParameter(
          int index, gdsc.smlm.data.config.PSFConfig.PSFParameter value) {
        if (parameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParameterIsMutable();
          parameter_.add(index, value);
          onChanged();
        } else {
          parameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public Builder addParameter(
          gdsc.smlm.data.config.PSFConfig.PSFParameter.Builder builderForValue) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.add(builderForValue.build());
          onChanged();
        } else {
          parameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public Builder addParameter(
          int index, gdsc.smlm.data.config.PSFConfig.PSFParameter.Builder builderForValue) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          parameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public Builder addAllParameter(
          java.lang.Iterable<? extends gdsc.smlm.data.config.PSFConfig.PSFParameter> values) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, parameter_);
          onChanged();
        } else {
          parameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public Builder clearParameter() {
        if (parameterBuilder_ == null) {
          parameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          parameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public Builder removeParameter(int index) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.remove(index);
          onChanged();
        } else {
          parameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.PSFConfig.PSFParameter.Builder getParameterBuilder(
          int index) {
        return getParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.PSFConfig.PSFParameterOrBuilder getParameterOrBuilder(
          int index) {
        if (parameterBuilder_ == null) {
          return parameter_.get(index);  } else {
          return parameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public java.util.List<? extends gdsc.smlm.data.config.PSFConfig.PSFParameterOrBuilder> 
           getParameterOrBuilderList() {
        if (parameterBuilder_ != null) {
          return parameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(parameter_);
        }
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.PSFConfig.PSFParameter.Builder addParameterBuilder() {
        return getParameterFieldBuilder().addBuilder(
            gdsc.smlm.data.config.PSFConfig.PSFParameter.getDefaultInstance());
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.PSFConfig.PSFParameter.Builder addParameterBuilder(
          int index) {
        return getParameterFieldBuilder().addBuilder(
            index, gdsc.smlm.data.config.PSFConfig.PSFParameter.getDefaultInstance());
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .gdsc.smlm.data.config.PSFParameter parameter = 2;</code>
       */
      public java.util.List<gdsc.smlm.data.config.PSFConfig.PSFParameter.Builder> 
           getParameterBuilderList() {
        return getParameterFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          gdsc.smlm.data.config.PSFConfig.PSFParameter, gdsc.smlm.data.config.PSFConfig.PSFParameter.Builder, gdsc.smlm.data.config.PSFConfig.PSFParameterOrBuilder> 
          getParameterFieldBuilder() {
        if (parameterBuilder_ == null) {
          parameterBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              gdsc.smlm.data.config.PSFConfig.PSFParameter, gdsc.smlm.data.config.PSFConfig.PSFParameter.Builder, gdsc.smlm.data.config.PSFConfig.PSFParameterOrBuilder>(
                  parameter_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          parameter_ = null;
        }
        return parameterBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:gdsc.smlm.data.config.PSF)
    }

    // @@protoc_insertion_point(class_scope:gdsc.smlm.data.config.PSF)
    private static final gdsc.smlm.data.config.PSFConfig.PSF DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.PSFConfig.PSF();
    }

    public static gdsc.smlm.data.config.PSFConfig.PSF getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PSF>
        PARSER = new com.google.protobuf.AbstractParser<PSF>() {
      public PSF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new PSF(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PSF> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PSF> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.PSFConfig.PSF getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OffsetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gdsc.smlm.data.config.Offset)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>double cx = 2;</code>
     */
    double getCx();

    /**
     * <code>double cy = 3;</code>
     */
    double getCy();
  }
  /**
   * <pre>
   * Define the offset for slice alignment correction
   * </pre>
   *
   * Protobuf type {@code gdsc.smlm.data.config.Offset}
   */
  public  static final class Offset extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gdsc.smlm.data.config.Offset)
      OffsetOrBuilder {
    // Use Offset.newBuilder() to construct.
    private Offset(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Offset() {
      cx_ = 0D;
      cy_ = 0D;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Offset(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 17: {

              cx_ = input.readDouble();
              break;
            }
            case 25: {

              cy_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_Offset_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_Offset_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.PSFConfig.Offset.class, gdsc.smlm.data.config.PSFConfig.Offset.Builder.class);
    }

    public static final int CX_FIELD_NUMBER = 2;
    private double cx_;
    /**
     * <code>double cx = 2;</code>
     */
    public double getCx() {
      return cx_;
    }

    public static final int CY_FIELD_NUMBER = 3;
    private double cy_;
    /**
     * <code>double cy = 3;</code>
     */
    public double getCy() {
      return cy_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (cx_ != 0D) {
        output.writeDouble(2, cx_);
      }
      if (cy_ != 0D) {
        output.writeDouble(3, cy_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (cx_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, cx_);
      }
      if (cy_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, cy_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.PSFConfig.Offset)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.PSFConfig.Offset other = (gdsc.smlm.data.config.PSFConfig.Offset) obj;

      boolean result = true;
      result = result && (
          java.lang.Double.doubleToLongBits(getCx())
          == java.lang.Double.doubleToLongBits(
              other.getCx()));
      result = result && (
          java.lang.Double.doubleToLongBits(getCy())
          == java.lang.Double.doubleToLongBits(
              other.getCy()));
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CX_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCx()));
      hash = (37 * hash) + CY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCy()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.PSFConfig.Offset parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.PSFConfig.Offset parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.Offset parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.PSFConfig.Offset parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.Offset parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.PSFConfig.Offset parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.Offset parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.PSFConfig.Offset parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.Offset parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.PSFConfig.Offset parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.Offset parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.PSFConfig.Offset parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.PSFConfig.Offset prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the offset for slice alignment correction
     * </pre>
     *
     * Protobuf type {@code gdsc.smlm.data.config.Offset}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gdsc.smlm.data.config.Offset)
        gdsc.smlm.data.config.PSFConfig.OffsetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_Offset_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_Offset_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.PSFConfig.Offset.class, gdsc.smlm.data.config.PSFConfig.Offset.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.PSFConfig.Offset.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        cx_ = 0D;

        cy_ = 0D;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_Offset_descriptor;
      }

      public gdsc.smlm.data.config.PSFConfig.Offset getDefaultInstanceForType() {
        return gdsc.smlm.data.config.PSFConfig.Offset.getDefaultInstance();
      }

      public gdsc.smlm.data.config.PSFConfig.Offset build() {
        gdsc.smlm.data.config.PSFConfig.Offset result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.PSFConfig.Offset buildPartial() {
        gdsc.smlm.data.config.PSFConfig.Offset result = new gdsc.smlm.data.config.PSFConfig.Offset(this);
        result.cx_ = cx_;
        result.cy_ = cy_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.PSFConfig.Offset) {
          return mergeFrom((gdsc.smlm.data.config.PSFConfig.Offset)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.PSFConfig.Offset other) {
        if (other == gdsc.smlm.data.config.PSFConfig.Offset.getDefaultInstance()) return this;
        if (other.getCx() != 0D) {
          setCx(other.getCx());
        }
        if (other.getCy() != 0D) {
          setCy(other.getCy());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.PSFConfig.Offset parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.PSFConfig.Offset) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double cx_ ;
      /**
       * <code>double cx = 2;</code>
       */
      public double getCx() {
        return cx_;
      }
      /**
       * <code>double cx = 2;</code>
       */
      public Builder setCx(double value) {
        
        cx_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double cx = 2;</code>
       */
      public Builder clearCx() {
        
        cx_ = 0D;
        onChanged();
        return this;
      }

      private double cy_ ;
      /**
       * <code>double cy = 3;</code>
       */
      public double getCy() {
        return cy_;
      }
      /**
       * <code>double cy = 3;</code>
       */
      public Builder setCy(double value) {
        
        cy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double cy = 3;</code>
       */
      public Builder clearCy() {
        
        cy_ = 0D;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:gdsc.smlm.data.config.Offset)
    }

    // @@protoc_insertion_point(class_scope:gdsc.smlm.data.config.Offset)
    private static final gdsc.smlm.data.config.PSFConfig.Offset DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.PSFConfig.Offset();
    }

    public static gdsc.smlm.data.config.PSFConfig.Offset getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Offset>
        PARSER = new com.google.protobuf.AbstractParser<Offset>() {
      public Offset parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Offset(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Offset> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Offset> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.PSFConfig.Offset getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ImagePSFOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gdsc.smlm.data.config.ImagePSF)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The number of images in the PSF
     * </pre>
     *
     * <code>int32 image_count = 1;</code>
     */
    int getImageCount();

    /**
     * <pre>
     * The image containing the focal plane of the PSF
     * </pre>
     *
     * <code>int32 centre_image = 2;</code>
     */
    int getCentreImage();

    /**
     * <pre>
     * The size of the PSF pixel in nanometers
     * </pre>
     *
     * <code>double pixel_size = 3;</code>
     */
    double getPixelSize();

    /**
     * <pre>
     * The depth of the PSF pixel in nanometers
     * </pre>
     *
     * <code>double pixel_depth = 4;</code>
     */
    double getPixelDepth();

    /**
     * <pre>
     * The Full Width at Half Maxima (FWHM) in nanometers
     * </pre>
     *
     * <code>double fwhm = 5;</code>
     */
    double getFwhm();

    /**
     * <pre>
     * Notes about the PSF, added as Key-Value pairs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; notes = 6;</code>
     */
    int getNotesCount();
    /**
     * <pre>
     * Notes about the PSF, added as Key-Value pairs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; notes = 6;</code>
     */
    boolean containsNotes(
        java.lang.String key);
    /**
     * Use {@link #getNotesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getNotes();
    /**
     * <pre>
     * Notes about the PSF, added as Key-Value pairs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; notes = 6;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getNotesMap();
    /**
     * <pre>
     * Notes about the PSF, added as Key-Value pairs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; notes = 6;</code>
     */

    java.lang.String getNotesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * Notes about the PSF, added as Key-Value pairs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; notes = 6;</code>
     */

    java.lang.String getNotesOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * The alignment correction for each slice in pixels. This is the shift required to 
     * move the centre of the image to the centre of the PSF. The PSF centre may be 
     * determined by PSF fitting.
     * If missing then the alignment is assumed to be 0,0.
     * </pre>
     *
     * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
     */
    int getOffsetCount();
    /**
     * <pre>
     * The alignment correction for each slice in pixels. This is the shift required to 
     * move the centre of the image to the centre of the PSF. The PSF centre may be 
     * determined by PSF fitting.
     * If missing then the alignment is assumed to be 0,0.
     * </pre>
     *
     * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
     */
    boolean containsOffset(
        int key);
    /**
     * Use {@link #getOffsetMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset>
    getOffset();
    /**
     * <pre>
     * The alignment correction for each slice in pixels. This is the shift required to 
     * move the centre of the image to the centre of the PSF. The PSF centre may be 
     * determined by PSF fitting.
     * If missing then the alignment is assumed to be 0,0.
     * </pre>
     *
     * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
     */
    java.util.Map<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset>
    getOffsetMap();
    /**
     * <pre>
     * The alignment correction for each slice in pixels. This is the shift required to 
     * move the centre of the image to the centre of the PSF. The PSF centre may be 
     * determined by PSF fitting.
     * If missing then the alignment is assumed to be 0,0.
     * </pre>
     *
     * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
     */

    gdsc.smlm.data.config.PSFConfig.Offset getOffsetOrDefault(
        int key,
        gdsc.smlm.data.config.PSFConfig.Offset defaultValue);
    /**
     * <pre>
     * The alignment correction for each slice in pixels. This is the shift required to 
     * move the centre of the image to the centre of the PSF. The PSF centre may be 
     * determined by PSF fitting.
     * If missing then the alignment is assumed to be 0,0.
     * </pre>
     *
     * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
     */

    gdsc.smlm.data.config.PSFConfig.Offset getOffsetOrThrow(
        int key);
  }
  /**
   * <pre>
   * Define the settings of an observed Point Spread Function (PSF) represented as an image stack.
   * </pre>
   *
   * Protobuf type {@code gdsc.smlm.data.config.ImagePSF}
   */
  public  static final class ImagePSF extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gdsc.smlm.data.config.ImagePSF)
      ImagePSFOrBuilder {
    // Use ImagePSF.newBuilder() to construct.
    private ImagePSF(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ImagePSF() {
      imageCount_ = 0;
      centreImage_ = 0;
      pixelSize_ = 0D;
      pixelDepth_ = 0D;
      fwhm_ = 0D;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private ImagePSF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              imageCount_ = input.readInt32();
              break;
            }
            case 16: {

              centreImage_ = input.readInt32();
              break;
            }
            case 25: {

              pixelSize_ = input.readDouble();
              break;
            }
            case 33: {

              pixelDepth_ = input.readDouble();
              break;
            }
            case 41: {

              fwhm_ = input.readDouble();
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                notes_ = com.google.protobuf.MapField.newMapField(
                    NotesDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000020;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              notes__ = input.readMessage(
                  NotesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              notes_.getMutableMap().put(
                  notes__.getKey(), notes__.getValue());
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                offset_ = com.google.protobuf.MapField.newMapField(
                    OffsetDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000040;
              }
              com.google.protobuf.MapEntry<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset>
              offset__ = input.readMessage(
                  OffsetDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              offset_.getMutableMap().put(
                  offset__.getKey(), offset__.getValue());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_ImagePSF_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 6:
          return internalGetNotes();
        case 7:
          return internalGetOffset();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_ImagePSF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.PSFConfig.ImagePSF.class, gdsc.smlm.data.config.PSFConfig.ImagePSF.Builder.class);
    }

    private int bitField0_;
    public static final int IMAGE_COUNT_FIELD_NUMBER = 1;
    private int imageCount_;
    /**
     * <pre>
     * The number of images in the PSF
     * </pre>
     *
     * <code>int32 image_count = 1;</code>
     */
    public int getImageCount() {
      return imageCount_;
    }

    public static final int CENTRE_IMAGE_FIELD_NUMBER = 2;
    private int centreImage_;
    /**
     * <pre>
     * The image containing the focal plane of the PSF
     * </pre>
     *
     * <code>int32 centre_image = 2;</code>
     */
    public int getCentreImage() {
      return centreImage_;
    }

    public static final int PIXEL_SIZE_FIELD_NUMBER = 3;
    private double pixelSize_;
    /**
     * <pre>
     * The size of the PSF pixel in nanometers
     * </pre>
     *
     * <code>double pixel_size = 3;</code>
     */
    public double getPixelSize() {
      return pixelSize_;
    }

    public static final int PIXEL_DEPTH_FIELD_NUMBER = 4;
    private double pixelDepth_;
    /**
     * <pre>
     * The depth of the PSF pixel in nanometers
     * </pre>
     *
     * <code>double pixel_depth = 4;</code>
     */
    public double getPixelDepth() {
      return pixelDepth_;
    }

    public static final int FWHM_FIELD_NUMBER = 5;
    private double fwhm_;
    /**
     * <pre>
     * The Full Width at Half Maxima (FWHM) in nanometers
     * </pre>
     *
     * <code>double fwhm = 5;</code>
     */
    public double getFwhm() {
      return fwhm_;
    }

    public static final int NOTES_FIELD_NUMBER = 6;
    private static final class NotesDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_ImagePSF_NotesEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> notes_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetNotes() {
      if (notes_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            NotesDefaultEntryHolder.defaultEntry);
      }
      return notes_;
    }

    public int getNotesCount() {
      return internalGetNotes().getMap().size();
    }
    /**
     * <pre>
     * Notes about the PSF, added as Key-Value pairs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; notes = 6;</code>
     */

    public boolean containsNotes(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetNotes().getMap().containsKey(key);
    }
    /**
     * Use {@link #getNotesMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getNotes() {
      return getNotesMap();
    }
    /**
     * <pre>
     * Notes about the PSF, added as Key-Value pairs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; notes = 6;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getNotesMap() {
      return internalGetNotes().getMap();
    }
    /**
     * <pre>
     * Notes about the PSF, added as Key-Value pairs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; notes = 6;</code>
     */

    public java.lang.String getNotesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetNotes().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Notes about the PSF, added as Key-Value pairs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; notes = 6;</code>
     */

    public java.lang.String getNotesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetNotes().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int OFFSET_FIELD_NUMBER = 7;
    private static final class OffsetDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset>newDefaultInstance(
                  gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_ImagePSF_OffsetEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  gdsc.smlm.data.config.PSFConfig.Offset.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset> offset_;
    private com.google.protobuf.MapField<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset>
    internalGetOffset() {
      if (offset_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            OffsetDefaultEntryHolder.defaultEntry);
      }
      return offset_;
    }

    public int getOffsetCount() {
      return internalGetOffset().getMap().size();
    }
    /**
     * <pre>
     * The alignment correction for each slice in pixels. This is the shift required to 
     * move the centre of the image to the centre of the PSF. The PSF centre may be 
     * determined by PSF fitting.
     * If missing then the alignment is assumed to be 0,0.
     * </pre>
     *
     * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
     */

    public boolean containsOffset(
        int key) {
      
      return internalGetOffset().getMap().containsKey(key);
    }
    /**
     * Use {@link #getOffsetMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset> getOffset() {
      return getOffsetMap();
    }
    /**
     * <pre>
     * The alignment correction for each slice in pixels. This is the shift required to 
     * move the centre of the image to the centre of the PSF. The PSF centre may be 
     * determined by PSF fitting.
     * If missing then the alignment is assumed to be 0,0.
     * </pre>
     *
     * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
     */

    public java.util.Map<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset> getOffsetMap() {
      return internalGetOffset().getMap();
    }
    /**
     * <pre>
     * The alignment correction for each slice in pixels. This is the shift required to 
     * move the centre of the image to the centre of the PSF. The PSF centre may be 
     * determined by PSF fitting.
     * If missing then the alignment is assumed to be 0,0.
     * </pre>
     *
     * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
     */

    public gdsc.smlm.data.config.PSFConfig.Offset getOffsetOrDefault(
        int key,
        gdsc.smlm.data.config.PSFConfig.Offset defaultValue) {
      
      java.util.Map<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset> map =
          internalGetOffset().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * The alignment correction for each slice in pixels. This is the shift required to 
     * move the centre of the image to the centre of the PSF. The PSF centre may be 
     * determined by PSF fitting.
     * If missing then the alignment is assumed to be 0,0.
     * </pre>
     *
     * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
     */

    public gdsc.smlm.data.config.PSFConfig.Offset getOffsetOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset> map =
          internalGetOffset().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (imageCount_ != 0) {
        output.writeInt32(1, imageCount_);
      }
      if (centreImage_ != 0) {
        output.writeInt32(2, centreImage_);
      }
      if (pixelSize_ != 0D) {
        output.writeDouble(3, pixelSize_);
      }
      if (pixelDepth_ != 0D) {
        output.writeDouble(4, pixelDepth_);
      }
      if (fwhm_ != 0D) {
        output.writeDouble(5, fwhm_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetNotes(),
          NotesDefaultEntryHolder.defaultEntry,
          6);
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetOffset(),
          OffsetDefaultEntryHolder.defaultEntry,
          7);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (imageCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, imageCount_);
      }
      if (centreImage_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, centreImage_);
      }
      if (pixelSize_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, pixelSize_);
      }
      if (pixelDepth_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, pixelDepth_);
      }
      if (fwhm_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, fwhm_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetNotes().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        notes__ = NotesDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, notes__);
      }
      for (java.util.Map.Entry<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset> entry
           : internalGetOffset().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset>
        offset__ = OffsetDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, offset__);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.PSFConfig.ImagePSF)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.PSFConfig.ImagePSF other = (gdsc.smlm.data.config.PSFConfig.ImagePSF) obj;

      boolean result = true;
      result = result && (getImageCount()
          == other.getImageCount());
      result = result && (getCentreImage()
          == other.getCentreImage());
      result = result && (
          java.lang.Double.doubleToLongBits(getPixelSize())
          == java.lang.Double.doubleToLongBits(
              other.getPixelSize()));
      result = result && (
          java.lang.Double.doubleToLongBits(getPixelDepth())
          == java.lang.Double.doubleToLongBits(
              other.getPixelDepth()));
      result = result && (
          java.lang.Double.doubleToLongBits(getFwhm())
          == java.lang.Double.doubleToLongBits(
              other.getFwhm()));
      result = result && internalGetNotes().equals(
          other.internalGetNotes());
      result = result && internalGetOffset().equals(
          other.internalGetOffset());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + IMAGE_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getImageCount();
      hash = (37 * hash) + CENTRE_IMAGE_FIELD_NUMBER;
      hash = (53 * hash) + getCentreImage();
      hash = (37 * hash) + PIXEL_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPixelSize()));
      hash = (37 * hash) + PIXEL_DEPTH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPixelDepth()));
      hash = (37 * hash) + FWHM_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getFwhm()));
      if (!internalGetNotes().getMap().isEmpty()) {
        hash = (37 * hash) + NOTES_FIELD_NUMBER;
        hash = (53 * hash) + internalGetNotes().hashCode();
      }
      if (!internalGetOffset().getMap().isEmpty()) {
        hash = (37 * hash) + OFFSET_FIELD_NUMBER;
        hash = (53 * hash) + internalGetOffset().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.PSFConfig.ImagePSF parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.PSFConfig.ImagePSF parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.ImagePSF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.PSFConfig.ImagePSF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.ImagePSF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.PSFConfig.ImagePSF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.ImagePSF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.PSFConfig.ImagePSF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.ImagePSF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.PSFConfig.ImagePSF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.PSFConfig.ImagePSF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.PSFConfig.ImagePSF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.PSFConfig.ImagePSF prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the settings of an observed Point Spread Function (PSF) represented as an image stack.
     * </pre>
     *
     * Protobuf type {@code gdsc.smlm.data.config.ImagePSF}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gdsc.smlm.data.config.ImagePSF)
        gdsc.smlm.data.config.PSFConfig.ImagePSFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_ImagePSF_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetNotes();
          case 7:
            return internalGetOffset();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetMutableNotes();
          case 7:
            return internalGetMutableOffset();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_ImagePSF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.PSFConfig.ImagePSF.class, gdsc.smlm.data.config.PSFConfig.ImagePSF.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.PSFConfig.ImagePSF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        imageCount_ = 0;

        centreImage_ = 0;

        pixelSize_ = 0D;

        pixelDepth_ = 0D;

        fwhm_ = 0D;

        internalGetMutableNotes().clear();
        internalGetMutableOffset().clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.PSFConfig.internal_static_gdsc_smlm_data_config_ImagePSF_descriptor;
      }

      public gdsc.smlm.data.config.PSFConfig.ImagePSF getDefaultInstanceForType() {
        return gdsc.smlm.data.config.PSFConfig.ImagePSF.getDefaultInstance();
      }

      public gdsc.smlm.data.config.PSFConfig.ImagePSF build() {
        gdsc.smlm.data.config.PSFConfig.ImagePSF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.PSFConfig.ImagePSF buildPartial() {
        gdsc.smlm.data.config.PSFConfig.ImagePSF result = new gdsc.smlm.data.config.PSFConfig.ImagePSF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.imageCount_ = imageCount_;
        result.centreImage_ = centreImage_;
        result.pixelSize_ = pixelSize_;
        result.pixelDepth_ = pixelDepth_;
        result.fwhm_ = fwhm_;
        result.notes_ = internalGetNotes();
        result.notes_.makeImmutable();
        result.offset_ = internalGetOffset();
        result.offset_.makeImmutable();
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.PSFConfig.ImagePSF) {
          return mergeFrom((gdsc.smlm.data.config.PSFConfig.ImagePSF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.PSFConfig.ImagePSF other) {
        if (other == gdsc.smlm.data.config.PSFConfig.ImagePSF.getDefaultInstance()) return this;
        if (other.getImageCount() != 0) {
          setImageCount(other.getImageCount());
        }
        if (other.getCentreImage() != 0) {
          setCentreImage(other.getCentreImage());
        }
        if (other.getPixelSize() != 0D) {
          setPixelSize(other.getPixelSize());
        }
        if (other.getPixelDepth() != 0D) {
          setPixelDepth(other.getPixelDepth());
        }
        if (other.getFwhm() != 0D) {
          setFwhm(other.getFwhm());
        }
        internalGetMutableNotes().mergeFrom(
            other.internalGetNotes());
        internalGetMutableOffset().mergeFrom(
            other.internalGetOffset());
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.PSFConfig.ImagePSF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.PSFConfig.ImagePSF) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int imageCount_ ;
      /**
       * <pre>
       * The number of images in the PSF
       * </pre>
       *
       * <code>int32 image_count = 1;</code>
       */
      public int getImageCount() {
        return imageCount_;
      }
      /**
       * <pre>
       * The number of images in the PSF
       * </pre>
       *
       * <code>int32 image_count = 1;</code>
       */
      public Builder setImageCount(int value) {
        
        imageCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of images in the PSF
       * </pre>
       *
       * <code>int32 image_count = 1;</code>
       */
      public Builder clearImageCount() {
        
        imageCount_ = 0;
        onChanged();
        return this;
      }

      private int centreImage_ ;
      /**
       * <pre>
       * The image containing the focal plane of the PSF
       * </pre>
       *
       * <code>int32 centre_image = 2;</code>
       */
      public int getCentreImage() {
        return centreImage_;
      }
      /**
       * <pre>
       * The image containing the focal plane of the PSF
       * </pre>
       *
       * <code>int32 centre_image = 2;</code>
       */
      public Builder setCentreImage(int value) {
        
        centreImage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The image containing the focal plane of the PSF
       * </pre>
       *
       * <code>int32 centre_image = 2;</code>
       */
      public Builder clearCentreImage() {
        
        centreImage_ = 0;
        onChanged();
        return this;
      }

      private double pixelSize_ ;
      /**
       * <pre>
       * The size of the PSF pixel in nanometers
       * </pre>
       *
       * <code>double pixel_size = 3;</code>
       */
      public double getPixelSize() {
        return pixelSize_;
      }
      /**
       * <pre>
       * The size of the PSF pixel in nanometers
       * </pre>
       *
       * <code>double pixel_size = 3;</code>
       */
      public Builder setPixelSize(double value) {
        
        pixelSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The size of the PSF pixel in nanometers
       * </pre>
       *
       * <code>double pixel_size = 3;</code>
       */
      public Builder clearPixelSize() {
        
        pixelSize_ = 0D;
        onChanged();
        return this;
      }

      private double pixelDepth_ ;
      /**
       * <pre>
       * The depth of the PSF pixel in nanometers
       * </pre>
       *
       * <code>double pixel_depth = 4;</code>
       */
      public double getPixelDepth() {
        return pixelDepth_;
      }
      /**
       * <pre>
       * The depth of the PSF pixel in nanometers
       * </pre>
       *
       * <code>double pixel_depth = 4;</code>
       */
      public Builder setPixelDepth(double value) {
        
        pixelDepth_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The depth of the PSF pixel in nanometers
       * </pre>
       *
       * <code>double pixel_depth = 4;</code>
       */
      public Builder clearPixelDepth() {
        
        pixelDepth_ = 0D;
        onChanged();
        return this;
      }

      private double fwhm_ ;
      /**
       * <pre>
       * The Full Width at Half Maxima (FWHM) in nanometers
       * </pre>
       *
       * <code>double fwhm = 5;</code>
       */
      public double getFwhm() {
        return fwhm_;
      }
      /**
       * <pre>
       * The Full Width at Half Maxima (FWHM) in nanometers
       * </pre>
       *
       * <code>double fwhm = 5;</code>
       */
      public Builder setFwhm(double value) {
        
        fwhm_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Full Width at Half Maxima (FWHM) in nanometers
       * </pre>
       *
       * <code>double fwhm = 5;</code>
       */
      public Builder clearFwhm() {
        
        fwhm_ = 0D;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> notes_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetNotes() {
        if (notes_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              NotesDefaultEntryHolder.defaultEntry);
        }
        return notes_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableNotes() {
        onChanged();;
        if (notes_ == null) {
          notes_ = com.google.protobuf.MapField.newMapField(
              NotesDefaultEntryHolder.defaultEntry);
        }
        if (!notes_.isMutable()) {
          notes_ = notes_.copy();
        }
        return notes_;
      }

      public int getNotesCount() {
        return internalGetNotes().getMap().size();
      }
      /**
       * <pre>
       * Notes about the PSF, added as Key-Value pairs.
       * </pre>
       *
       * <code>map&lt;string, string&gt; notes = 6;</code>
       */

      public boolean containsNotes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetNotes().getMap().containsKey(key);
      }
      /**
       * Use {@link #getNotesMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getNotes() {
        return getNotesMap();
      }
      /**
       * <pre>
       * Notes about the PSF, added as Key-Value pairs.
       * </pre>
       *
       * <code>map&lt;string, string&gt; notes = 6;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getNotesMap() {
        return internalGetNotes().getMap();
      }
      /**
       * <pre>
       * Notes about the PSF, added as Key-Value pairs.
       * </pre>
       *
       * <code>map&lt;string, string&gt; notes = 6;</code>
       */

      public java.lang.String getNotesOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetNotes().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Notes about the PSF, added as Key-Value pairs.
       * </pre>
       *
       * <code>map&lt;string, string&gt; notes = 6;</code>
       */

      public java.lang.String getNotesOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetNotes().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearNotes() {
        internalGetMutableNotes().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Notes about the PSF, added as Key-Value pairs.
       * </pre>
       *
       * <code>map&lt;string, string&gt; notes = 6;</code>
       */

      public Builder removeNotes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableNotes().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableNotes() {
        return internalGetMutableNotes().getMutableMap();
      }
      /**
       * <pre>
       * Notes about the PSF, added as Key-Value pairs.
       * </pre>
       *
       * <code>map&lt;string, string&gt; notes = 6;</code>
       */
      public Builder putNotes(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableNotes().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * Notes about the PSF, added as Key-Value pairs.
       * </pre>
       *
       * <code>map&lt;string, string&gt; notes = 6;</code>
       */

      public Builder putAllNotes(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableNotes().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset> offset_;
      private com.google.protobuf.MapField<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset>
      internalGetOffset() {
        if (offset_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              OffsetDefaultEntryHolder.defaultEntry);
        }
        return offset_;
      }
      private com.google.protobuf.MapField<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset>
      internalGetMutableOffset() {
        onChanged();;
        if (offset_ == null) {
          offset_ = com.google.protobuf.MapField.newMapField(
              OffsetDefaultEntryHolder.defaultEntry);
        }
        if (!offset_.isMutable()) {
          offset_ = offset_.copy();
        }
        return offset_;
      }

      public int getOffsetCount() {
        return internalGetOffset().getMap().size();
      }
      /**
       * <pre>
       * The alignment correction for each slice in pixels. This is the shift required to 
       * move the centre of the image to the centre of the PSF. The PSF centre may be 
       * determined by PSF fitting.
       * If missing then the alignment is assumed to be 0,0.
       * </pre>
       *
       * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
       */

      public boolean containsOffset(
          int key) {
        
        return internalGetOffset().getMap().containsKey(key);
      }
      /**
       * Use {@link #getOffsetMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset> getOffset() {
        return getOffsetMap();
      }
      /**
       * <pre>
       * The alignment correction for each slice in pixels. This is the shift required to 
       * move the centre of the image to the centre of the PSF. The PSF centre may be 
       * determined by PSF fitting.
       * If missing then the alignment is assumed to be 0,0.
       * </pre>
       *
       * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
       */

      public java.util.Map<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset> getOffsetMap() {
        return internalGetOffset().getMap();
      }
      /**
       * <pre>
       * The alignment correction for each slice in pixels. This is the shift required to 
       * move the centre of the image to the centre of the PSF. The PSF centre may be 
       * determined by PSF fitting.
       * If missing then the alignment is assumed to be 0,0.
       * </pre>
       *
       * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
       */

      public gdsc.smlm.data.config.PSFConfig.Offset getOffsetOrDefault(
          int key,
          gdsc.smlm.data.config.PSFConfig.Offset defaultValue) {
        
        java.util.Map<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset> map =
            internalGetOffset().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * The alignment correction for each slice in pixels. This is the shift required to 
       * move the centre of the image to the centre of the PSF. The PSF centre may be 
       * determined by PSF fitting.
       * If missing then the alignment is assumed to be 0,0.
       * </pre>
       *
       * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
       */

      public gdsc.smlm.data.config.PSFConfig.Offset getOffsetOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset> map =
            internalGetOffset().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearOffset() {
        internalGetMutableOffset().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * The alignment correction for each slice in pixels. This is the shift required to 
       * move the centre of the image to the centre of the PSF. The PSF centre may be 
       * determined by PSF fitting.
       * If missing then the alignment is assumed to be 0,0.
       * </pre>
       *
       * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
       */

      public Builder removeOffset(
          int key) {
        
        internalGetMutableOffset().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset>
      getMutableOffset() {
        return internalGetMutableOffset().getMutableMap();
      }
      /**
       * <pre>
       * The alignment correction for each slice in pixels. This is the shift required to 
       * move the centre of the image to the centre of the PSF. The PSF centre may be 
       * determined by PSF fitting.
       * If missing then the alignment is assumed to be 0,0.
       * </pre>
       *
       * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
       */
      public Builder putOffset(
          int key,
          gdsc.smlm.data.config.PSFConfig.Offset value) {
        
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableOffset().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * The alignment correction for each slice in pixels. This is the shift required to 
       * move the centre of the image to the centre of the PSF. The PSF centre may be 
       * determined by PSF fitting.
       * If missing then the alignment is assumed to be 0,0.
       * </pre>
       *
       * <code>map&lt;int32, .gdsc.smlm.data.config.Offset&gt; offset = 7;</code>
       */

      public Builder putAllOffset(
          java.util.Map<java.lang.Integer, gdsc.smlm.data.config.PSFConfig.Offset> values) {
        internalGetMutableOffset().getMutableMap()
            .putAll(values);
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:gdsc.smlm.data.config.ImagePSF)
    }

    // @@protoc_insertion_point(class_scope:gdsc.smlm.data.config.ImagePSF)
    private static final gdsc.smlm.data.config.PSFConfig.ImagePSF DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.PSFConfig.ImagePSF();
    }

    public static gdsc.smlm.data.config.PSFConfig.ImagePSF getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ImagePSF>
        PARSER = new com.google.protobuf.AbstractParser<ImagePSF>() {
      public ImagePSF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ImagePSF(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ImagePSF> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ImagePSF> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.PSFConfig.ImagePSF getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gdsc_smlm_data_config_PSFParameter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gdsc_smlm_data_config_PSFParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gdsc_smlm_data_config_PSF_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gdsc_smlm_data_config_PSF_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gdsc_smlm_data_config_Offset_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gdsc_smlm_data_config_Offset_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gdsc_smlm_data_config_ImagePSF_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gdsc_smlm_data_config_ImagePSF_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gdsc_smlm_data_config_ImagePSF_NotesEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gdsc_smlm_data_config_ImagePSF_NotesEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gdsc_smlm_data_config_ImagePSF_OffsetEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gdsc_smlm_data_config_ImagePSF_OffsetEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020psf_config.proto\022\025gdsc.smlm.data.confi" +
      "g\"b\n\014PSFParameter\022\014\n\004name\030\001 \001(\t\0225\n\004unit\030" +
      "\002 \001(\0162\'.gdsc.smlm.data.config.PSFParamet" +
      "erUnit\022\r\n\005value\030\003 \001(\001\"o\n\003PSF\0220\n\010psf_type" +
      "\030\001 \001(\0162\036.gdsc.smlm.data.config.PSFType\0226" +
      "\n\tparameter\030\002 \003(\0132#.gdsc.smlm.data.confi" +
      "g.PSFParameter\" \n\006Offset\022\n\n\002cx\030\002 \001(\001\022\n\n\002" +
      "cy\030\003 \001(\001\"\340\002\n\010ImagePSF\022\023\n\013image_count\030\001 \001" +
      "(\005\022\024\n\014centre_image\030\002 \001(\005\022\022\n\npixel_size\030\003" +
      " \001(\001\022\023\n\013pixel_depth\030\004 \001(\001\022\014\n\004fwhm\030\005 \001(\001\022",
      "9\n\005notes\030\006 \003(\0132*.gdsc.smlm.data.config.I" +
      "magePSF.NotesEntry\022;\n\006offset\030\007 \003(\0132+.gds" +
      "c.smlm.data.config.ImagePSF.OffsetEntry\032" +
      ",\n\nNotesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(" +
      "\t:\0028\001\032L\n\013OffsetEntry\022\013\n\003key\030\001 \001(\005\022,\n\005val" +
      "ue\030\002 \001(\0132\035.gdsc.smlm.data.config.Offset:" +
      "\0028\001*\232\001\n\007PSFType\022\017\n\013PSF_TYPE_NA\020\000\022\030\n\024ONE_" +
      "AXIS_GAUSSIAN_2D\020\001\022\030\n\024TWO_AXIS_GAUSSIAN_" +
      "2D\020\002\022\"\n\036TWO_AXIS_AND_THETA_GAUSSIAN_2D\020\003" +
      "\022\032\n\026ASTIGMATIC_GAUSSIAN_2D\020\004\022\n\n\006CUSTOM\020\005",
      "*U\n\020PSFParameterUnit\022\031\n\025PSF_PARAMETER_UN" +
      "IT_NA\020\000\022\014\n\010DISTANCE\020\001\022\r\n\tINTENSITY\020\002\022\t\n\005" +
      "ANGLE\020\003B\013B\tPSFConfigb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_gdsc_smlm_data_config_PSFParameter_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gdsc_smlm_data_config_PSFParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gdsc_smlm_data_config_PSFParameter_descriptor,
        new java.lang.String[] { "Name", "Unit", "Value", });
    internal_static_gdsc_smlm_data_config_PSF_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_gdsc_smlm_data_config_PSF_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gdsc_smlm_data_config_PSF_descriptor,
        new java.lang.String[] { "PsfType", "Parameter", });
    internal_static_gdsc_smlm_data_config_Offset_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_gdsc_smlm_data_config_Offset_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gdsc_smlm_data_config_Offset_descriptor,
        new java.lang.String[] { "Cx", "Cy", });
    internal_static_gdsc_smlm_data_config_ImagePSF_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_gdsc_smlm_data_config_ImagePSF_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gdsc_smlm_data_config_ImagePSF_descriptor,
        new java.lang.String[] { "ImageCount", "CentreImage", "PixelSize", "PixelDepth", "Fwhm", "Notes", "Offset", });
    internal_static_gdsc_smlm_data_config_ImagePSF_NotesEntry_descriptor =
      internal_static_gdsc_smlm_data_config_ImagePSF_descriptor.getNestedTypes().get(0);
    internal_static_gdsc_smlm_data_config_ImagePSF_NotesEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gdsc_smlm_data_config_ImagePSF_NotesEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_gdsc_smlm_data_config_ImagePSF_OffsetEntry_descriptor =
      internal_static_gdsc_smlm_data_config_ImagePSF_descriptor.getNestedTypes().get(1);
    internal_static_gdsc_smlm_data_config_ImagePSF_OffsetEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gdsc_smlm_data_config_ImagePSF_OffsetEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
