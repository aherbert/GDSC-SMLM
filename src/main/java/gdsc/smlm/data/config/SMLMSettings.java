// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GDSC_SMLM.proto

package gdsc.smlm.data.config;

@SuppressWarnings({"unchecked", "unused"})
public final class SMLMSettings {
  private SMLMSettings() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * The type of Point Spread Function (PSF)
   * </pre>
   *
   * Protobuf enum {@code SMLM.PSFType}
   */
  public enum PSFType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Not available. Only the standard parameters are supported.
     * </pre>
     *
     * <code>PSF_TYPE_NA = 0;</code>
     */
    PSF_TYPE_NA(0),
    /**
     * <pre>
     * A 2D Gaussian with the same standard deviation in X and Y dimensions
     * </pre>
     *
     * <code>ONE_AXIS_GAUSSIAN_2D = 1;</code>
     */
    ONE_AXIS_GAUSSIAN_2D(1),
    /**
     * <pre>
     * A 2D Gaussian with standard deviations in X and Y dimensions
     * </pre>
     *
     * <code>TWO_AXIS_GAUSSIAN_2D = 2;</code>
     */
    TWO_AXIS_GAUSSIAN_2D(2),
    /**
     * <pre>
     * A 2D Gaussian with standard deviations in X and Y dimensions and a rotation angle
     * </pre>
     *
     * <code>TWO_AXIS_AND_THETA_GAUSSIAN_2D = 3;</code>
     */
    TWO_AXIS_AND_THETA_GAUSSIAN_2D(3),
    /**
     * <pre>
     * A 2D Gaussian with standard deviations in X and Y dimensions defined by the z-depth
     * </pre>
     *
     * <code>ASTIGMATIC_GAUSSIAN_2D = 4;</code>
     */
    ASTIGMATIC_GAUSSIAN_2D(4),
    /**
     * <pre>
     * A custom point spread function (PSF) 
     * </pre>
     *
     * <code>CUSTOM = 5;</code>
     */
    CUSTOM(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Not available. Only the standard parameters are supported.
     * </pre>
     *
     * <code>PSF_TYPE_NA = 0;</code>
     */
    public static final int PSF_TYPE_NA_VALUE = 0;
    /**
     * <pre>
     * A 2D Gaussian with the same standard deviation in X and Y dimensions
     * </pre>
     *
     * <code>ONE_AXIS_GAUSSIAN_2D = 1;</code>
     */
    public static final int ONE_AXIS_GAUSSIAN_2D_VALUE = 1;
    /**
     * <pre>
     * A 2D Gaussian with standard deviations in X and Y dimensions
     * </pre>
     *
     * <code>TWO_AXIS_GAUSSIAN_2D = 2;</code>
     */
    public static final int TWO_AXIS_GAUSSIAN_2D_VALUE = 2;
    /**
     * <pre>
     * A 2D Gaussian with standard deviations in X and Y dimensions and a rotation angle
     * </pre>
     *
     * <code>TWO_AXIS_AND_THETA_GAUSSIAN_2D = 3;</code>
     */
    public static final int TWO_AXIS_AND_THETA_GAUSSIAN_2D_VALUE = 3;
    /**
     * <pre>
     * A 2D Gaussian with standard deviations in X and Y dimensions defined by the z-depth
     * </pre>
     *
     * <code>ASTIGMATIC_GAUSSIAN_2D = 4;</code>
     */
    public static final int ASTIGMATIC_GAUSSIAN_2D_VALUE = 4;
    /**
     * <pre>
     * A custom point spread function (PSF) 
     * </pre>
     *
     * <code>CUSTOM = 5;</code>
     */
    public static final int CUSTOM_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PSFType valueOf(int value) {
      return forNumber(value);
    }

    public static PSFType forNumber(int value) {
      switch (value) {
        case 0: return PSF_TYPE_NA;
        case 1: return ONE_AXIS_GAUSSIAN_2D;
        case 2: return TWO_AXIS_GAUSSIAN_2D;
        case 3: return TWO_AXIS_AND_THETA_GAUSSIAN_2D;
        case 4: return ASTIGMATIC_GAUSSIAN_2D;
        case 5: return CUSTOM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PSFType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PSFType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PSFType>() {
            public PSFType findValueByNumber(int number) {
              return PSFType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.getDescriptor().getEnumTypes().get(0);
    }

    private static final PSFType[] VALUES = values();

    public static PSFType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PSFType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SMLM.PSFType)
  }

  /**
   * <pre>
   * Define the type of units supported in the Point Spread Function (PSF)
   * </pre>
   *
   * Protobuf enum {@code SMLM.PSFParameterUnit}
   */
  public enum PSFParameterUnit
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>PSF_PARAMETER_UNIT_NA = 0;</code>
     */
    PSF_PARAMETER_UNIT_NA(0),
    /**
     * <pre>
     * The parameter describes a distance
     * </pre>
     *
     * <code>DISTANCE = 1;</code>
     */
    DISTANCE(1),
    /**
     * <pre>
     * The parameter describes an intensity
     * </pre>
     *
     * <code>INTENSITY = 2;</code>
     */
    INTENSITY(2),
    /**
     * <pre>
     * The parameter describes an angle
     * </pre>
     *
     * <code>ANGLE = 3;</code>
     */
    ANGLE(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>PSF_PARAMETER_UNIT_NA = 0;</code>
     */
    public static final int PSF_PARAMETER_UNIT_NA_VALUE = 0;
    /**
     * <pre>
     * The parameter describes a distance
     * </pre>
     *
     * <code>DISTANCE = 1;</code>
     */
    public static final int DISTANCE_VALUE = 1;
    /**
     * <pre>
     * The parameter describes an intensity
     * </pre>
     *
     * <code>INTENSITY = 2;</code>
     */
    public static final int INTENSITY_VALUE = 2;
    /**
     * <pre>
     * The parameter describes an angle
     * </pre>
     *
     * <code>ANGLE = 3;</code>
     */
    public static final int ANGLE_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PSFParameterUnit valueOf(int value) {
      return forNumber(value);
    }

    public static PSFParameterUnit forNumber(int value) {
      switch (value) {
        case 0: return PSF_PARAMETER_UNIT_NA;
        case 1: return DISTANCE;
        case 2: return INTENSITY;
        case 3: return ANGLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PSFParameterUnit>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PSFParameterUnit> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PSFParameterUnit>() {
            public PSFParameterUnit findValueByNumber(int number) {
              return PSFParameterUnit.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.getDescriptor().getEnumTypes().get(1);
    }

    private static final PSFParameterUnit[] VALUES = values();

    public static PSFParameterUnit valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PSFParameterUnit(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SMLM.PSFParameterUnit)
  }

  /**
   * <pre>
   * The camera type
   * </pre>
   *
   * Protobuf enum {@code SMLM.CameraType}
   */
  public enum CameraType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>CAMERA_TYPE_NA = 0;</code>
     */
    CAMERA_TYPE_NA(0),
    /**
     * <pre>
     * Electron Multiplying Charge Coupled Device (EM CCD)
     * </pre>
     *
     * <code>EMCCD = 1;</code>
     */
    EMCCD(1),
    /**
     * <pre>
     * Charge Coupled Device (CCD)
     * </pre>
     *
     * <code>CCD = 2;</code>
     */
    CCD(2),
    /**
     * <pre>
     * Scientific Complementary Metal-Oxide-Semiconductor (sCMOS)
     * </pre>
     *
     * <code>SCMOS = 3;</code>
     */
    SCMOS(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>CAMERA_TYPE_NA = 0;</code>
     */
    public static final int CAMERA_TYPE_NA_VALUE = 0;
    /**
     * <pre>
     * Electron Multiplying Charge Coupled Device (EM CCD)
     * </pre>
     *
     * <code>EMCCD = 1;</code>
     */
    public static final int EMCCD_VALUE = 1;
    /**
     * <pre>
     * Charge Coupled Device (CCD)
     * </pre>
     *
     * <code>CCD = 2;</code>
     */
    public static final int CCD_VALUE = 2;
    /**
     * <pre>
     * Scientific Complementary Metal-Oxide-Semiconductor (sCMOS)
     * </pre>
     *
     * <code>SCMOS = 3;</code>
     */
    public static final int SCMOS_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CameraType valueOf(int value) {
      return forNumber(value);
    }

    public static CameraType forNumber(int value) {
      switch (value) {
        case 0: return CAMERA_TYPE_NA;
        case 1: return EMCCD;
        case 2: return CCD;
        case 3: return SCMOS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CameraType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CameraType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CameraType>() {
            public CameraType findValueByNumber(int number) {
              return CameraType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.getDescriptor().getEnumTypes().get(2);
    }

    private static final CameraType[] VALUES = values();

    public static CameraType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CameraType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SMLM.CameraType)
  }

  /**
   * <pre>
   * Unit for measuring distance
   * </pre>
   *
   * Protobuf enum {@code SMLM.DistanceUnit}
   */
  public enum DistanceUnit
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>DISTANCE_UNIT_NA = 0;</code>
     */
    DISTANCE_UNIT_NA(0),
    /**
     * <pre>
     * Camera pixel units
     * </pre>
     *
     * <code>PIXEL = 1;</code>
     */
    PIXEL(1),
    /**
     * <pre>
     * Micrometer units
     * </pre>
     *
     * <code>UM = 2;</code>
     */
    UM(2),
    /**
     * <pre>
     * Nanometer units
     * </pre>
     *
     * <code>NM = 3;</code>
     */
    NM(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>DISTANCE_UNIT_NA = 0;</code>
     */
    public static final int DISTANCE_UNIT_NA_VALUE = 0;
    /**
     * <pre>
     * Camera pixel units
     * </pre>
     *
     * <code>PIXEL = 1;</code>
     */
    public static final int PIXEL_VALUE = 1;
    /**
     * <pre>
     * Micrometer units
     * </pre>
     *
     * <code>UM = 2;</code>
     */
    public static final int UM_VALUE = 2;
    /**
     * <pre>
     * Nanometer units
     * </pre>
     *
     * <code>NM = 3;</code>
     */
    public static final int NM_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DistanceUnit valueOf(int value) {
      return forNumber(value);
    }

    public static DistanceUnit forNumber(int value) {
      switch (value) {
        case 0: return DISTANCE_UNIT_NA;
        case 1: return PIXEL;
        case 2: return UM;
        case 3: return NM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DistanceUnit>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DistanceUnit> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DistanceUnit>() {
            public DistanceUnit findValueByNumber(int number) {
              return DistanceUnit.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.getDescriptor().getEnumTypes().get(3);
    }

    private static final DistanceUnit[] VALUES = values();

    public static DistanceUnit valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DistanceUnit(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SMLM.DistanceUnit)
  }

  /**
   * <pre>
   * Unit for measuring intensity
   * </pre>
   *
   * Protobuf enum {@code SMLM.IntensityUnit}
   */
  public enum IntensityUnit
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>INTENSITY_UNIT_NA = 0;</code>
     */
    INTENSITY_UNIT_NA(0),
    /**
     * <pre>
     * Photon units
     * </pre>
     *
     * <code>PHOTON = 1;</code>
     */
    PHOTON(1),
    /**
     * <pre>
     * Camera count units
     * </pre>
     *
     * <code>COUNT = 2;</code>
     */
    COUNT(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>INTENSITY_UNIT_NA = 0;</code>
     */
    public static final int INTENSITY_UNIT_NA_VALUE = 0;
    /**
     * <pre>
     * Photon units
     * </pre>
     *
     * <code>PHOTON = 1;</code>
     */
    public static final int PHOTON_VALUE = 1;
    /**
     * <pre>
     * Camera count units
     * </pre>
     *
     * <code>COUNT = 2;</code>
     */
    public static final int COUNT_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static IntensityUnit valueOf(int value) {
      return forNumber(value);
    }

    public static IntensityUnit forNumber(int value) {
      switch (value) {
        case 0: return INTENSITY_UNIT_NA;
        case 1: return PHOTON;
        case 2: return COUNT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<IntensityUnit>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        IntensityUnit> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<IntensityUnit>() {
            public IntensityUnit findValueByNumber(int number) {
              return IntensityUnit.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.getDescriptor().getEnumTypes().get(4);
    }

    private static final IntensityUnit[] VALUES = values();

    public static IntensityUnit valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private IntensityUnit(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SMLM.IntensityUnit)
  }

  /**
   * <pre>
   * Unit for measuring angle
   * </pre>
   *
   * Protobuf enum {@code SMLM.AngleUnit}
   */
  public enum AngleUnit
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>ANGLE_UNIT_NA = 0;</code>
     */
    ANGLE_UNIT_NA(0),
    /**
     * <pre>
     * Radian units
     * </pre>
     *
     * <code>RADIAN = 1;</code>
     */
    RADIAN(1),
    /**
     * <pre>
     * Degree units
     * </pre>
     *
     * <code>DEGREE = 2;</code>
     */
    DEGREE(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>ANGLE_UNIT_NA = 0;</code>
     */
    public static final int ANGLE_UNIT_NA_VALUE = 0;
    /**
     * <pre>
     * Radian units
     * </pre>
     *
     * <code>RADIAN = 1;</code>
     */
    public static final int RADIAN_VALUE = 1;
    /**
     * <pre>
     * Degree units
     * </pre>
     *
     * <code>DEGREE = 2;</code>
     */
    public static final int DEGREE_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AngleUnit valueOf(int value) {
      return forNumber(value);
    }

    public static AngleUnit forNumber(int value) {
      switch (value) {
        case 0: return ANGLE_UNIT_NA;
        case 1: return RADIAN;
        case 2: return DEGREE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AngleUnit>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AngleUnit> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AngleUnit>() {
            public AngleUnit findValueByNumber(int number) {
              return AngleUnit.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.getDescriptor().getEnumTypes().get(5);
    }

    private static final AngleUnit[] VALUES = values();

    public static AngleUnit valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AngleUnit(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SMLM.AngleUnit)
  }

  /**
   * <pre>
   * Unit for measuring time
   * </pre>
   *
   * Protobuf enum {@code SMLM.TimeUnit}
   */
  public enum TimeUnit
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>TIME_UNIT_NA = 0;</code>
     */
    TIME_UNIT_NA(0),
    /**
     * <pre>
     * Frame units
     * </pre>
     *
     * <code>FRAME = 1;</code>
     */
    FRAME(1),
    /**
     * <pre>
     * Second units
     * </pre>
     *
     * <code>SECOND = 2;</code>
     */
    SECOND(2),
    /**
     * <pre>
     * Millisecond units
     * </pre>
     *
     * <code>MILLISECOND = 3;</code>
     */
    MILLISECOND(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Not available
     * </pre>
     *
     * <code>TIME_UNIT_NA = 0;</code>
     */
    public static final int TIME_UNIT_NA_VALUE = 0;
    /**
     * <pre>
     * Frame units
     * </pre>
     *
     * <code>FRAME = 1;</code>
     */
    public static final int FRAME_VALUE = 1;
    /**
     * <pre>
     * Second units
     * </pre>
     *
     * <code>SECOND = 2;</code>
     */
    public static final int SECOND_VALUE = 2;
    /**
     * <pre>
     * Millisecond units
     * </pre>
     *
     * <code>MILLISECOND = 3;</code>
     */
    public static final int MILLISECOND_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TimeUnit valueOf(int value) {
      return forNumber(value);
    }

    public static TimeUnit forNumber(int value) {
      switch (value) {
        case 0: return TIME_UNIT_NA;
        case 1: return FRAME;
        case 2: return SECOND;
        case 3: return MILLISECOND;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TimeUnit>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TimeUnit> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TimeUnit>() {
            public TimeUnit findValueByNumber(int number) {
              return TimeUnit.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.getDescriptor().getEnumTypes().get(6);
    }

    private static final TimeUnit[] VALUES = values();

    public static TimeUnit valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TimeUnit(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SMLM.TimeUnit)
  }

  public interface PSFParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SMLM.PSFParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>.SMLM.PSFParameterUnit unit = 2;</code>
     */
    int getUnitValue();
    /**
     * <code>.SMLM.PSFParameterUnit unit = 2;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.PSFParameterUnit getUnit();
  }
  /**
   * <pre>
   * Define the additional parameters of the Point Spread Function (PSF)
   * </pre>
   *
   * Protobuf type {@code SMLM.PSFParameter}
   */
  public  static final class PSFParameter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SMLM.PSFParameter)
      PSFParameterOrBuilder {
    // Use PSFParameter.newBuilder() to construct.
    private PSFParameter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PSFParameter() {
      name_ = "";
      unit_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private PSFParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              unit_ = rawValue;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSFParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSFParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.SMLMSettings.PSFParameter.class, gdsc.smlm.data.config.SMLMSettings.PSFParameter.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int UNIT_FIELD_NUMBER = 2;
    private int unit_;
    /**
     * <code>.SMLM.PSFParameterUnit unit = 2;</code>
     */
    public int getUnitValue() {
      return unit_;
    }
    /**
     * <code>.SMLM.PSFParameterUnit unit = 2;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.PSFParameterUnit getUnit() {
      gdsc.smlm.data.config.SMLMSettings.PSFParameterUnit result = gdsc.smlm.data.config.SMLMSettings.PSFParameterUnit.valueOf(unit_);
      return result == null ? gdsc.smlm.data.config.SMLMSettings.PSFParameterUnit.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (unit_ != gdsc.smlm.data.config.SMLMSettings.PSFParameterUnit.PSF_PARAMETER_UNIT_NA.getNumber()) {
        output.writeEnum(2, unit_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (unit_ != gdsc.smlm.data.config.SMLMSettings.PSFParameterUnit.PSF_PARAMETER_UNIT_NA.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, unit_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.SMLMSettings.PSFParameter)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.SMLMSettings.PSFParameter other = (gdsc.smlm.data.config.SMLMSettings.PSFParameter) obj;

      boolean result = true;
      result = result && getName()
          .equals(other.getName());
      result = result && unit_ == other.unit_;
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + UNIT_FIELD_NUMBER;
      hash = (53 * hash) + unit_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.SMLMSettings.PSFParameter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFParameter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.SMLMSettings.PSFParameter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the additional parameters of the Point Spread Function (PSF)
     * </pre>
     *
     * Protobuf type {@code SMLM.PSFParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SMLM.PSFParameter)
        gdsc.smlm.data.config.SMLMSettings.PSFParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSFParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSFParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.SMLMSettings.PSFParameter.class, gdsc.smlm.data.config.SMLMSettings.PSFParameter.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.SMLMSettings.PSFParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";

        unit_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSFParameter_descriptor;
      }

      public gdsc.smlm.data.config.SMLMSettings.PSFParameter getDefaultInstanceForType() {
        return gdsc.smlm.data.config.SMLMSettings.PSFParameter.getDefaultInstance();
      }

      public gdsc.smlm.data.config.SMLMSettings.PSFParameter build() {
        gdsc.smlm.data.config.SMLMSettings.PSFParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.SMLMSettings.PSFParameter buildPartial() {
        gdsc.smlm.data.config.SMLMSettings.PSFParameter result = new gdsc.smlm.data.config.SMLMSettings.PSFParameter(this);
        result.name_ = name_;
        result.unit_ = unit_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.SMLMSettings.PSFParameter) {
          return mergeFrom((gdsc.smlm.data.config.SMLMSettings.PSFParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.SMLMSettings.PSFParameter other) {
        if (other == gdsc.smlm.data.config.SMLMSettings.PSFParameter.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.unit_ != 0) {
          setUnitValue(other.getUnitValue());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.SMLMSettings.PSFParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.SMLMSettings.PSFParameter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string name = 1;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private int unit_ = 0;
      /**
       * <code>.SMLM.PSFParameterUnit unit = 2;</code>
       */
      public int getUnitValue() {
        return unit_;
      }
      /**
       * <code>.SMLM.PSFParameterUnit unit = 2;</code>
       */
      public Builder setUnitValue(int value) {
        unit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.SMLM.PSFParameterUnit unit = 2;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.PSFParameterUnit getUnit() {
        gdsc.smlm.data.config.SMLMSettings.PSFParameterUnit result = gdsc.smlm.data.config.SMLMSettings.PSFParameterUnit.valueOf(unit_);
        return result == null ? gdsc.smlm.data.config.SMLMSettings.PSFParameterUnit.UNRECOGNIZED : result;
      }
      /**
       * <code>.SMLM.PSFParameterUnit unit = 2;</code>
       */
      public Builder setUnit(gdsc.smlm.data.config.SMLMSettings.PSFParameterUnit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        unit_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.SMLM.PSFParameterUnit unit = 2;</code>
       */
      public Builder clearUnit() {
        
        unit_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:SMLM.PSFParameter)
    }

    // @@protoc_insertion_point(class_scope:SMLM.PSFParameter)
    private static final gdsc.smlm.data.config.SMLMSettings.PSFParameter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.SMLMSettings.PSFParameter();
    }

    public static gdsc.smlm.data.config.SMLMSettings.PSFParameter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PSFParameter>
        PARSER = new com.google.protobuf.AbstractParser<PSFParameter>() {
      public PSFParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new PSFParameter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PSFParameter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PSFParameter> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.SMLMSettings.PSFParameter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PSFOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SMLM.PSF)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The PSF type
     * </pre>
     *
     * <code>.SMLM.PSFType psfType = 1;</code>
     */
    int getPsfTypeValue();
    /**
     * <pre>
     * The PSF type
     * </pre>
     *
     * <code>.SMLM.PSFType psfType = 1;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.PSFType getPsfType();

    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
     */
    java.util.List<gdsc.smlm.data.config.SMLMSettings.PSFParameter> 
        getParameterList();
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.PSFParameter getParameter(int index);
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
     */
    int getParameterCount();
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
     */
    java.util.List<? extends gdsc.smlm.data.config.SMLMSettings.PSFParameterOrBuilder> 
        getParameterOrBuilderList();
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.PSFParameterOrBuilder getParameterOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Define the Point Spread Function (PSF)
   * </pre>
   *
   * Protobuf type {@code SMLM.PSF}
   */
  public  static final class PSF extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SMLM.PSF)
      PSFOrBuilder {
    // Use PSF.newBuilder() to construct.
    private PSF(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PSF() {
      psfType_ = 0;
      parameter_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private PSF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              psfType_ = rawValue;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                parameter_ = new java.util.ArrayList<gdsc.smlm.data.config.SMLMSettings.PSFParameter>();
                mutable_bitField0_ |= 0x00000002;
              }
              parameter_.add(
                  input.readMessage(gdsc.smlm.data.config.SMLMSettings.PSFParameter.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          parameter_ = java.util.Collections.unmodifiableList(parameter_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.SMLMSettings.PSF.class, gdsc.smlm.data.config.SMLMSettings.PSF.Builder.class);
    }

    private int bitField0_;
    public static final int PSFTYPE_FIELD_NUMBER = 1;
    private int psfType_;
    /**
     * <pre>
     * The PSF type
     * </pre>
     *
     * <code>.SMLM.PSFType psfType = 1;</code>
     */
    public int getPsfTypeValue() {
      return psfType_;
    }
    /**
     * <pre>
     * The PSF type
     * </pre>
     *
     * <code>.SMLM.PSFType psfType = 1;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.PSFType getPsfType() {
      gdsc.smlm.data.config.SMLMSettings.PSFType result = gdsc.smlm.data.config.SMLMSettings.PSFType.valueOf(psfType_);
      return result == null ? gdsc.smlm.data.config.SMLMSettings.PSFType.UNRECOGNIZED : result;
    }

    public static final int PARAMETER_FIELD_NUMBER = 2;
    private java.util.List<gdsc.smlm.data.config.SMLMSettings.PSFParameter> parameter_;
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
     */
    public java.util.List<gdsc.smlm.data.config.SMLMSettings.PSFParameter> getParameterList() {
      return parameter_;
    }
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
     */
    public java.util.List<? extends gdsc.smlm.data.config.SMLMSettings.PSFParameterOrBuilder> 
        getParameterOrBuilderList() {
      return parameter_;
    }
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
     */
    public int getParameterCount() {
      return parameter_.size();
    }
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.PSFParameter getParameter(int index) {
      return parameter_.get(index);
    }
    /**
     * <pre>
     * The names of the PSF parameters. The results are stored using the standard parameters of 
     * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
     * parameters array. The names of the non-standard parameters, in order, can be defined here.
     * </pre>
     *
     * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.PSFParameterOrBuilder getParameterOrBuilder(
        int index) {
      return parameter_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (psfType_ != gdsc.smlm.data.config.SMLMSettings.PSFType.PSF_TYPE_NA.getNumber()) {
        output.writeEnum(1, psfType_);
      }
      for (int i = 0; i < parameter_.size(); i++) {
        output.writeMessage(2, parameter_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (psfType_ != gdsc.smlm.data.config.SMLMSettings.PSFType.PSF_TYPE_NA.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, psfType_);
      }
      for (int i = 0; i < parameter_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, parameter_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.SMLMSettings.PSF)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.SMLMSettings.PSF other = (gdsc.smlm.data.config.SMLMSettings.PSF) obj;

      boolean result = true;
      result = result && psfType_ == other.psfType_;
      result = result && getParameterList()
          .equals(other.getParameterList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PSFTYPE_FIELD_NUMBER;
      hash = (53 * hash) + psfType_;
      if (getParameterCount() > 0) {
        hash = (37 * hash) + PARAMETER_FIELD_NUMBER;
        hash = (53 * hash) + getParameterList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.SMLMSettings.PSF parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSF parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.SMLMSettings.PSF prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the Point Spread Function (PSF)
     * </pre>
     *
     * Protobuf type {@code SMLM.PSF}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SMLM.PSF)
        gdsc.smlm.data.config.SMLMSettings.PSFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.SMLMSettings.PSF.class, gdsc.smlm.data.config.SMLMSettings.PSF.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.SMLMSettings.PSF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getParameterFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        psfType_ = 0;

        if (parameterBuilder_ == null) {
          parameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          parameterBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSF_descriptor;
      }

      public gdsc.smlm.data.config.SMLMSettings.PSF getDefaultInstanceForType() {
        return gdsc.smlm.data.config.SMLMSettings.PSF.getDefaultInstance();
      }

      public gdsc.smlm.data.config.SMLMSettings.PSF build() {
        gdsc.smlm.data.config.SMLMSettings.PSF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.SMLMSettings.PSF buildPartial() {
        gdsc.smlm.data.config.SMLMSettings.PSF result = new gdsc.smlm.data.config.SMLMSettings.PSF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.psfType_ = psfType_;
        if (parameterBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            parameter_ = java.util.Collections.unmodifiableList(parameter_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.parameter_ = parameter_;
        } else {
          result.parameter_ = parameterBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.SMLMSettings.PSF) {
          return mergeFrom((gdsc.smlm.data.config.SMLMSettings.PSF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.SMLMSettings.PSF other) {
        if (other == gdsc.smlm.data.config.SMLMSettings.PSF.getDefaultInstance()) return this;
        if (other.psfType_ != 0) {
          setPsfTypeValue(other.getPsfTypeValue());
        }
        if (parameterBuilder_ == null) {
          if (!other.parameter_.isEmpty()) {
            if (parameter_.isEmpty()) {
              parameter_ = other.parameter_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureParameterIsMutable();
              parameter_.addAll(other.parameter_);
            }
            onChanged();
          }
        } else {
          if (!other.parameter_.isEmpty()) {
            if (parameterBuilder_.isEmpty()) {
              parameterBuilder_.dispose();
              parameterBuilder_ = null;
              parameter_ = other.parameter_;
              bitField0_ = (bitField0_ & ~0x00000002);
              parameterBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getParameterFieldBuilder() : null;
            } else {
              parameterBuilder_.addAllMessages(other.parameter_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.SMLMSettings.PSF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.SMLMSettings.PSF) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int psfType_ = 0;
      /**
       * <pre>
       * The PSF type
       * </pre>
       *
       * <code>.SMLM.PSFType psfType = 1;</code>
       */
      public int getPsfTypeValue() {
        return psfType_;
      }
      /**
       * <pre>
       * The PSF type
       * </pre>
       *
       * <code>.SMLM.PSFType psfType = 1;</code>
       */
      public Builder setPsfTypeValue(int value) {
        psfType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The PSF type
       * </pre>
       *
       * <code>.SMLM.PSFType psfType = 1;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.PSFType getPsfType() {
        gdsc.smlm.data.config.SMLMSettings.PSFType result = gdsc.smlm.data.config.SMLMSettings.PSFType.valueOf(psfType_);
        return result == null ? gdsc.smlm.data.config.SMLMSettings.PSFType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The PSF type
       * </pre>
       *
       * <code>.SMLM.PSFType psfType = 1;</code>
       */
      public Builder setPsfType(gdsc.smlm.data.config.SMLMSettings.PSFType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        psfType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The PSF type
       * </pre>
       *
       * <code>.SMLM.PSFType psfType = 1;</code>
       */
      public Builder clearPsfType() {
        
        psfType_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<gdsc.smlm.data.config.SMLMSettings.PSFParameter> parameter_ =
        java.util.Collections.emptyList();
      private void ensureParameterIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          parameter_ = new java.util.ArrayList<gdsc.smlm.data.config.SMLMSettings.PSFParameter>(parameter_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          gdsc.smlm.data.config.SMLMSettings.PSFParameter, gdsc.smlm.data.config.SMLMSettings.PSFParameter.Builder, gdsc.smlm.data.config.SMLMSettings.PSFParameterOrBuilder> parameterBuilder_;

      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public java.util.List<gdsc.smlm.data.config.SMLMSettings.PSFParameter> getParameterList() {
        if (parameterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(parameter_);
        } else {
          return parameterBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public int getParameterCount() {
        if (parameterBuilder_ == null) {
          return parameter_.size();
        } else {
          return parameterBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.PSFParameter getParameter(int index) {
        if (parameterBuilder_ == null) {
          return parameter_.get(index);
        } else {
          return parameterBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public Builder setParameter(
          int index, gdsc.smlm.data.config.SMLMSettings.PSFParameter value) {
        if (parameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParameterIsMutable();
          parameter_.set(index, value);
          onChanged();
        } else {
          parameterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public Builder setParameter(
          int index, gdsc.smlm.data.config.SMLMSettings.PSFParameter.Builder builderForValue) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.set(index, builderForValue.build());
          onChanged();
        } else {
          parameterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public Builder addParameter(gdsc.smlm.data.config.SMLMSettings.PSFParameter value) {
        if (parameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParameterIsMutable();
          parameter_.add(value);
          onChanged();
        } else {
          parameterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public Builder addParameter(
          int index, gdsc.smlm.data.config.SMLMSettings.PSFParameter value) {
        if (parameterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParameterIsMutable();
          parameter_.add(index, value);
          onChanged();
        } else {
          parameterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public Builder addParameter(
          gdsc.smlm.data.config.SMLMSettings.PSFParameter.Builder builderForValue) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.add(builderForValue.build());
          onChanged();
        } else {
          parameterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public Builder addParameter(
          int index, gdsc.smlm.data.config.SMLMSettings.PSFParameter.Builder builderForValue) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.add(index, builderForValue.build());
          onChanged();
        } else {
          parameterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public Builder addAllParameter(
          java.lang.Iterable<? extends gdsc.smlm.data.config.SMLMSettings.PSFParameter> values) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, parameter_);
          onChanged();
        } else {
          parameterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public Builder clearParameter() {
        if (parameterBuilder_ == null) {
          parameter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          parameterBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public Builder removeParameter(int index) {
        if (parameterBuilder_ == null) {
          ensureParameterIsMutable();
          parameter_.remove(index);
          onChanged();
        } else {
          parameterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.PSFParameter.Builder getParameterBuilder(
          int index) {
        return getParameterFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.PSFParameterOrBuilder getParameterOrBuilder(
          int index) {
        if (parameterBuilder_ == null) {
          return parameter_.get(index);  } else {
          return parameterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public java.util.List<? extends gdsc.smlm.data.config.SMLMSettings.PSFParameterOrBuilder> 
           getParameterOrBuilderList() {
        if (parameterBuilder_ != null) {
          return parameterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(parameter_);
        }
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.PSFParameter.Builder addParameterBuilder() {
        return getParameterFieldBuilder().addBuilder(
            gdsc.smlm.data.config.SMLMSettings.PSFParameter.getDefaultInstance());
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.PSFParameter.Builder addParameterBuilder(
          int index) {
        return getParameterFieldBuilder().addBuilder(
            index, gdsc.smlm.data.config.SMLMSettings.PSFParameter.getDefaultInstance());
      }
      /**
       * <pre>
       * The names of the PSF parameters. The results are stored using the standard parameters of 
       * [background, intensity, x, y, z]. Any additional parameters can be stored in the results
       * parameters array. The names of the non-standard parameters, in order, can be defined here.
       * </pre>
       *
       * <code>repeated .SMLM.PSFParameter parameter = 2;</code>
       */
      public java.util.List<gdsc.smlm.data.config.SMLMSettings.PSFParameter.Builder> 
           getParameterBuilderList() {
        return getParameterFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          gdsc.smlm.data.config.SMLMSettings.PSFParameter, gdsc.smlm.data.config.SMLMSettings.PSFParameter.Builder, gdsc.smlm.data.config.SMLMSettings.PSFParameterOrBuilder> 
          getParameterFieldBuilder() {
        if (parameterBuilder_ == null) {
          parameterBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              gdsc.smlm.data.config.SMLMSettings.PSFParameter, gdsc.smlm.data.config.SMLMSettings.PSFParameter.Builder, gdsc.smlm.data.config.SMLMSettings.PSFParameterOrBuilder>(
                  parameter_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          parameter_ = null;
        }
        return parameterBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:SMLM.PSF)
    }

    // @@protoc_insertion_point(class_scope:SMLM.PSF)
    private static final gdsc.smlm.data.config.SMLMSettings.PSF DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.SMLMSettings.PSF();
    }

    public static gdsc.smlm.data.config.SMLMSettings.PSF getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PSF>
        PARSER = new com.google.protobuf.AbstractParser<PSF>() {
      public PSF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new PSF(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PSF> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PSF> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.SMLMSettings.PSF getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DistanceCalibrationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SMLM.DistanceCalibration)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The distance unit.
     * </pre>
     *
     * <code>.SMLM.DistanceUnit unit = 1;</code>
     */
    int getUnitValue();
    /**
     * <pre>
     * The distance unit.
     * </pre>
     *
     * <code>.SMLM.DistanceUnit unit = 1;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.DistanceUnit getUnit();

    /**
     * <pre>
     * The camera pixel size in nanometers.
     * </pre>
     *
     * <code>double nmPerPixel = 2;</code>
     */
    double getNmPerPixel();
  }
  /**
   * <pre>
   * Define the calibration for distance
   * </pre>
   *
   * Protobuf type {@code SMLM.DistanceCalibration}
   */
  public  static final class DistanceCalibration extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SMLM.DistanceCalibration)
      DistanceCalibrationOrBuilder {
    // Use DistanceCalibration.newBuilder() to construct.
    private DistanceCalibration(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DistanceCalibration() {
      unit_ = 0;
      nmPerPixel_ = 0D;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private DistanceCalibration(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              unit_ = rawValue;
              break;
            }
            case 17: {

              nmPerPixel_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_DistanceCalibration_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_DistanceCalibration_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.class, gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.Builder.class);
    }

    public static final int UNIT_FIELD_NUMBER = 1;
    private int unit_;
    /**
     * <pre>
     * The distance unit.
     * </pre>
     *
     * <code>.SMLM.DistanceUnit unit = 1;</code>
     */
    public int getUnitValue() {
      return unit_;
    }
    /**
     * <pre>
     * The distance unit.
     * </pre>
     *
     * <code>.SMLM.DistanceUnit unit = 1;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.DistanceUnit getUnit() {
      gdsc.smlm.data.config.SMLMSettings.DistanceUnit result = gdsc.smlm.data.config.SMLMSettings.DistanceUnit.valueOf(unit_);
      return result == null ? gdsc.smlm.data.config.SMLMSettings.DistanceUnit.UNRECOGNIZED : result;
    }

    public static final int NMPERPIXEL_FIELD_NUMBER = 2;
    private double nmPerPixel_;
    /**
     * <pre>
     * The camera pixel size in nanometers.
     * </pre>
     *
     * <code>double nmPerPixel = 2;</code>
     */
    public double getNmPerPixel() {
      return nmPerPixel_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (unit_ != gdsc.smlm.data.config.SMLMSettings.DistanceUnit.DISTANCE_UNIT_NA.getNumber()) {
        output.writeEnum(1, unit_);
      }
      if (nmPerPixel_ != 0D) {
        output.writeDouble(2, nmPerPixel_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (unit_ != gdsc.smlm.data.config.SMLMSettings.DistanceUnit.DISTANCE_UNIT_NA.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, unit_);
      }
      if (nmPerPixel_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, nmPerPixel_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.SMLMSettings.DistanceCalibration)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.SMLMSettings.DistanceCalibration other = (gdsc.smlm.data.config.SMLMSettings.DistanceCalibration) obj;

      boolean result = true;
      result = result && unit_ == other.unit_;
      result = result && (
          java.lang.Double.doubleToLongBits(getNmPerPixel())
          == java.lang.Double.doubleToLongBits(
              other.getNmPerPixel()));
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UNIT_FIELD_NUMBER;
      hash = (53 * hash) + unit_;
      hash = (37 * hash) + NMPERPIXEL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getNmPerPixel()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.SMLMSettings.DistanceCalibration parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.DistanceCalibration parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.DistanceCalibration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.DistanceCalibration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.DistanceCalibration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.DistanceCalibration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.DistanceCalibration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.DistanceCalibration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.DistanceCalibration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.DistanceCalibration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.DistanceCalibration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.DistanceCalibration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.SMLMSettings.DistanceCalibration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the calibration for distance
     * </pre>
     *
     * Protobuf type {@code SMLM.DistanceCalibration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SMLM.DistanceCalibration)
        gdsc.smlm.data.config.SMLMSettings.DistanceCalibrationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_DistanceCalibration_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_DistanceCalibration_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.class, gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        unit_ = 0;

        nmPerPixel_ = 0D;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_DistanceCalibration_descriptor;
      }

      public gdsc.smlm.data.config.SMLMSettings.DistanceCalibration getDefaultInstanceForType() {
        return gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.getDefaultInstance();
      }

      public gdsc.smlm.data.config.SMLMSettings.DistanceCalibration build() {
        gdsc.smlm.data.config.SMLMSettings.DistanceCalibration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.SMLMSettings.DistanceCalibration buildPartial() {
        gdsc.smlm.data.config.SMLMSettings.DistanceCalibration result = new gdsc.smlm.data.config.SMLMSettings.DistanceCalibration(this);
        result.unit_ = unit_;
        result.nmPerPixel_ = nmPerPixel_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.SMLMSettings.DistanceCalibration) {
          return mergeFrom((gdsc.smlm.data.config.SMLMSettings.DistanceCalibration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.SMLMSettings.DistanceCalibration other) {
        if (other == gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.getDefaultInstance()) return this;
        if (other.unit_ != 0) {
          setUnitValue(other.getUnitValue());
        }
        if (other.getNmPerPixel() != 0D) {
          setNmPerPixel(other.getNmPerPixel());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.SMLMSettings.DistanceCalibration parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.SMLMSettings.DistanceCalibration) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int unit_ = 0;
      /**
       * <pre>
       * The distance unit.
       * </pre>
       *
       * <code>.SMLM.DistanceUnit unit = 1;</code>
       */
      public int getUnitValue() {
        return unit_;
      }
      /**
       * <pre>
       * The distance unit.
       * </pre>
       *
       * <code>.SMLM.DistanceUnit unit = 1;</code>
       */
      public Builder setUnitValue(int value) {
        unit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The distance unit.
       * </pre>
       *
       * <code>.SMLM.DistanceUnit unit = 1;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.DistanceUnit getUnit() {
        gdsc.smlm.data.config.SMLMSettings.DistanceUnit result = gdsc.smlm.data.config.SMLMSettings.DistanceUnit.valueOf(unit_);
        return result == null ? gdsc.smlm.data.config.SMLMSettings.DistanceUnit.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The distance unit.
       * </pre>
       *
       * <code>.SMLM.DistanceUnit unit = 1;</code>
       */
      public Builder setUnit(gdsc.smlm.data.config.SMLMSettings.DistanceUnit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        unit_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The distance unit.
       * </pre>
       *
       * <code>.SMLM.DistanceUnit unit = 1;</code>
       */
      public Builder clearUnit() {
        
        unit_ = 0;
        onChanged();
        return this;
      }

      private double nmPerPixel_ ;
      /**
       * <pre>
       * The camera pixel size in nanometers.
       * </pre>
       *
       * <code>double nmPerPixel = 2;</code>
       */
      public double getNmPerPixel() {
        return nmPerPixel_;
      }
      /**
       * <pre>
       * The camera pixel size in nanometers.
       * </pre>
       *
       * <code>double nmPerPixel = 2;</code>
       */
      public Builder setNmPerPixel(double value) {
        
        nmPerPixel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The camera pixel size in nanometers.
       * </pre>
       *
       * <code>double nmPerPixel = 2;</code>
       */
      public Builder clearNmPerPixel() {
        
        nmPerPixel_ = 0D;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:SMLM.DistanceCalibration)
    }

    // @@protoc_insertion_point(class_scope:SMLM.DistanceCalibration)
    private static final gdsc.smlm.data.config.SMLMSettings.DistanceCalibration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.SMLMSettings.DistanceCalibration();
    }

    public static gdsc.smlm.data.config.SMLMSettings.DistanceCalibration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DistanceCalibration>
        PARSER = new com.google.protobuf.AbstractParser<DistanceCalibration>() {
      public DistanceCalibration parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DistanceCalibration(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DistanceCalibration> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DistanceCalibration> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.SMLMSettings.DistanceCalibration getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TimeCalibrationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SMLM.TimeCalibration)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The time unit. This is currently unused as it is assumed the time in the results 
     * is in frames.
     * </pre>
     *
     * <code>.SMLM.TimeUnit unit = 1;</code>
     */
    int getUnitValue();
    /**
     * <pre>
     * The time unit. This is currently unused as it is assumed the time in the results 
     * is in frames.
     * </pre>
     *
     * <code>.SMLM.TimeUnit unit = 1;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.TimeUnit getUnit();

    /**
     * <pre>
     * The exposure time in milliseconds per frame.
     * </pre>
     *
     * <code>double exposureTime = 2;</code>
     */
    double getExposureTime();
  }
  /**
   * <pre>
   * Define the calibration for time
   * </pre>
   *
   * Protobuf type {@code SMLM.TimeCalibration}
   */
  public  static final class TimeCalibration extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SMLM.TimeCalibration)
      TimeCalibrationOrBuilder {
    // Use TimeCalibration.newBuilder() to construct.
    private TimeCalibration(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TimeCalibration() {
      unit_ = 0;
      exposureTime_ = 0D;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private TimeCalibration(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              unit_ = rawValue;
              break;
            }
            case 17: {

              exposureTime_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_TimeCalibration_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_TimeCalibration_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.SMLMSettings.TimeCalibration.class, gdsc.smlm.data.config.SMLMSettings.TimeCalibration.Builder.class);
    }

    public static final int UNIT_FIELD_NUMBER = 1;
    private int unit_;
    /**
     * <pre>
     * The time unit. This is currently unused as it is assumed the time in the results 
     * is in frames.
     * </pre>
     *
     * <code>.SMLM.TimeUnit unit = 1;</code>
     */
    public int getUnitValue() {
      return unit_;
    }
    /**
     * <pre>
     * The time unit. This is currently unused as it is assumed the time in the results 
     * is in frames.
     * </pre>
     *
     * <code>.SMLM.TimeUnit unit = 1;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.TimeUnit getUnit() {
      gdsc.smlm.data.config.SMLMSettings.TimeUnit result = gdsc.smlm.data.config.SMLMSettings.TimeUnit.valueOf(unit_);
      return result == null ? gdsc.smlm.data.config.SMLMSettings.TimeUnit.UNRECOGNIZED : result;
    }

    public static final int EXPOSURETIME_FIELD_NUMBER = 2;
    private double exposureTime_;
    /**
     * <pre>
     * The exposure time in milliseconds per frame.
     * </pre>
     *
     * <code>double exposureTime = 2;</code>
     */
    public double getExposureTime() {
      return exposureTime_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (unit_ != gdsc.smlm.data.config.SMLMSettings.TimeUnit.TIME_UNIT_NA.getNumber()) {
        output.writeEnum(1, unit_);
      }
      if (exposureTime_ != 0D) {
        output.writeDouble(2, exposureTime_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (unit_ != gdsc.smlm.data.config.SMLMSettings.TimeUnit.TIME_UNIT_NA.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, unit_);
      }
      if (exposureTime_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, exposureTime_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.SMLMSettings.TimeCalibration)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.SMLMSettings.TimeCalibration other = (gdsc.smlm.data.config.SMLMSettings.TimeCalibration) obj;

      boolean result = true;
      result = result && unit_ == other.unit_;
      result = result && (
          java.lang.Double.doubleToLongBits(getExposureTime())
          == java.lang.Double.doubleToLongBits(
              other.getExposureTime()));
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UNIT_FIELD_NUMBER;
      hash = (53 * hash) + unit_;
      hash = (37 * hash) + EXPOSURETIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getExposureTime()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.SMLMSettings.TimeCalibration parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.TimeCalibration parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.TimeCalibration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.TimeCalibration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.TimeCalibration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.TimeCalibration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.TimeCalibration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.TimeCalibration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.TimeCalibration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.TimeCalibration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.TimeCalibration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.TimeCalibration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.SMLMSettings.TimeCalibration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the calibration for time
     * </pre>
     *
     * Protobuf type {@code SMLM.TimeCalibration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SMLM.TimeCalibration)
        gdsc.smlm.data.config.SMLMSettings.TimeCalibrationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_TimeCalibration_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_TimeCalibration_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.SMLMSettings.TimeCalibration.class, gdsc.smlm.data.config.SMLMSettings.TimeCalibration.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.SMLMSettings.TimeCalibration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        unit_ = 0;

        exposureTime_ = 0D;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_TimeCalibration_descriptor;
      }

      public gdsc.smlm.data.config.SMLMSettings.TimeCalibration getDefaultInstanceForType() {
        return gdsc.smlm.data.config.SMLMSettings.TimeCalibration.getDefaultInstance();
      }

      public gdsc.smlm.data.config.SMLMSettings.TimeCalibration build() {
        gdsc.smlm.data.config.SMLMSettings.TimeCalibration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.SMLMSettings.TimeCalibration buildPartial() {
        gdsc.smlm.data.config.SMLMSettings.TimeCalibration result = new gdsc.smlm.data.config.SMLMSettings.TimeCalibration(this);
        result.unit_ = unit_;
        result.exposureTime_ = exposureTime_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.SMLMSettings.TimeCalibration) {
          return mergeFrom((gdsc.smlm.data.config.SMLMSettings.TimeCalibration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.SMLMSettings.TimeCalibration other) {
        if (other == gdsc.smlm.data.config.SMLMSettings.TimeCalibration.getDefaultInstance()) return this;
        if (other.unit_ != 0) {
          setUnitValue(other.getUnitValue());
        }
        if (other.getExposureTime() != 0D) {
          setExposureTime(other.getExposureTime());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.SMLMSettings.TimeCalibration parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.SMLMSettings.TimeCalibration) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int unit_ = 0;
      /**
       * <pre>
       * The time unit. This is currently unused as it is assumed the time in the results 
       * is in frames.
       * </pre>
       *
       * <code>.SMLM.TimeUnit unit = 1;</code>
       */
      public int getUnitValue() {
        return unit_;
      }
      /**
       * <pre>
       * The time unit. This is currently unused as it is assumed the time in the results 
       * is in frames.
       * </pre>
       *
       * <code>.SMLM.TimeUnit unit = 1;</code>
       */
      public Builder setUnitValue(int value) {
        unit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The time unit. This is currently unused as it is assumed the time in the results 
       * is in frames.
       * </pre>
       *
       * <code>.SMLM.TimeUnit unit = 1;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.TimeUnit getUnit() {
        gdsc.smlm.data.config.SMLMSettings.TimeUnit result = gdsc.smlm.data.config.SMLMSettings.TimeUnit.valueOf(unit_);
        return result == null ? gdsc.smlm.data.config.SMLMSettings.TimeUnit.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The time unit. This is currently unused as it is assumed the time in the results 
       * is in frames.
       * </pre>
       *
       * <code>.SMLM.TimeUnit unit = 1;</code>
       */
      public Builder setUnit(gdsc.smlm.data.config.SMLMSettings.TimeUnit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        unit_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The time unit. This is currently unused as it is assumed the time in the results 
       * is in frames.
       * </pre>
       *
       * <code>.SMLM.TimeUnit unit = 1;</code>
       */
      public Builder clearUnit() {
        
        unit_ = 0;
        onChanged();
        return this;
      }

      private double exposureTime_ ;
      /**
       * <pre>
       * The exposure time in milliseconds per frame.
       * </pre>
       *
       * <code>double exposureTime = 2;</code>
       */
      public double getExposureTime() {
        return exposureTime_;
      }
      /**
       * <pre>
       * The exposure time in milliseconds per frame.
       * </pre>
       *
       * <code>double exposureTime = 2;</code>
       */
      public Builder setExposureTime(double value) {
        
        exposureTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The exposure time in milliseconds per frame.
       * </pre>
       *
       * <code>double exposureTime = 2;</code>
       */
      public Builder clearExposureTime() {
        
        exposureTime_ = 0D;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:SMLM.TimeCalibration)
    }

    // @@protoc_insertion_point(class_scope:SMLM.TimeCalibration)
    private static final gdsc.smlm.data.config.SMLMSettings.TimeCalibration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.SMLMSettings.TimeCalibration();
    }

    public static gdsc.smlm.data.config.SMLMSettings.TimeCalibration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TimeCalibration>
        PARSER = new com.google.protobuf.AbstractParser<TimeCalibration>() {
      public TimeCalibration parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new TimeCalibration(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TimeCalibration> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TimeCalibration> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.SMLMSettings.TimeCalibration getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IntensityCalibrationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SMLM.IntensityCalibration)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The intensity unit.
     * </pre>
     *
     * <code>.SMLM.IntensityUnit unit = 1;</code>
     */
    int getUnitValue();
    /**
     * <pre>
     * The intensity unit.
     * </pre>
     *
     * <code>.SMLM.IntensityUnit unit = 1;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.IntensityUnit getUnit();

    /**
     * <pre>
     * The gain (Count/photon). Can be used to convert the signal in Analogue-to-Digital
     * count units (Counts) to photons.
     * </pre>
     *
     * <code>double gain = 2;</code>
     */
    double getGain();
  }
  /**
   * Protobuf type {@code SMLM.IntensityCalibration}
   */
  public  static final class IntensityCalibration extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SMLM.IntensityCalibration)
      IntensityCalibrationOrBuilder {
    // Use IntensityCalibration.newBuilder() to construct.
    private IntensityCalibration(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IntensityCalibration() {
      unit_ = 0;
      gain_ = 0D;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private IntensityCalibration(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              unit_ = rawValue;
              break;
            }
            case 17: {

              gain_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_IntensityCalibration_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_IntensityCalibration_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.class, gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.Builder.class);
    }

    public static final int UNIT_FIELD_NUMBER = 1;
    private int unit_;
    /**
     * <pre>
     * The intensity unit.
     * </pre>
     *
     * <code>.SMLM.IntensityUnit unit = 1;</code>
     */
    public int getUnitValue() {
      return unit_;
    }
    /**
     * <pre>
     * The intensity unit.
     * </pre>
     *
     * <code>.SMLM.IntensityUnit unit = 1;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.IntensityUnit getUnit() {
      gdsc.smlm.data.config.SMLMSettings.IntensityUnit result = gdsc.smlm.data.config.SMLMSettings.IntensityUnit.valueOf(unit_);
      return result == null ? gdsc.smlm.data.config.SMLMSettings.IntensityUnit.UNRECOGNIZED : result;
    }

    public static final int GAIN_FIELD_NUMBER = 2;
    private double gain_;
    /**
     * <pre>
     * The gain (Count/photon). Can be used to convert the signal in Analogue-to-Digital
     * count units (Counts) to photons.
     * </pre>
     *
     * <code>double gain = 2;</code>
     */
    public double getGain() {
      return gain_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (unit_ != gdsc.smlm.data.config.SMLMSettings.IntensityUnit.INTENSITY_UNIT_NA.getNumber()) {
        output.writeEnum(1, unit_);
      }
      if (gain_ != 0D) {
        output.writeDouble(2, gain_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (unit_ != gdsc.smlm.data.config.SMLMSettings.IntensityUnit.INTENSITY_UNIT_NA.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, unit_);
      }
      if (gain_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, gain_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.SMLMSettings.IntensityCalibration)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.SMLMSettings.IntensityCalibration other = (gdsc.smlm.data.config.SMLMSettings.IntensityCalibration) obj;

      boolean result = true;
      result = result && unit_ == other.unit_;
      result = result && (
          java.lang.Double.doubleToLongBits(getGain())
          == java.lang.Double.doubleToLongBits(
              other.getGain()));
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UNIT_FIELD_NUMBER;
      hash = (53 * hash) + unit_;
      hash = (37 * hash) + GAIN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getGain()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.SMLMSettings.IntensityCalibration parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.IntensityCalibration parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.IntensityCalibration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.IntensityCalibration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.IntensityCalibration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.IntensityCalibration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.IntensityCalibration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.IntensityCalibration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.IntensityCalibration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.IntensityCalibration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.IntensityCalibration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.IntensityCalibration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.SMLMSettings.IntensityCalibration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SMLM.IntensityCalibration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SMLM.IntensityCalibration)
        gdsc.smlm.data.config.SMLMSettings.IntensityCalibrationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_IntensityCalibration_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_IntensityCalibration_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.class, gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        unit_ = 0;

        gain_ = 0D;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_IntensityCalibration_descriptor;
      }

      public gdsc.smlm.data.config.SMLMSettings.IntensityCalibration getDefaultInstanceForType() {
        return gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.getDefaultInstance();
      }

      public gdsc.smlm.data.config.SMLMSettings.IntensityCalibration build() {
        gdsc.smlm.data.config.SMLMSettings.IntensityCalibration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.SMLMSettings.IntensityCalibration buildPartial() {
        gdsc.smlm.data.config.SMLMSettings.IntensityCalibration result = new gdsc.smlm.data.config.SMLMSettings.IntensityCalibration(this);
        result.unit_ = unit_;
        result.gain_ = gain_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.SMLMSettings.IntensityCalibration) {
          return mergeFrom((gdsc.smlm.data.config.SMLMSettings.IntensityCalibration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.SMLMSettings.IntensityCalibration other) {
        if (other == gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.getDefaultInstance()) return this;
        if (other.unit_ != 0) {
          setUnitValue(other.getUnitValue());
        }
        if (other.getGain() != 0D) {
          setGain(other.getGain());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.SMLMSettings.IntensityCalibration parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.SMLMSettings.IntensityCalibration) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int unit_ = 0;
      /**
       * <pre>
       * The intensity unit.
       * </pre>
       *
       * <code>.SMLM.IntensityUnit unit = 1;</code>
       */
      public int getUnitValue() {
        return unit_;
      }
      /**
       * <pre>
       * The intensity unit.
       * </pre>
       *
       * <code>.SMLM.IntensityUnit unit = 1;</code>
       */
      public Builder setUnitValue(int value) {
        unit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The intensity unit.
       * </pre>
       *
       * <code>.SMLM.IntensityUnit unit = 1;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.IntensityUnit getUnit() {
        gdsc.smlm.data.config.SMLMSettings.IntensityUnit result = gdsc.smlm.data.config.SMLMSettings.IntensityUnit.valueOf(unit_);
        return result == null ? gdsc.smlm.data.config.SMLMSettings.IntensityUnit.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The intensity unit.
       * </pre>
       *
       * <code>.SMLM.IntensityUnit unit = 1;</code>
       */
      public Builder setUnit(gdsc.smlm.data.config.SMLMSettings.IntensityUnit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        unit_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The intensity unit.
       * </pre>
       *
       * <code>.SMLM.IntensityUnit unit = 1;</code>
       */
      public Builder clearUnit() {
        
        unit_ = 0;
        onChanged();
        return this;
      }

      private double gain_ ;
      /**
       * <pre>
       * The gain (Count/photon). Can be used to convert the signal in Analogue-to-Digital
       * count units (Counts) to photons.
       * </pre>
       *
       * <code>double gain = 2;</code>
       */
      public double getGain() {
        return gain_;
      }
      /**
       * <pre>
       * The gain (Count/photon). Can be used to convert the signal in Analogue-to-Digital
       * count units (Counts) to photons.
       * </pre>
       *
       * <code>double gain = 2;</code>
       */
      public Builder setGain(double value) {
        
        gain_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The gain (Count/photon). Can be used to convert the signal in Analogue-to-Digital
       * count units (Counts) to photons.
       * </pre>
       *
       * <code>double gain = 2;</code>
       */
      public Builder clearGain() {
        
        gain_ = 0D;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:SMLM.IntensityCalibration)
    }

    // @@protoc_insertion_point(class_scope:SMLM.IntensityCalibration)
    private static final gdsc.smlm.data.config.SMLMSettings.IntensityCalibration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.SMLMSettings.IntensityCalibration();
    }

    public static gdsc.smlm.data.config.SMLMSettings.IntensityCalibration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IntensityCalibration>
        PARSER = new com.google.protobuf.AbstractParser<IntensityCalibration>() {
      public IntensityCalibration parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new IntensityCalibration(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IntensityCalibration> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IntensityCalibration> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.SMLMSettings.IntensityCalibration getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CameraCalibrationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SMLM.CameraCalibration)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The camera type.
     * </pre>
     *
     * <code>.SMLM.CameraType cameraType = 1;</code>
     */
    int getCameraTypeValue();
    /**
     * <pre>
     * The camera type.
     * </pre>
     *
     * <code>.SMLM.CameraType cameraType = 1;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.CameraType getCameraType();

    /**
     * <pre>
     * The camera Gaussian read noise (in Counts).
     * </pre>
     *
     * <code>double readNoise = 2;</code>
     */
    double getReadNoise();

    /**
     * <pre>
     * The camera bias (in Counts) 
     * </pre>
     *
     * <code>double bias = 3;</code>
     */
    double getBias();

    /**
     * <pre>
     * The camera amplification (Count/electron) used when modelling a microscope camera.
     * Note that the camera noise model assumes that electrons are converted to ADUs by 
     * amplification that is not perfect (i.e. it has noise). The amplification is equal 
     * to the gain (Count/photon) divided by the quantum efficiency (electron/photon).
     * </pre>
     *
     * <code>double amplification = 4;</code>
     */
    double getAmplification();
  }
  /**
   * <pre>
   * Define the camera calibration
   * </pre>
   *
   * Protobuf type {@code SMLM.CameraCalibration}
   */
  public  static final class CameraCalibration extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SMLM.CameraCalibration)
      CameraCalibrationOrBuilder {
    // Use CameraCalibration.newBuilder() to construct.
    private CameraCalibration(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CameraCalibration() {
      cameraType_ = 0;
      readNoise_ = 0D;
      bias_ = 0D;
      amplification_ = 0D;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private CameraCalibration(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              cameraType_ = rawValue;
              break;
            }
            case 17: {

              readNoise_ = input.readDouble();
              break;
            }
            case 25: {

              bias_ = input.readDouble();
              break;
            }
            case 33: {

              amplification_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_CameraCalibration_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_CameraCalibration_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.SMLMSettings.CameraCalibration.class, gdsc.smlm.data.config.SMLMSettings.CameraCalibration.Builder.class);
    }

    public static final int CAMERATYPE_FIELD_NUMBER = 1;
    private int cameraType_;
    /**
     * <pre>
     * The camera type.
     * </pre>
     *
     * <code>.SMLM.CameraType cameraType = 1;</code>
     */
    public int getCameraTypeValue() {
      return cameraType_;
    }
    /**
     * <pre>
     * The camera type.
     * </pre>
     *
     * <code>.SMLM.CameraType cameraType = 1;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.CameraType getCameraType() {
      gdsc.smlm.data.config.SMLMSettings.CameraType result = gdsc.smlm.data.config.SMLMSettings.CameraType.valueOf(cameraType_);
      return result == null ? gdsc.smlm.data.config.SMLMSettings.CameraType.UNRECOGNIZED : result;
    }

    public static final int READNOISE_FIELD_NUMBER = 2;
    private double readNoise_;
    /**
     * <pre>
     * The camera Gaussian read noise (in Counts).
     * </pre>
     *
     * <code>double readNoise = 2;</code>
     */
    public double getReadNoise() {
      return readNoise_;
    }

    public static final int BIAS_FIELD_NUMBER = 3;
    private double bias_;
    /**
     * <pre>
     * The camera bias (in Counts) 
     * </pre>
     *
     * <code>double bias = 3;</code>
     */
    public double getBias() {
      return bias_;
    }

    public static final int AMPLIFICATION_FIELD_NUMBER = 4;
    private double amplification_;
    /**
     * <pre>
     * The camera amplification (Count/electron) used when modelling a microscope camera.
     * Note that the camera noise model assumes that electrons are converted to ADUs by 
     * amplification that is not perfect (i.e. it has noise). The amplification is equal 
     * to the gain (Count/photon) divided by the quantum efficiency (electron/photon).
     * </pre>
     *
     * <code>double amplification = 4;</code>
     */
    public double getAmplification() {
      return amplification_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (cameraType_ != gdsc.smlm.data.config.SMLMSettings.CameraType.CAMERA_TYPE_NA.getNumber()) {
        output.writeEnum(1, cameraType_);
      }
      if (readNoise_ != 0D) {
        output.writeDouble(2, readNoise_);
      }
      if (bias_ != 0D) {
        output.writeDouble(3, bias_);
      }
      if (amplification_ != 0D) {
        output.writeDouble(4, amplification_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (cameraType_ != gdsc.smlm.data.config.SMLMSettings.CameraType.CAMERA_TYPE_NA.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, cameraType_);
      }
      if (readNoise_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, readNoise_);
      }
      if (bias_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, bias_);
      }
      if (amplification_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, amplification_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.SMLMSettings.CameraCalibration)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.SMLMSettings.CameraCalibration other = (gdsc.smlm.data.config.SMLMSettings.CameraCalibration) obj;

      boolean result = true;
      result = result && cameraType_ == other.cameraType_;
      result = result && (
          java.lang.Double.doubleToLongBits(getReadNoise())
          == java.lang.Double.doubleToLongBits(
              other.getReadNoise()));
      result = result && (
          java.lang.Double.doubleToLongBits(getBias())
          == java.lang.Double.doubleToLongBits(
              other.getBias()));
      result = result && (
          java.lang.Double.doubleToLongBits(getAmplification())
          == java.lang.Double.doubleToLongBits(
              other.getAmplification()));
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CAMERATYPE_FIELD_NUMBER;
      hash = (53 * hash) + cameraType_;
      hash = (37 * hash) + READNOISE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getReadNoise()));
      hash = (37 * hash) + BIAS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getBias()));
      hash = (37 * hash) + AMPLIFICATION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getAmplification()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.SMLMSettings.CameraCalibration parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.CameraCalibration parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.CameraCalibration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.CameraCalibration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.CameraCalibration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.CameraCalibration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.CameraCalibration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.CameraCalibration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.CameraCalibration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.CameraCalibration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.CameraCalibration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.CameraCalibration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.SMLMSettings.CameraCalibration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the camera calibration
     * </pre>
     *
     * Protobuf type {@code SMLM.CameraCalibration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SMLM.CameraCalibration)
        gdsc.smlm.data.config.SMLMSettings.CameraCalibrationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_CameraCalibration_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_CameraCalibration_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.SMLMSettings.CameraCalibration.class, gdsc.smlm.data.config.SMLMSettings.CameraCalibration.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.SMLMSettings.CameraCalibration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        cameraType_ = 0;

        readNoise_ = 0D;

        bias_ = 0D;

        amplification_ = 0D;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_CameraCalibration_descriptor;
      }

      public gdsc.smlm.data.config.SMLMSettings.CameraCalibration getDefaultInstanceForType() {
        return gdsc.smlm.data.config.SMLMSettings.CameraCalibration.getDefaultInstance();
      }

      public gdsc.smlm.data.config.SMLMSettings.CameraCalibration build() {
        gdsc.smlm.data.config.SMLMSettings.CameraCalibration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.SMLMSettings.CameraCalibration buildPartial() {
        gdsc.smlm.data.config.SMLMSettings.CameraCalibration result = new gdsc.smlm.data.config.SMLMSettings.CameraCalibration(this);
        result.cameraType_ = cameraType_;
        result.readNoise_ = readNoise_;
        result.bias_ = bias_;
        result.amplification_ = amplification_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.SMLMSettings.CameraCalibration) {
          return mergeFrom((gdsc.smlm.data.config.SMLMSettings.CameraCalibration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.SMLMSettings.CameraCalibration other) {
        if (other == gdsc.smlm.data.config.SMLMSettings.CameraCalibration.getDefaultInstance()) return this;
        if (other.cameraType_ != 0) {
          setCameraTypeValue(other.getCameraTypeValue());
        }
        if (other.getReadNoise() != 0D) {
          setReadNoise(other.getReadNoise());
        }
        if (other.getBias() != 0D) {
          setBias(other.getBias());
        }
        if (other.getAmplification() != 0D) {
          setAmplification(other.getAmplification());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.SMLMSettings.CameraCalibration parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.SMLMSettings.CameraCalibration) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int cameraType_ = 0;
      /**
       * <pre>
       * The camera type.
       * </pre>
       *
       * <code>.SMLM.CameraType cameraType = 1;</code>
       */
      public int getCameraTypeValue() {
        return cameraType_;
      }
      /**
       * <pre>
       * The camera type.
       * </pre>
       *
       * <code>.SMLM.CameraType cameraType = 1;</code>
       */
      public Builder setCameraTypeValue(int value) {
        cameraType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The camera type.
       * </pre>
       *
       * <code>.SMLM.CameraType cameraType = 1;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.CameraType getCameraType() {
        gdsc.smlm.data.config.SMLMSettings.CameraType result = gdsc.smlm.data.config.SMLMSettings.CameraType.valueOf(cameraType_);
        return result == null ? gdsc.smlm.data.config.SMLMSettings.CameraType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The camera type.
       * </pre>
       *
       * <code>.SMLM.CameraType cameraType = 1;</code>
       */
      public Builder setCameraType(gdsc.smlm.data.config.SMLMSettings.CameraType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        cameraType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The camera type.
       * </pre>
       *
       * <code>.SMLM.CameraType cameraType = 1;</code>
       */
      public Builder clearCameraType() {
        
        cameraType_ = 0;
        onChanged();
        return this;
      }

      private double readNoise_ ;
      /**
       * <pre>
       * The camera Gaussian read noise (in Counts).
       * </pre>
       *
       * <code>double readNoise = 2;</code>
       */
      public double getReadNoise() {
        return readNoise_;
      }
      /**
       * <pre>
       * The camera Gaussian read noise (in Counts).
       * </pre>
       *
       * <code>double readNoise = 2;</code>
       */
      public Builder setReadNoise(double value) {
        
        readNoise_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The camera Gaussian read noise (in Counts).
       * </pre>
       *
       * <code>double readNoise = 2;</code>
       */
      public Builder clearReadNoise() {
        
        readNoise_ = 0D;
        onChanged();
        return this;
      }

      private double bias_ ;
      /**
       * <pre>
       * The camera bias (in Counts) 
       * </pre>
       *
       * <code>double bias = 3;</code>
       */
      public double getBias() {
        return bias_;
      }
      /**
       * <pre>
       * The camera bias (in Counts) 
       * </pre>
       *
       * <code>double bias = 3;</code>
       */
      public Builder setBias(double value) {
        
        bias_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The camera bias (in Counts) 
       * </pre>
       *
       * <code>double bias = 3;</code>
       */
      public Builder clearBias() {
        
        bias_ = 0D;
        onChanged();
        return this;
      }

      private double amplification_ ;
      /**
       * <pre>
       * The camera amplification (Count/electron) used when modelling a microscope camera.
       * Note that the camera noise model assumes that electrons are converted to ADUs by 
       * amplification that is not perfect (i.e. it has noise). The amplification is equal 
       * to the gain (Count/photon) divided by the quantum efficiency (electron/photon).
       * </pre>
       *
       * <code>double amplification = 4;</code>
       */
      public double getAmplification() {
        return amplification_;
      }
      /**
       * <pre>
       * The camera amplification (Count/electron) used when modelling a microscope camera.
       * Note that the camera noise model assumes that electrons are converted to ADUs by 
       * amplification that is not perfect (i.e. it has noise). The amplification is equal 
       * to the gain (Count/photon) divided by the quantum efficiency (electron/photon).
       * </pre>
       *
       * <code>double amplification = 4;</code>
       */
      public Builder setAmplification(double value) {
        
        amplification_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The camera amplification (Count/electron) used when modelling a microscope camera.
       * Note that the camera noise model assumes that electrons are converted to ADUs by 
       * amplification that is not perfect (i.e. it has noise). The amplification is equal 
       * to the gain (Count/photon) divided by the quantum efficiency (electron/photon).
       * </pre>
       *
       * <code>double amplification = 4;</code>
       */
      public Builder clearAmplification() {
        
        amplification_ = 0D;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:SMLM.CameraCalibration)
    }

    // @@protoc_insertion_point(class_scope:SMLM.CameraCalibration)
    private static final gdsc.smlm.data.config.SMLMSettings.CameraCalibration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.SMLMSettings.CameraCalibration();
    }

    public static gdsc.smlm.data.config.SMLMSettings.CameraCalibration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CameraCalibration>
        PARSER = new com.google.protobuf.AbstractParser<CameraCalibration>() {
      public CameraCalibration parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new CameraCalibration(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CameraCalibration> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CameraCalibration> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.SMLMSettings.CameraCalibration getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PSFCalibrationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SMLM.PSFCalibration)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The angle units, e.g. for a rotated point spread function
     * </pre>
     *
     * <code>.SMLM.AngleUnit angleUnit = 1;</code>
     */
    int getAngleUnitValue();
    /**
     * <pre>
     * The angle units, e.g. for a rotated point spread function
     * </pre>
     *
     * <code>.SMLM.AngleUnit angleUnit = 1;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.AngleUnit getAngleUnit();
  }
  /**
   * <pre>
   * Define additional calibration required for the Point Spread Function (PSF) parameters
   * </pre>
   *
   * Protobuf type {@code SMLM.PSFCalibration}
   */
  public  static final class PSFCalibration extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SMLM.PSFCalibration)
      PSFCalibrationOrBuilder {
    // Use PSFCalibration.newBuilder() to construct.
    private PSFCalibration(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PSFCalibration() {
      angleUnit_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private PSFCalibration(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              angleUnit_ = rawValue;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSFCalibration_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSFCalibration_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.SMLMSettings.PSFCalibration.class, gdsc.smlm.data.config.SMLMSettings.PSFCalibration.Builder.class);
    }

    public static final int ANGLEUNIT_FIELD_NUMBER = 1;
    private int angleUnit_;
    /**
     * <pre>
     * The angle units, e.g. for a rotated point spread function
     * </pre>
     *
     * <code>.SMLM.AngleUnit angleUnit = 1;</code>
     */
    public int getAngleUnitValue() {
      return angleUnit_;
    }
    /**
     * <pre>
     * The angle units, e.g. for a rotated point spread function
     * </pre>
     *
     * <code>.SMLM.AngleUnit angleUnit = 1;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.AngleUnit getAngleUnit() {
      gdsc.smlm.data.config.SMLMSettings.AngleUnit result = gdsc.smlm.data.config.SMLMSettings.AngleUnit.valueOf(angleUnit_);
      return result == null ? gdsc.smlm.data.config.SMLMSettings.AngleUnit.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (angleUnit_ != gdsc.smlm.data.config.SMLMSettings.AngleUnit.ANGLE_UNIT_NA.getNumber()) {
        output.writeEnum(1, angleUnit_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (angleUnit_ != gdsc.smlm.data.config.SMLMSettings.AngleUnit.ANGLE_UNIT_NA.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, angleUnit_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.SMLMSettings.PSFCalibration)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.SMLMSettings.PSFCalibration other = (gdsc.smlm.data.config.SMLMSettings.PSFCalibration) obj;

      boolean result = true;
      result = result && angleUnit_ == other.angleUnit_;
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ANGLEUNIT_FIELD_NUMBER;
      hash = (53 * hash) + angleUnit_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.SMLMSettings.PSFCalibration parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFCalibration parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFCalibration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFCalibration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFCalibration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFCalibration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFCalibration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFCalibration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFCalibration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFCalibration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFCalibration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.PSFCalibration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.SMLMSettings.PSFCalibration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define additional calibration required for the Point Spread Function (PSF) parameters
     * </pre>
     *
     * Protobuf type {@code SMLM.PSFCalibration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SMLM.PSFCalibration)
        gdsc.smlm.data.config.SMLMSettings.PSFCalibrationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSFCalibration_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSFCalibration_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.SMLMSettings.PSFCalibration.class, gdsc.smlm.data.config.SMLMSettings.PSFCalibration.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.SMLMSettings.PSFCalibration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        angleUnit_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_PSFCalibration_descriptor;
      }

      public gdsc.smlm.data.config.SMLMSettings.PSFCalibration getDefaultInstanceForType() {
        return gdsc.smlm.data.config.SMLMSettings.PSFCalibration.getDefaultInstance();
      }

      public gdsc.smlm.data.config.SMLMSettings.PSFCalibration build() {
        gdsc.smlm.data.config.SMLMSettings.PSFCalibration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.SMLMSettings.PSFCalibration buildPartial() {
        gdsc.smlm.data.config.SMLMSettings.PSFCalibration result = new gdsc.smlm.data.config.SMLMSettings.PSFCalibration(this);
        result.angleUnit_ = angleUnit_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.SMLMSettings.PSFCalibration) {
          return mergeFrom((gdsc.smlm.data.config.SMLMSettings.PSFCalibration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.SMLMSettings.PSFCalibration other) {
        if (other == gdsc.smlm.data.config.SMLMSettings.PSFCalibration.getDefaultInstance()) return this;
        if (other.angleUnit_ != 0) {
          setAngleUnitValue(other.getAngleUnitValue());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.SMLMSettings.PSFCalibration parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.SMLMSettings.PSFCalibration) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int angleUnit_ = 0;
      /**
       * <pre>
       * The angle units, e.g. for a rotated point spread function
       * </pre>
       *
       * <code>.SMLM.AngleUnit angleUnit = 1;</code>
       */
      public int getAngleUnitValue() {
        return angleUnit_;
      }
      /**
       * <pre>
       * The angle units, e.g. for a rotated point spread function
       * </pre>
       *
       * <code>.SMLM.AngleUnit angleUnit = 1;</code>
       */
      public Builder setAngleUnitValue(int value) {
        angleUnit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The angle units, e.g. for a rotated point spread function
       * </pre>
       *
       * <code>.SMLM.AngleUnit angleUnit = 1;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.AngleUnit getAngleUnit() {
        gdsc.smlm.data.config.SMLMSettings.AngleUnit result = gdsc.smlm.data.config.SMLMSettings.AngleUnit.valueOf(angleUnit_);
        return result == null ? gdsc.smlm.data.config.SMLMSettings.AngleUnit.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The angle units, e.g. for a rotated point spread function
       * </pre>
       *
       * <code>.SMLM.AngleUnit angleUnit = 1;</code>
       */
      public Builder setAngleUnit(gdsc.smlm.data.config.SMLMSettings.AngleUnit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        angleUnit_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The angle units, e.g. for a rotated point spread function
       * </pre>
       *
       * <code>.SMLM.AngleUnit angleUnit = 1;</code>
       */
      public Builder clearAngleUnit() {
        
        angleUnit_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:SMLM.PSFCalibration)
    }

    // @@protoc_insertion_point(class_scope:SMLM.PSFCalibration)
    private static final gdsc.smlm.data.config.SMLMSettings.PSFCalibration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.SMLMSettings.PSFCalibration();
    }

    public static gdsc.smlm.data.config.SMLMSettings.PSFCalibration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PSFCalibration>
        PARSER = new com.google.protobuf.AbstractParser<PSFCalibration>() {
      public PSFCalibration parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new PSFCalibration(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PSFCalibration> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PSFCalibration> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.SMLMSettings.PSFCalibration getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CalibrationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SMLM.Calibration)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The distance calibration.
     * </pre>
     *
     * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
     */
    boolean hasDistanceCalibration();
    /**
     * <pre>
     * The distance calibration.
     * </pre>
     *
     * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.DistanceCalibration getDistanceCalibration();
    /**
     * <pre>
     * The distance calibration.
     * </pre>
     *
     * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.DistanceCalibrationOrBuilder getDistanceCalibrationOrBuilder();

    /**
     * <pre>
     * The time calibration.
     * </pre>
     *
     * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
     */
    boolean hasTimeCalibration();
    /**
     * <pre>
     * The time calibration.
     * </pre>
     *
     * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.TimeCalibration getTimeCalibration();
    /**
     * <pre>
     * The time calibration.
     * </pre>
     *
     * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.TimeCalibrationOrBuilder getTimeCalibrationOrBuilder();

    /**
     * <pre>
     * The intensity calibration
     * </pre>
     *
     * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
     */
    boolean hasIntensityCalibration();
    /**
     * <pre>
     * The intensity calibration
     * </pre>
     *
     * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.IntensityCalibration getIntensityCalibration();
    /**
     * <pre>
     * The intensity calibration
     * </pre>
     *
     * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.IntensityCalibrationOrBuilder getIntensityCalibrationOrBuilder();

    /**
     * <pre>
     * The camera calibration.
     * </pre>
     *
     * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
     */
    boolean hasCameraCalibration();
    /**
     * <pre>
     * The camera calibration.
     * </pre>
     *
     * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.CameraCalibration getCameraCalibration();
    /**
     * <pre>
     * The camera calibration.
     * </pre>
     *
     * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.CameraCalibrationOrBuilder getCameraCalibrationOrBuilder();

    /**
     * <pre>
     * The PSF calibration.
     * </pre>
     *
     * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
     */
    boolean hasPsfCalibration();
    /**
     * <pre>
     * The PSF calibration.
     * </pre>
     *
     * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.PSFCalibration getPsfCalibration();
    /**
     * <pre>
     * The PSF calibration.
     * </pre>
     *
     * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
     */
    gdsc.smlm.data.config.SMLMSettings.PSFCalibrationOrBuilder getPsfCalibrationOrBuilder();
  }
  /**
   * <pre>
   * Define the calibration for the results. The calibration contains details of the 
   * results units and how to convert them. Note that data can be loaded without knowledge
   * of the camera used so the distance, time and intensity calibration are separate.
   * </pre>
   *
   * Protobuf type {@code SMLM.Calibration}
   */
  public  static final class Calibration extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SMLM.Calibration)
      CalibrationOrBuilder {
    // Use Calibration.newBuilder() to construct.
    private Calibration(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Calibration() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Calibration(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.Builder subBuilder = null;
              if (distanceCalibration_ != null) {
                subBuilder = distanceCalibration_.toBuilder();
              }
              distanceCalibration_ = input.readMessage(gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(distanceCalibration_);
                distanceCalibration_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              gdsc.smlm.data.config.SMLMSettings.TimeCalibration.Builder subBuilder = null;
              if (timeCalibration_ != null) {
                subBuilder = timeCalibration_.toBuilder();
              }
              timeCalibration_ = input.readMessage(gdsc.smlm.data.config.SMLMSettings.TimeCalibration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(timeCalibration_);
                timeCalibration_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.Builder subBuilder = null;
              if (intensityCalibration_ != null) {
                subBuilder = intensityCalibration_.toBuilder();
              }
              intensityCalibration_ = input.readMessage(gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(intensityCalibration_);
                intensityCalibration_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              gdsc.smlm.data.config.SMLMSettings.CameraCalibration.Builder subBuilder = null;
              if (cameraCalibration_ != null) {
                subBuilder = cameraCalibration_.toBuilder();
              }
              cameraCalibration_ = input.readMessage(gdsc.smlm.data.config.SMLMSettings.CameraCalibration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cameraCalibration_);
                cameraCalibration_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              gdsc.smlm.data.config.SMLMSettings.PSFCalibration.Builder subBuilder = null;
              if (psfCalibration_ != null) {
                subBuilder = psfCalibration_.toBuilder();
              }
              psfCalibration_ = input.readMessage(gdsc.smlm.data.config.SMLMSettings.PSFCalibration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(psfCalibration_);
                psfCalibration_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_Calibration_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_Calibration_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gdsc.smlm.data.config.SMLMSettings.Calibration.class, gdsc.smlm.data.config.SMLMSettings.Calibration.Builder.class);
    }

    public static final int DISTANCECALIBRATION_FIELD_NUMBER = 1;
    private gdsc.smlm.data.config.SMLMSettings.DistanceCalibration distanceCalibration_;
    /**
     * <pre>
     * The distance calibration.
     * </pre>
     *
     * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
     */
    public boolean hasDistanceCalibration() {
      return distanceCalibration_ != null;
    }
    /**
     * <pre>
     * The distance calibration.
     * </pre>
     *
     * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.DistanceCalibration getDistanceCalibration() {
      return distanceCalibration_ == null ? gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.getDefaultInstance() : distanceCalibration_;
    }
    /**
     * <pre>
     * The distance calibration.
     * </pre>
     *
     * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.DistanceCalibrationOrBuilder getDistanceCalibrationOrBuilder() {
      return getDistanceCalibration();
    }

    public static final int TIMECALIBRATION_FIELD_NUMBER = 2;
    private gdsc.smlm.data.config.SMLMSettings.TimeCalibration timeCalibration_;
    /**
     * <pre>
     * The time calibration.
     * </pre>
     *
     * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
     */
    public boolean hasTimeCalibration() {
      return timeCalibration_ != null;
    }
    /**
     * <pre>
     * The time calibration.
     * </pre>
     *
     * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.TimeCalibration getTimeCalibration() {
      return timeCalibration_ == null ? gdsc.smlm.data.config.SMLMSettings.TimeCalibration.getDefaultInstance() : timeCalibration_;
    }
    /**
     * <pre>
     * The time calibration.
     * </pre>
     *
     * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.TimeCalibrationOrBuilder getTimeCalibrationOrBuilder() {
      return getTimeCalibration();
    }

    public static final int INTENSITYCALIBRATION_FIELD_NUMBER = 3;
    private gdsc.smlm.data.config.SMLMSettings.IntensityCalibration intensityCalibration_;
    /**
     * <pre>
     * The intensity calibration
     * </pre>
     *
     * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
     */
    public boolean hasIntensityCalibration() {
      return intensityCalibration_ != null;
    }
    /**
     * <pre>
     * The intensity calibration
     * </pre>
     *
     * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.IntensityCalibration getIntensityCalibration() {
      return intensityCalibration_ == null ? gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.getDefaultInstance() : intensityCalibration_;
    }
    /**
     * <pre>
     * The intensity calibration
     * </pre>
     *
     * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.IntensityCalibrationOrBuilder getIntensityCalibrationOrBuilder() {
      return getIntensityCalibration();
    }

    public static final int CAMERACALIBRATION_FIELD_NUMBER = 4;
    private gdsc.smlm.data.config.SMLMSettings.CameraCalibration cameraCalibration_;
    /**
     * <pre>
     * The camera calibration.
     * </pre>
     *
     * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
     */
    public boolean hasCameraCalibration() {
      return cameraCalibration_ != null;
    }
    /**
     * <pre>
     * The camera calibration.
     * </pre>
     *
     * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.CameraCalibration getCameraCalibration() {
      return cameraCalibration_ == null ? gdsc.smlm.data.config.SMLMSettings.CameraCalibration.getDefaultInstance() : cameraCalibration_;
    }
    /**
     * <pre>
     * The camera calibration.
     * </pre>
     *
     * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.CameraCalibrationOrBuilder getCameraCalibrationOrBuilder() {
      return getCameraCalibration();
    }

    public static final int PSFCALIBRATION_FIELD_NUMBER = 5;
    private gdsc.smlm.data.config.SMLMSettings.PSFCalibration psfCalibration_;
    /**
     * <pre>
     * The PSF calibration.
     * </pre>
     *
     * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
     */
    public boolean hasPsfCalibration() {
      return psfCalibration_ != null;
    }
    /**
     * <pre>
     * The PSF calibration.
     * </pre>
     *
     * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.PSFCalibration getPsfCalibration() {
      return psfCalibration_ == null ? gdsc.smlm.data.config.SMLMSettings.PSFCalibration.getDefaultInstance() : psfCalibration_;
    }
    /**
     * <pre>
     * The PSF calibration.
     * </pre>
     *
     * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
     */
    public gdsc.smlm.data.config.SMLMSettings.PSFCalibrationOrBuilder getPsfCalibrationOrBuilder() {
      return getPsfCalibration();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (distanceCalibration_ != null) {
        output.writeMessage(1, getDistanceCalibration());
      }
      if (timeCalibration_ != null) {
        output.writeMessage(2, getTimeCalibration());
      }
      if (intensityCalibration_ != null) {
        output.writeMessage(3, getIntensityCalibration());
      }
      if (cameraCalibration_ != null) {
        output.writeMessage(4, getCameraCalibration());
      }
      if (psfCalibration_ != null) {
        output.writeMessage(5, getPsfCalibration());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (distanceCalibration_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDistanceCalibration());
      }
      if (timeCalibration_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTimeCalibration());
      }
      if (intensityCalibration_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getIntensityCalibration());
      }
      if (cameraCalibration_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getCameraCalibration());
      }
      if (psfCalibration_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getPsfCalibration());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gdsc.smlm.data.config.SMLMSettings.Calibration)) {
        return super.equals(obj);
      }
      gdsc.smlm.data.config.SMLMSettings.Calibration other = (gdsc.smlm.data.config.SMLMSettings.Calibration) obj;

      boolean result = true;
      result = result && (hasDistanceCalibration() == other.hasDistanceCalibration());
      if (hasDistanceCalibration()) {
        result = result && getDistanceCalibration()
            .equals(other.getDistanceCalibration());
      }
      result = result && (hasTimeCalibration() == other.hasTimeCalibration());
      if (hasTimeCalibration()) {
        result = result && getTimeCalibration()
            .equals(other.getTimeCalibration());
      }
      result = result && (hasIntensityCalibration() == other.hasIntensityCalibration());
      if (hasIntensityCalibration()) {
        result = result && getIntensityCalibration()
            .equals(other.getIntensityCalibration());
      }
      result = result && (hasCameraCalibration() == other.hasCameraCalibration());
      if (hasCameraCalibration()) {
        result = result && getCameraCalibration()
            .equals(other.getCameraCalibration());
      }
      result = result && (hasPsfCalibration() == other.hasPsfCalibration());
      if (hasPsfCalibration()) {
        result = result && getPsfCalibration()
            .equals(other.getPsfCalibration());
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDistanceCalibration()) {
        hash = (37 * hash) + DISTANCECALIBRATION_FIELD_NUMBER;
        hash = (53 * hash) + getDistanceCalibration().hashCode();
      }
      if (hasTimeCalibration()) {
        hash = (37 * hash) + TIMECALIBRATION_FIELD_NUMBER;
        hash = (53 * hash) + getTimeCalibration().hashCode();
      }
      if (hasIntensityCalibration()) {
        hash = (37 * hash) + INTENSITYCALIBRATION_FIELD_NUMBER;
        hash = (53 * hash) + getIntensityCalibration().hashCode();
      }
      if (hasCameraCalibration()) {
        hash = (37 * hash) + CAMERACALIBRATION_FIELD_NUMBER;
        hash = (53 * hash) + getCameraCalibration().hashCode();
      }
      if (hasPsfCalibration()) {
        hash = (37 * hash) + PSFCALIBRATION_FIELD_NUMBER;
        hash = (53 * hash) + getPsfCalibration().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gdsc.smlm.data.config.SMLMSettings.Calibration parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.Calibration parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.Calibration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.Calibration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.Calibration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gdsc.smlm.data.config.SMLMSettings.Calibration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.Calibration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.Calibration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.Calibration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.Calibration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gdsc.smlm.data.config.SMLMSettings.Calibration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gdsc.smlm.data.config.SMLMSettings.Calibration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gdsc.smlm.data.config.SMLMSettings.Calibration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define the calibration for the results. The calibration contains details of the 
     * results units and how to convert them. Note that data can be loaded without knowledge
     * of the camera used so the distance, time and intensity calibration are separate.
     * </pre>
     *
     * Protobuf type {@code SMLM.Calibration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SMLM.Calibration)
        gdsc.smlm.data.config.SMLMSettings.CalibrationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_Calibration_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_Calibration_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gdsc.smlm.data.config.SMLMSettings.Calibration.class, gdsc.smlm.data.config.SMLMSettings.Calibration.Builder.class);
      }

      // Construct using gdsc.smlm.data.config.SMLMSettings.Calibration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (distanceCalibrationBuilder_ == null) {
          distanceCalibration_ = null;
        } else {
          distanceCalibration_ = null;
          distanceCalibrationBuilder_ = null;
        }
        if (timeCalibrationBuilder_ == null) {
          timeCalibration_ = null;
        } else {
          timeCalibration_ = null;
          timeCalibrationBuilder_ = null;
        }
        if (intensityCalibrationBuilder_ == null) {
          intensityCalibration_ = null;
        } else {
          intensityCalibration_ = null;
          intensityCalibrationBuilder_ = null;
        }
        if (cameraCalibrationBuilder_ == null) {
          cameraCalibration_ = null;
        } else {
          cameraCalibration_ = null;
          cameraCalibrationBuilder_ = null;
        }
        if (psfCalibrationBuilder_ == null) {
          psfCalibration_ = null;
        } else {
          psfCalibration_ = null;
          psfCalibrationBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gdsc.smlm.data.config.SMLMSettings.internal_static_SMLM_Calibration_descriptor;
      }

      public gdsc.smlm.data.config.SMLMSettings.Calibration getDefaultInstanceForType() {
        return gdsc.smlm.data.config.SMLMSettings.Calibration.getDefaultInstance();
      }

      public gdsc.smlm.data.config.SMLMSettings.Calibration build() {
        gdsc.smlm.data.config.SMLMSettings.Calibration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gdsc.smlm.data.config.SMLMSettings.Calibration buildPartial() {
        gdsc.smlm.data.config.SMLMSettings.Calibration result = new gdsc.smlm.data.config.SMLMSettings.Calibration(this);
        if (distanceCalibrationBuilder_ == null) {
          result.distanceCalibration_ = distanceCalibration_;
        } else {
          result.distanceCalibration_ = distanceCalibrationBuilder_.build();
        }
        if (timeCalibrationBuilder_ == null) {
          result.timeCalibration_ = timeCalibration_;
        } else {
          result.timeCalibration_ = timeCalibrationBuilder_.build();
        }
        if (intensityCalibrationBuilder_ == null) {
          result.intensityCalibration_ = intensityCalibration_;
        } else {
          result.intensityCalibration_ = intensityCalibrationBuilder_.build();
        }
        if (cameraCalibrationBuilder_ == null) {
          result.cameraCalibration_ = cameraCalibration_;
        } else {
          result.cameraCalibration_ = cameraCalibrationBuilder_.build();
        }
        if (psfCalibrationBuilder_ == null) {
          result.psfCalibration_ = psfCalibration_;
        } else {
          result.psfCalibration_ = psfCalibrationBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gdsc.smlm.data.config.SMLMSettings.Calibration) {
          return mergeFrom((gdsc.smlm.data.config.SMLMSettings.Calibration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gdsc.smlm.data.config.SMLMSettings.Calibration other) {
        if (other == gdsc.smlm.data.config.SMLMSettings.Calibration.getDefaultInstance()) return this;
        if (other.hasDistanceCalibration()) {
          mergeDistanceCalibration(other.getDistanceCalibration());
        }
        if (other.hasTimeCalibration()) {
          mergeTimeCalibration(other.getTimeCalibration());
        }
        if (other.hasIntensityCalibration()) {
          mergeIntensityCalibration(other.getIntensityCalibration());
        }
        if (other.hasCameraCalibration()) {
          mergeCameraCalibration(other.getCameraCalibration());
        }
        if (other.hasPsfCalibration()) {
          mergePsfCalibration(other.getPsfCalibration());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gdsc.smlm.data.config.SMLMSettings.Calibration parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gdsc.smlm.data.config.SMLMSettings.Calibration) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private gdsc.smlm.data.config.SMLMSettings.DistanceCalibration distanceCalibration_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.SMLMSettings.DistanceCalibration, gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.DistanceCalibrationOrBuilder> distanceCalibrationBuilder_;
      /**
       * <pre>
       * The distance calibration.
       * </pre>
       *
       * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
       */
      public boolean hasDistanceCalibration() {
        return distanceCalibrationBuilder_ != null || distanceCalibration_ != null;
      }
      /**
       * <pre>
       * The distance calibration.
       * </pre>
       *
       * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.DistanceCalibration getDistanceCalibration() {
        if (distanceCalibrationBuilder_ == null) {
          return distanceCalibration_ == null ? gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.getDefaultInstance() : distanceCalibration_;
        } else {
          return distanceCalibrationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The distance calibration.
       * </pre>
       *
       * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
       */
      public Builder setDistanceCalibration(gdsc.smlm.data.config.SMLMSettings.DistanceCalibration value) {
        if (distanceCalibrationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          distanceCalibration_ = value;
          onChanged();
        } else {
          distanceCalibrationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The distance calibration.
       * </pre>
       *
       * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
       */
      public Builder setDistanceCalibration(
          gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.Builder builderForValue) {
        if (distanceCalibrationBuilder_ == null) {
          distanceCalibration_ = builderForValue.build();
          onChanged();
        } else {
          distanceCalibrationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The distance calibration.
       * </pre>
       *
       * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
       */
      public Builder mergeDistanceCalibration(gdsc.smlm.data.config.SMLMSettings.DistanceCalibration value) {
        if (distanceCalibrationBuilder_ == null) {
          if (distanceCalibration_ != null) {
            distanceCalibration_ =
              gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.newBuilder(distanceCalibration_).mergeFrom(value).buildPartial();
          } else {
            distanceCalibration_ = value;
          }
          onChanged();
        } else {
          distanceCalibrationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The distance calibration.
       * </pre>
       *
       * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
       */
      public Builder clearDistanceCalibration() {
        if (distanceCalibrationBuilder_ == null) {
          distanceCalibration_ = null;
          onChanged();
        } else {
          distanceCalibration_ = null;
          distanceCalibrationBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The distance calibration.
       * </pre>
       *
       * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.Builder getDistanceCalibrationBuilder() {
        
        onChanged();
        return getDistanceCalibrationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The distance calibration.
       * </pre>
       *
       * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.DistanceCalibrationOrBuilder getDistanceCalibrationOrBuilder() {
        if (distanceCalibrationBuilder_ != null) {
          return distanceCalibrationBuilder_.getMessageOrBuilder();
        } else {
          return distanceCalibration_ == null ?
              gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.getDefaultInstance() : distanceCalibration_;
        }
      }
      /**
       * <pre>
       * The distance calibration.
       * </pre>
       *
       * <code>.SMLM.DistanceCalibration distanceCalibration = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.SMLMSettings.DistanceCalibration, gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.DistanceCalibrationOrBuilder> 
          getDistanceCalibrationFieldBuilder() {
        if (distanceCalibrationBuilder_ == null) {
          distanceCalibrationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.SMLMSettings.DistanceCalibration, gdsc.smlm.data.config.SMLMSettings.DistanceCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.DistanceCalibrationOrBuilder>(
                  getDistanceCalibration(),
                  getParentForChildren(),
                  isClean());
          distanceCalibration_ = null;
        }
        return distanceCalibrationBuilder_;
      }

      private gdsc.smlm.data.config.SMLMSettings.TimeCalibration timeCalibration_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.SMLMSettings.TimeCalibration, gdsc.smlm.data.config.SMLMSettings.TimeCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.TimeCalibrationOrBuilder> timeCalibrationBuilder_;
      /**
       * <pre>
       * The time calibration.
       * </pre>
       *
       * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
       */
      public boolean hasTimeCalibration() {
        return timeCalibrationBuilder_ != null || timeCalibration_ != null;
      }
      /**
       * <pre>
       * The time calibration.
       * </pre>
       *
       * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.TimeCalibration getTimeCalibration() {
        if (timeCalibrationBuilder_ == null) {
          return timeCalibration_ == null ? gdsc.smlm.data.config.SMLMSettings.TimeCalibration.getDefaultInstance() : timeCalibration_;
        } else {
          return timeCalibrationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The time calibration.
       * </pre>
       *
       * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
       */
      public Builder setTimeCalibration(gdsc.smlm.data.config.SMLMSettings.TimeCalibration value) {
        if (timeCalibrationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          timeCalibration_ = value;
          onChanged();
        } else {
          timeCalibrationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The time calibration.
       * </pre>
       *
       * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
       */
      public Builder setTimeCalibration(
          gdsc.smlm.data.config.SMLMSettings.TimeCalibration.Builder builderForValue) {
        if (timeCalibrationBuilder_ == null) {
          timeCalibration_ = builderForValue.build();
          onChanged();
        } else {
          timeCalibrationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The time calibration.
       * </pre>
       *
       * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
       */
      public Builder mergeTimeCalibration(gdsc.smlm.data.config.SMLMSettings.TimeCalibration value) {
        if (timeCalibrationBuilder_ == null) {
          if (timeCalibration_ != null) {
            timeCalibration_ =
              gdsc.smlm.data.config.SMLMSettings.TimeCalibration.newBuilder(timeCalibration_).mergeFrom(value).buildPartial();
          } else {
            timeCalibration_ = value;
          }
          onChanged();
        } else {
          timeCalibrationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The time calibration.
       * </pre>
       *
       * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
       */
      public Builder clearTimeCalibration() {
        if (timeCalibrationBuilder_ == null) {
          timeCalibration_ = null;
          onChanged();
        } else {
          timeCalibration_ = null;
          timeCalibrationBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The time calibration.
       * </pre>
       *
       * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.TimeCalibration.Builder getTimeCalibrationBuilder() {
        
        onChanged();
        return getTimeCalibrationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The time calibration.
       * </pre>
       *
       * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.TimeCalibrationOrBuilder getTimeCalibrationOrBuilder() {
        if (timeCalibrationBuilder_ != null) {
          return timeCalibrationBuilder_.getMessageOrBuilder();
        } else {
          return timeCalibration_ == null ?
              gdsc.smlm.data.config.SMLMSettings.TimeCalibration.getDefaultInstance() : timeCalibration_;
        }
      }
      /**
       * <pre>
       * The time calibration.
       * </pre>
       *
       * <code>.SMLM.TimeCalibration timeCalibration = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.SMLMSettings.TimeCalibration, gdsc.smlm.data.config.SMLMSettings.TimeCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.TimeCalibrationOrBuilder> 
          getTimeCalibrationFieldBuilder() {
        if (timeCalibrationBuilder_ == null) {
          timeCalibrationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.SMLMSettings.TimeCalibration, gdsc.smlm.data.config.SMLMSettings.TimeCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.TimeCalibrationOrBuilder>(
                  getTimeCalibration(),
                  getParentForChildren(),
                  isClean());
          timeCalibration_ = null;
        }
        return timeCalibrationBuilder_;
      }

      private gdsc.smlm.data.config.SMLMSettings.IntensityCalibration intensityCalibration_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.SMLMSettings.IntensityCalibration, gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.IntensityCalibrationOrBuilder> intensityCalibrationBuilder_;
      /**
       * <pre>
       * The intensity calibration
       * </pre>
       *
       * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
       */
      public boolean hasIntensityCalibration() {
        return intensityCalibrationBuilder_ != null || intensityCalibration_ != null;
      }
      /**
       * <pre>
       * The intensity calibration
       * </pre>
       *
       * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.IntensityCalibration getIntensityCalibration() {
        if (intensityCalibrationBuilder_ == null) {
          return intensityCalibration_ == null ? gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.getDefaultInstance() : intensityCalibration_;
        } else {
          return intensityCalibrationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The intensity calibration
       * </pre>
       *
       * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
       */
      public Builder setIntensityCalibration(gdsc.smlm.data.config.SMLMSettings.IntensityCalibration value) {
        if (intensityCalibrationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          intensityCalibration_ = value;
          onChanged();
        } else {
          intensityCalibrationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The intensity calibration
       * </pre>
       *
       * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
       */
      public Builder setIntensityCalibration(
          gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.Builder builderForValue) {
        if (intensityCalibrationBuilder_ == null) {
          intensityCalibration_ = builderForValue.build();
          onChanged();
        } else {
          intensityCalibrationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The intensity calibration
       * </pre>
       *
       * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
       */
      public Builder mergeIntensityCalibration(gdsc.smlm.data.config.SMLMSettings.IntensityCalibration value) {
        if (intensityCalibrationBuilder_ == null) {
          if (intensityCalibration_ != null) {
            intensityCalibration_ =
              gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.newBuilder(intensityCalibration_).mergeFrom(value).buildPartial();
          } else {
            intensityCalibration_ = value;
          }
          onChanged();
        } else {
          intensityCalibrationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The intensity calibration
       * </pre>
       *
       * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
       */
      public Builder clearIntensityCalibration() {
        if (intensityCalibrationBuilder_ == null) {
          intensityCalibration_ = null;
          onChanged();
        } else {
          intensityCalibration_ = null;
          intensityCalibrationBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The intensity calibration
       * </pre>
       *
       * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.Builder getIntensityCalibrationBuilder() {
        
        onChanged();
        return getIntensityCalibrationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The intensity calibration
       * </pre>
       *
       * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.IntensityCalibrationOrBuilder getIntensityCalibrationOrBuilder() {
        if (intensityCalibrationBuilder_ != null) {
          return intensityCalibrationBuilder_.getMessageOrBuilder();
        } else {
          return intensityCalibration_ == null ?
              gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.getDefaultInstance() : intensityCalibration_;
        }
      }
      /**
       * <pre>
       * The intensity calibration
       * </pre>
       *
       * <code>.SMLM.IntensityCalibration intensityCalibration = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.SMLMSettings.IntensityCalibration, gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.IntensityCalibrationOrBuilder> 
          getIntensityCalibrationFieldBuilder() {
        if (intensityCalibrationBuilder_ == null) {
          intensityCalibrationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.SMLMSettings.IntensityCalibration, gdsc.smlm.data.config.SMLMSettings.IntensityCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.IntensityCalibrationOrBuilder>(
                  getIntensityCalibration(),
                  getParentForChildren(),
                  isClean());
          intensityCalibration_ = null;
        }
        return intensityCalibrationBuilder_;
      }

      private gdsc.smlm.data.config.SMLMSettings.CameraCalibration cameraCalibration_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.SMLMSettings.CameraCalibration, gdsc.smlm.data.config.SMLMSettings.CameraCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.CameraCalibrationOrBuilder> cameraCalibrationBuilder_;
      /**
       * <pre>
       * The camera calibration.
       * </pre>
       *
       * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
       */
      public boolean hasCameraCalibration() {
        return cameraCalibrationBuilder_ != null || cameraCalibration_ != null;
      }
      /**
       * <pre>
       * The camera calibration.
       * </pre>
       *
       * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.CameraCalibration getCameraCalibration() {
        if (cameraCalibrationBuilder_ == null) {
          return cameraCalibration_ == null ? gdsc.smlm.data.config.SMLMSettings.CameraCalibration.getDefaultInstance() : cameraCalibration_;
        } else {
          return cameraCalibrationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The camera calibration.
       * </pre>
       *
       * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
       */
      public Builder setCameraCalibration(gdsc.smlm.data.config.SMLMSettings.CameraCalibration value) {
        if (cameraCalibrationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cameraCalibration_ = value;
          onChanged();
        } else {
          cameraCalibrationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The camera calibration.
       * </pre>
       *
       * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
       */
      public Builder setCameraCalibration(
          gdsc.smlm.data.config.SMLMSettings.CameraCalibration.Builder builderForValue) {
        if (cameraCalibrationBuilder_ == null) {
          cameraCalibration_ = builderForValue.build();
          onChanged();
        } else {
          cameraCalibrationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The camera calibration.
       * </pre>
       *
       * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
       */
      public Builder mergeCameraCalibration(gdsc.smlm.data.config.SMLMSettings.CameraCalibration value) {
        if (cameraCalibrationBuilder_ == null) {
          if (cameraCalibration_ != null) {
            cameraCalibration_ =
              gdsc.smlm.data.config.SMLMSettings.CameraCalibration.newBuilder(cameraCalibration_).mergeFrom(value).buildPartial();
          } else {
            cameraCalibration_ = value;
          }
          onChanged();
        } else {
          cameraCalibrationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The camera calibration.
       * </pre>
       *
       * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
       */
      public Builder clearCameraCalibration() {
        if (cameraCalibrationBuilder_ == null) {
          cameraCalibration_ = null;
          onChanged();
        } else {
          cameraCalibration_ = null;
          cameraCalibrationBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The camera calibration.
       * </pre>
       *
       * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.CameraCalibration.Builder getCameraCalibrationBuilder() {
        
        onChanged();
        return getCameraCalibrationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The camera calibration.
       * </pre>
       *
       * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.CameraCalibrationOrBuilder getCameraCalibrationOrBuilder() {
        if (cameraCalibrationBuilder_ != null) {
          return cameraCalibrationBuilder_.getMessageOrBuilder();
        } else {
          return cameraCalibration_ == null ?
              gdsc.smlm.data.config.SMLMSettings.CameraCalibration.getDefaultInstance() : cameraCalibration_;
        }
      }
      /**
       * <pre>
       * The camera calibration.
       * </pre>
       *
       * <code>.SMLM.CameraCalibration cameraCalibration = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.SMLMSettings.CameraCalibration, gdsc.smlm.data.config.SMLMSettings.CameraCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.CameraCalibrationOrBuilder> 
          getCameraCalibrationFieldBuilder() {
        if (cameraCalibrationBuilder_ == null) {
          cameraCalibrationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.SMLMSettings.CameraCalibration, gdsc.smlm.data.config.SMLMSettings.CameraCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.CameraCalibrationOrBuilder>(
                  getCameraCalibration(),
                  getParentForChildren(),
                  isClean());
          cameraCalibration_ = null;
        }
        return cameraCalibrationBuilder_;
      }

      private gdsc.smlm.data.config.SMLMSettings.PSFCalibration psfCalibration_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.SMLMSettings.PSFCalibration, gdsc.smlm.data.config.SMLMSettings.PSFCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.PSFCalibrationOrBuilder> psfCalibrationBuilder_;
      /**
       * <pre>
       * The PSF calibration.
       * </pre>
       *
       * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
       */
      public boolean hasPsfCalibration() {
        return psfCalibrationBuilder_ != null || psfCalibration_ != null;
      }
      /**
       * <pre>
       * The PSF calibration.
       * </pre>
       *
       * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.PSFCalibration getPsfCalibration() {
        if (psfCalibrationBuilder_ == null) {
          return psfCalibration_ == null ? gdsc.smlm.data.config.SMLMSettings.PSFCalibration.getDefaultInstance() : psfCalibration_;
        } else {
          return psfCalibrationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The PSF calibration.
       * </pre>
       *
       * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
       */
      public Builder setPsfCalibration(gdsc.smlm.data.config.SMLMSettings.PSFCalibration value) {
        if (psfCalibrationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          psfCalibration_ = value;
          onChanged();
        } else {
          psfCalibrationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The PSF calibration.
       * </pre>
       *
       * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
       */
      public Builder setPsfCalibration(
          gdsc.smlm.data.config.SMLMSettings.PSFCalibration.Builder builderForValue) {
        if (psfCalibrationBuilder_ == null) {
          psfCalibration_ = builderForValue.build();
          onChanged();
        } else {
          psfCalibrationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The PSF calibration.
       * </pre>
       *
       * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
       */
      public Builder mergePsfCalibration(gdsc.smlm.data.config.SMLMSettings.PSFCalibration value) {
        if (psfCalibrationBuilder_ == null) {
          if (psfCalibration_ != null) {
            psfCalibration_ =
              gdsc.smlm.data.config.SMLMSettings.PSFCalibration.newBuilder(psfCalibration_).mergeFrom(value).buildPartial();
          } else {
            psfCalibration_ = value;
          }
          onChanged();
        } else {
          psfCalibrationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The PSF calibration.
       * </pre>
       *
       * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
       */
      public Builder clearPsfCalibration() {
        if (psfCalibrationBuilder_ == null) {
          psfCalibration_ = null;
          onChanged();
        } else {
          psfCalibration_ = null;
          psfCalibrationBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The PSF calibration.
       * </pre>
       *
       * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.PSFCalibration.Builder getPsfCalibrationBuilder() {
        
        onChanged();
        return getPsfCalibrationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The PSF calibration.
       * </pre>
       *
       * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
       */
      public gdsc.smlm.data.config.SMLMSettings.PSFCalibrationOrBuilder getPsfCalibrationOrBuilder() {
        if (psfCalibrationBuilder_ != null) {
          return psfCalibrationBuilder_.getMessageOrBuilder();
        } else {
          return psfCalibration_ == null ?
              gdsc.smlm.data.config.SMLMSettings.PSFCalibration.getDefaultInstance() : psfCalibration_;
        }
      }
      /**
       * <pre>
       * The PSF calibration.
       * </pre>
       *
       * <code>.SMLM.PSFCalibration psfCalibration = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gdsc.smlm.data.config.SMLMSettings.PSFCalibration, gdsc.smlm.data.config.SMLMSettings.PSFCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.PSFCalibrationOrBuilder> 
          getPsfCalibrationFieldBuilder() {
        if (psfCalibrationBuilder_ == null) {
          psfCalibrationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gdsc.smlm.data.config.SMLMSettings.PSFCalibration, gdsc.smlm.data.config.SMLMSettings.PSFCalibration.Builder, gdsc.smlm.data.config.SMLMSettings.PSFCalibrationOrBuilder>(
                  getPsfCalibration(),
                  getParentForChildren(),
                  isClean());
          psfCalibration_ = null;
        }
        return psfCalibrationBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:SMLM.Calibration)
    }

    // @@protoc_insertion_point(class_scope:SMLM.Calibration)
    private static final gdsc.smlm.data.config.SMLMSettings.Calibration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gdsc.smlm.data.config.SMLMSettings.Calibration();
    }

    public static gdsc.smlm.data.config.SMLMSettings.Calibration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Calibration>
        PARSER = new com.google.protobuf.AbstractParser<Calibration>() {
      public Calibration parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Calibration(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Calibration> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Calibration> getParserForType() {
      return PARSER;
    }

    public gdsc.smlm.data.config.SMLMSettings.Calibration getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SMLM_PSFParameter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SMLM_PSFParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SMLM_PSF_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SMLM_PSF_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SMLM_DistanceCalibration_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SMLM_DistanceCalibration_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SMLM_TimeCalibration_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SMLM_TimeCalibration_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SMLM_IntensityCalibration_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SMLM_IntensityCalibration_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SMLM_CameraCalibration_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SMLM_CameraCalibration_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SMLM_PSFCalibration_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SMLM_PSFCalibration_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SMLM_Calibration_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SMLM_Calibration_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017GDSC_SMLM.proto\022\004SMLM\"B\n\014PSFParameter\022" +
      "\014\n\004name\030\001 \001(\t\022$\n\004unit\030\002 \001(\0162\026.SMLM.PSFPa" +
      "rameterUnit\"L\n\003PSF\022\036\n\007psfType\030\001 \001(\0162\r.SM" +
      "LM.PSFType\022%\n\tparameter\030\002 \003(\0132\022.SMLM.PSF" +
      "Parameter\"K\n\023DistanceCalibration\022 \n\004unit" +
      "\030\001 \001(\0162\022.SMLM.DistanceUnit\022\022\n\nnmPerPixel" +
      "\030\002 \001(\001\"E\n\017TimeCalibration\022\034\n\004unit\030\001 \001(\0162" +
      "\016.SMLM.TimeUnit\022\024\n\014exposureTime\030\002 \001(\001\"G\n" +
      "\024IntensityCalibration\022!\n\004unit\030\001 \001(\0162\023.SM" +
      "LM.IntensityUnit\022\014\n\004gain\030\002 \001(\001\"q\n\021Camera",
      "Calibration\022$\n\ncameraType\030\001 \001(\0162\020.SMLM.C" +
      "ameraType\022\021\n\treadNoise\030\002 \001(\001\022\014\n\004bias\030\003 \001" +
      "(\001\022\025\n\ramplification\030\004 \001(\001\"4\n\016PSFCalibrat" +
      "ion\022\"\n\tangleUnit\030\001 \001(\0162\017.SMLM.AngleUnit\"" +
      "\221\002\n\013Calibration\0226\n\023distanceCalibration\030\001" +
      " \001(\0132\031.SMLM.DistanceCalibration\022.\n\017timeC" +
      "alibration\030\002 \001(\0132\025.SMLM.TimeCalibration\022" +
      "8\n\024intensityCalibration\030\003 \001(\0132\032.SMLM.Int" +
      "ensityCalibration\0222\n\021cameraCalibration\030\004" +
      " \001(\0132\027.SMLM.CameraCalibration\022,\n\016psfCali",
      "bration\030\005 \001(\0132\024.SMLM.PSFCalibration*\232\001\n\007" +
      "PSFType\022\017\n\013PSF_TYPE_NA\020\000\022\030\n\024ONE_AXIS_GAU" +
      "SSIAN_2D\020\001\022\030\n\024TWO_AXIS_GAUSSIAN_2D\020\002\022\"\n\036" +
      "TWO_AXIS_AND_THETA_GAUSSIAN_2D\020\003\022\032\n\026ASTI" +
      "GMATIC_GAUSSIAN_2D\020\004\022\n\n\006CUSTOM\020\005*U\n\020PSFP" +
      "arameterUnit\022\031\n\025PSF_PARAMETER_UNIT_NA\020\000\022" +
      "\014\n\010DISTANCE\020\001\022\r\n\tINTENSITY\020\002\022\t\n\005ANGLE\020\003*" +
      "?\n\nCameraType\022\022\n\016CAMERA_TYPE_NA\020\000\022\t\n\005EMC" +
      "CD\020\001\022\007\n\003CCD\020\002\022\t\n\005SCMOS\020\003*?\n\014DistanceUnit" +
      "\022\024\n\020DISTANCE_UNIT_NA\020\000\022\t\n\005PIXEL\020\001\022\006\n\002UM\020",
      "\002\022\006\n\002NM\020\003*=\n\rIntensityUnit\022\025\n\021INTENSITY_" +
      "UNIT_NA\020\000\022\n\n\006PHOTON\020\001\022\t\n\005COUNT\020\002*6\n\tAngl" +
      "eUnit\022\021\n\rANGLE_UNIT_NA\020\000\022\n\n\006RADIAN\020\001\022\n\n\006" +
      "DEGREE\020\002*D\n\010TimeUnit\022\020\n\014TIME_UNIT_NA\020\000\022\t" +
      "\n\005FRAME\020\001\022\n\n\006SECOND\020\002\022\017\n\013MILLISECOND\020\003B%" +
      "\n\025gdsc.smlm.data.configB\014SMLMSettingsb\006p" +
      "roto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_SMLM_PSFParameter_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_SMLM_PSFParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SMLM_PSFParameter_descriptor,
        new java.lang.String[] { "Name", "Unit", });
    internal_static_SMLM_PSF_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_SMLM_PSF_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SMLM_PSF_descriptor,
        new java.lang.String[] { "PsfType", "Parameter", });
    internal_static_SMLM_DistanceCalibration_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_SMLM_DistanceCalibration_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SMLM_DistanceCalibration_descriptor,
        new java.lang.String[] { "Unit", "NmPerPixel", });
    internal_static_SMLM_TimeCalibration_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_SMLM_TimeCalibration_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SMLM_TimeCalibration_descriptor,
        new java.lang.String[] { "Unit", "ExposureTime", });
    internal_static_SMLM_IntensityCalibration_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_SMLM_IntensityCalibration_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SMLM_IntensityCalibration_descriptor,
        new java.lang.String[] { "Unit", "Gain", });
    internal_static_SMLM_CameraCalibration_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_SMLM_CameraCalibration_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SMLM_CameraCalibration_descriptor,
        new java.lang.String[] { "CameraType", "ReadNoise", "Bias", "Amplification", });
    internal_static_SMLM_PSFCalibration_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_SMLM_PSFCalibration_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SMLM_PSFCalibration_descriptor,
        new java.lang.String[] { "AngleUnit", });
    internal_static_SMLM_Calibration_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_SMLM_Calibration_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SMLM_Calibration_descriptor,
        new java.lang.String[] { "DistanceCalibration", "TimeCalibration", "IntensityCalibration", "CameraCalibration", "PsfCalibration", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
