syntax = "proto3";

// ProtoBuffer description file for configuration settings of the GDSC SMLM Java code.
// Authors: Alex Herbert, 2017 
// License: GPL V3
package gdsc.smlm.data.config;

option java_outer_classname = "PSFProtos";

// enums that are used for optional units have [enum_name]_NA as the first entry as the 
// proto definition will use this as the default

// The type of Point Spread Function (PSF)
enum PSFType {
	PSF_TYPE_NA = 0; // Not available. Only the standard parameters are supported.
	ONE_AXIS_GAUSSIAN_2D = 1; // A 2D Gaussian with the same standard deviation in X and Y dimensions
	TWO_AXIS_GAUSSIAN_2D = 2; // A 2D Gaussian with standard deviations in X and Y dimensions
	TWO_AXIS_AND_THETA_GAUSSIAN_2D = 3; // A 2D Gaussian with standard deviations in X and Y dimensions and a rotation angle
	ASTIGMATIC_GAUSSIAN_2D = 4; // A 2D Gaussian with standard deviations in X and Y dimensions defined by the z-depth
	CUSTOM = 5; // A custom point spread function (PSF) 
}

// Define the type of units supported in the Point Spread Function (PSF)
enum PSFParameterUnit {
	PSF_PARAMETER_UNIT_NA = 0; // Not available
	DISTANCE = 1; // The parameter describes a distance
	INTENSITY = 2; // The parameter describes an intensity
	ANGLE = 3; // The parameter describes an angle
}

// Define the additional parameters of the Point Spread Function (PSF)
message PSFParameter {
	string name = 1;
	PSFParameterUnit unit = 2;
	double value = 3;
}

// Define the Point Spread Function (PSF)
message PSF {
	PSFType psf_type = 1; // The PSF type
	
	// The names of the PSF parameters. The results are stored using the standard parameters of 
	// [background, intensity, x, y, z]. Any additional parameters can be stored in the results
	// parameters array. The names of the non-standard parameters, in order, can be defined here.
	repeated PSFParameter parameters = 2;
}

// Define the offset for slice alignment correction
message Offset
{
	double cx = 2;
	double cy = 3;
}

// Define the settings of an observed Point Spread Function (PSF) represented as an image stack.
message ImagePSF
{
	// The number of images in the PSF
	int32 image_count = 1;
    // The image containing the focal plane of the PSF
	int32 centre_image = 2;
	// The size of the PSF pixel in nanometers
	double pixel_size = 3;
	// The depth of the PSF pixel in nanometers
	double pixel_depth = 4;
	// The Full Width at Half Maxima (FWHM) in nanometers
	double fwhm = 5;
	// Notes about the PSF, added as Key-Value pairs.
	map<string, string> notes = 6;
	// The alignment correction for each slice in pixels. This is the shift required to 
	// move the centre of the image to the centre of the PSF. The PSF centre may be 
	// determined by PSF fitting.
	// If missing then the alignment is assumed to be 0,0.
	map<int32, Offset> offsets = 7;
}
