syntax = "proto3";

// ProtoBuffer description file for configuration settings of the GDSC SMLM Java code.
// Authors: Alex Herbert, 2017 
// License: GPL V3
package gdsc.smlm.data.config;

option java_outer_classname = "CalibrationProtos";

import "unit.proto";

// Define the calibration for distance
message DistanceCalibration {
	// The distance unit.
	DistanceUnit distance_unit = 1;
	// The camera pixel size in nanometers.
	double nm_per_pixel = 2;
}

// Define the calibration for time
message TimeCalibration {
	// The time unit. This is currently unused as it is assumed the time in the results 
	// is in frames.
	TimeUnit time_unit = 1;
	// The exposure time in milliseconds per frame.
	double exposure_time = 2;
}

message IntensityCalibration {
	// The intensity unit.
	IntensityUnit intensity_unit = 1;
	// The gain (Count/photon). Can be used to convert the signal in Analogue-to-Digital
	// count units (Counts) to photons.
	double count_per_photon = 2;
}
	
// Define the calibration for angles
message AngleCalibration {
	// The angle units, e.g. for a rotated point spread function.
	AngleUnit angle_unit = 1;
}

// The camera type
enum CameraType {
	CAMERA_TYPE_NA = 0; // Not available
	EMCCD = 1; // Electron Multiplying Charge Coupled Device (EM CCD)
	CCD = 2; // Charge Coupled Device (CCD)
	SCMOS = 3; // Scientific Complementary Metal-Oxide-Semiconductor (sCMOS)
}

// Define the camera calibration
message CameraCalibration {
	// The camera type.
	CameraType camera_type = 1;
	
	// The camera Gaussian read noise (in Counts).
	double read_noise = 2;

	// The camera bias (in Counts) 
	double bias = 3;

	// The camera amplification (Count/electron) used when modelling a microscope camera.
	// Note that the camera noise model assumes that electrons are converted to counts by 
	// amplification that is not perfect (i.e. it has noise). The amplification is equal 
	// to the gain (Count/photon) divided by the quantum efficiency (electron/photon).
	double count_per_electron = 4;
	
	// The camera model name. This should contain all the information required to 
	// load the camera model, e.g. in the case of a per-pixel camera model for sCMOS cameras.
	string camera_model_name = 5;
}

// Define the calibration for the results. The calibration contains details of the 
// results units and how to convert them. Note that data can be loaded without knowledge
// of the camera used so the distance, time and intensity calibration are separate.
message Calibration
{
	// The distance calibration.
	DistanceCalibration distance_calibration = 1;

	// The time calibration.
	TimeCalibration time_calibration = 2;
	
	// The intensity calibration
	IntensityCalibration intensity_calibration = 3;
	
	// The angle calibration.
	AngleCalibration angle_calibration = 4;
	
	// The camera calibration.
	CameraCalibration camera_calibration = 5;
}
