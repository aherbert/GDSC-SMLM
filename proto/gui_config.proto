syntax = "proto3";

// ProtoBuffer description file for configuration settings of the GDSC SMLM Java code.
// Authors: Alex Herbert, 2017 
// License: GPL V3
package gdsc.smlm.data.config;

option java_outer_classname = "GUIConfig";

// Contain the settings for the result filtering
message GUIFilterSettings {
	float max_drift = 1;
	float min_signal = 2;
	float min_snr = 3;
	double max_precision = 4;
	float max_width = 5;
	float min_width = 6;
	string mask_title = 7;
	string free_filter = 8;
	string filter_template = 9;
	string filter_analysis_directory = 10;
	string filter_set_filename = 11;
}

// Contain the settings for the PSF Calculator
message PSFCalculatorSettings
{
	double pixel_pitch = 1;
	double magnification = 2;
	double beam_expander = 3;
	double wavelength = 4;
	double numerical_aperture = 5;
	bool adjust_for_square_pixels = 6;
	double proportionality_factor = 7;
}

// Contain the settings for the PSF Estimator
message PSFEstimatorSettings
{
	int32 number_of_peaks = 1;
	double p_value = 2;
	bool update_preferences = 3;
	bool debug_psf_estimator = 4;
	bool iterate = 5;
	bool show_histograms = 6;
	int32 histogram_bins = 7;
}

// Contain the settings for the Create Data plugin
message CreateDataSettings
{
	int32 size = 1;
	double depth = 2;
	bool fixed_Depth = 3;
	double seconds = 4;
	double exposure_time = 5;
	double steps_per_second = 6;
	string illumination = 7;
	string background_image = 8;
	string distribution = 9;
	string distribution_mask = 10;
	double distribution_mask_slice_depth = 11;
	bool poisson_noise = 12;
	double background = 13;
	double em_gain = 14;
	double camera_gain = 15;
	double quantum_efficiency = 16;
	// The read noise (electrons).
	double read_noise = 17;
	int32 bias = 18;
	int32 particles = 19;
	bool sample_per_frame = 20;
	// Photons are modelled using an emission rate (photon emission is constant when the fluorophore is on) sampled from
	// a distribution. The rate (average of the distribution) is correlated to the total on time. Observations on real
	// data indicate the correlation is around -0.35, i.e. shorter bursts are brighter.
	double photons_per_second = 21;

	// For a simple localisation model the photons are randomly selected between photonsPerSecond and
	// photonsPerSecondMaximum
	double photons_per_second_maximum = 22;
	// Define the distribution for the random photon emission. The default is to use a gamma
	// distribution with the defined shape parameter.
	string photon_distribution = 23;
	string photon_distribution_file = 24;
	double photon_shape = 25;
	double correlation = 26;
	string psf_model = 27;
	string psf_image_name = 28;
	bool enter_width = 29;
	double wavelength = 30;
	double numerical_aperture = 31;
	double psf_sd = 32;
	double pixel_pitch = 33;
	double density = 34;
	double diffusion_rate = 35;
	int32 diffusion_type = 36;
	bool compound_molecules = 37;
	string compound_text = 38;
	bool diffuse_2D = 39;
	bool rotate_initial_orientation = 40;
	bool rotate_during_simulation = 41;
	bool rotate_2D = 42;
	double fixedFraction = 43;
	string confinement = 44;
	string confinement_mask = 45;
	double confinement_mask_slice_depth = 46;
	double confinement_radius = 47;
	int32 pulse_interval = 48;
	double pulse_ratio = 49;
	// Average t-On in milliseconds
	double t_on = 50;
	// Average t-Off for the short dark state in milliseconds
	double t_off_short = 51;
	// Average t-Off for the long dark state in milliseconds
	double t_off_long = 52;
	// Average number of short blinks, i.e. when transitioning from the on state to the short dark state
	double n_blinks_short = 53;
	// Average number of long blinks, i.e. transitions to the long dark state
	double n_blinks_long = 54;
	// Set to true to use a geometric distribution for the nBlinks. Default is to use a Poisson.
	bool n_blinks_geometric_distribution = 55;

	double min_photons = 56;
	double min_snr_t1 = 57;
	double min_snr_tN = 58;
	bool raw_image = 59;
	bool save_image = 60;
	bool save_image_results = 61;
	bool save_localisations = 62;
	bool save_fluorophores = 63;
	string image_filename = 64;
	string image_results_filename = 65;
	string fluorophoresFilename = 66;

	int32 cell_size = 67;
	double probability_binary = 68;
	double min_binary_distance = 69;
	double max_binary_distance = 70;

	bool show_histograms = 71;
	bool choose_histograms = 72;
	int32 histogram_bins = 73;
	bool remove_outliers = 74;
	float density_radius = 75;
	float depth_of_field = 76;

	double x_position = 77;
	double y_position = 78;
	double z_position = 79;
}

// Settings for the Load Localisations plugin
message LoadLocalisationsSettings
{
	string localisationsFilename = 1;
}

// Contain the settings for the clustering algorithm
message ClusteringSettings
{
	double distanceThreshold = 50;
	double distanceExclusion = 0;
	double timeThreshold = 1;
	TimeUnit timeUnit = TimeUnit.SECOND;
	int32 traceMode = TraceMode.LATEST_FORERUNNER.ordinal();
	int32 clusteringAlgorithm = ClusteringAlgorithm.PAIRWISE.ordinal();
	int32 pulseInterval = 0;
	int32 pulseWindow = 0;
	bool splitPulses = false;
	double blinkingRate = 1;
	bool optimise = false;
	double minDistanceThreshold = 0;
	double maxDistanceThreshold = 500;
	// The min time threshold for optimisation (time is in frames).
	int32 minTimeThreshold = 0;
	// The max time threshold for optimisation (time is in frames).
	int32 maxTimeThreshold = 20;
	int32 optimiserSteps = 10;
	int32 optimiserPlot = OptimiserPlot.BILINEAR.ordinal();
	bool saveTraces = false;
	bool showHistograms = false;
	bool saveTraceData = false;
	string traceDataDirectory = "";
	int32 histogramBins = 100;
	bool removeOutliers = false;
	bool refitOption = false;
	// Options for tracing diffusion
	int32 minimumTraceLength = 6;
	bool truncate = false;
	bool internalDistances = true;
	bool subSampledDistances = false;
	bool ignoreEnds = true;
	bool precisionCorrection = true;
	bool msdCorrection = true;
	bool mle = true;
	int32 fitLength = 6;
	int32 fitRestarts = 3;
	int32 jumpDistance = 1;
}